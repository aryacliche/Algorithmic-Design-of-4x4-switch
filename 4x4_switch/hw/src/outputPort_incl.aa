
// GENERIC CODE WITH MACROS.
//
//   OUTPUTPORTDAEMON
//   NOBLOCKOBUF_FROM_1  
//   NOBLOCKOBUF_FROM_2  
//   NOBLOCKOBUF_FROM_3  
//   NOBLOCKOBUF_FROM_4  
//   OUTPUT_PORT
//
$module [ ##OUTPUTPORTDAEMON ]
	$in () $out () $is
{
	$branchblock[loop] {
		// No C-style pseudo code written for this. It is similar to the 2x2 case with minor changes. The major change is in its iteraction with prioritySelect
		$dopipeline $depth OUTPUT_PORT_PIPELINE_DEPTH 
			$fullrate 

			$merge $entry $loopback
				// down_counter keeps the number of words from
				// the active packet that need to be read.
				//    0 means all words have been read.
				$phi down_counter := 
					ZERO_8 $on $entry next_down_counter $on $loopback

				// pkt_i_e_word is the word that we will read from the
				// ith input queue "now".  Note we may not read from
				// the queue.
				$phi pkt_1_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_1) 
							##NOBLOCKOBUF_FROM_1  $on $loopback

				$phi pkt_2_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_2) 
							##NOBLOCKOBUF_FROM_2  $on $loopback

				$phi pkt_3_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_3) 
							##NOBLOCKOBUF_FROM_3  $on $loopback

				$phi pkt_4_e_word := 
					ZERO_33 $on $entry 
						$guard (read_from_4) 
							##NOBLOCKOBUF_FROM_4  $on $loopback

				//
				// this tells you which is the currently active packet..
				//  (being sent out)
				//
				$phi active_packet := 
					ZERO_3 $on $entry next_active_packet $on $loopback
				$phi active_packet_length :=
					ZERO_8 $on $entry next_active_packet_length $on $loopback

				// priority_index points to the buffer with high priority
					$phi priority_index := 
						ZERO_2 $on $entry next_priority_index $on $loopback

			$endmerge

			//
			// which words are valid?
			//
			$volatile p1_valid := (pkt_1_e_word [] 32)
			$volatile p2_valid := (pkt_2_e_word [] 32)
			$volatile p3_valid := (pkt_3_e_word [] 32)
			$volatile p4_valid := (pkt_4_e_word [] 32)

			//
			// This report statement is useful in debugging.
			//
			$rreport ( ##OUTPUTPORTDAEMON 
					state_summary 
						active_packet
						down_counter
						priority_index
						read_from_1 
						pkt_1_e_word 
						read_from_2
						pkt_2_e_word
						read_from_3 
						pkt_3_e_word 
						read_from_4 
						pkt_4_e_word 
				)

			//
			// do we have a valid word from the active packet?
			//
			$volatile valid_active_pkt_word_read :=
				($excmux 
					(active_packet == 1) p1_valid
					(active_packet == 2) p2_valid
					(active_packet == 3) p3_valid
					(active_packet == 4) p4_valid)

			//
			// priority select comes into play only when
			//  1. either there is no active packet.
			// OR
			//  2. an active packet has finished.
			
			$volatile $call prioritySelect 
					   (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid)
							(next_active_packet next_priority_index)

			//
			// started_new_packet means the obvious
			//
			$volatile started_new_packet := 
				((next_active_packet != 0) & (down_counter == 0))
			$volatile next_active_packet_length :=
					($mux started_new_packet 
						($excmux
								(next_active_packet == 1) ($slice pkt_1_e_word 15 8)
								(next_active_packet == 2) ($slice pkt_2_e_word 15 8)
								(next_active_packet == 3) ($slice pkt_3_e_word 15 8)
								(next_active_packet == 4) ($slice pkt_4_e_word 15 8))
						active_packet_length)
								
							

			//
			//  for the next iteration, what is down_counter.
			//
			$volatile next_down_counter :=
				($mux started_new_packet 
					(next_active_packet_length - 1) // one word already read
					($mux valid_active_pkt_word_read (down_counter - 1) down_counter))

			
			//
			// read from queue 1?
			// 	either no packet from 1 is in progress.
			//      or     packet from 1 is in progress but down-count is not zero.
			//
			//  ($reduce | a b c)  is the same as ((a | b) | c)
			
			$volatile read_from_1 := 
				($reduce |
					(~p1_valid)
					(next_active_packet == 1))

			$volatile read_from_2 := 
				($reduce |
					(~p2_valid)  		
					(next_active_packet == 2))

			$volatile read_from_3 := 
				($reduce |
					(~p3_valid)  		
					(next_active_packet == 3))

			$volatile read_from_4 := 
				($reduce |
					(~p4_valid)  		
					(next_active_packet == 4))

			// send to output port.
			$volatile data_to_out := ($excmux
									(next_active_packet == 1) ($slice pkt_1_e_word 31 0)
									(next_active_packet == 2) ($slice pkt_2_e_word 31 0)
									(next_active_packet == 3) ($slice pkt_3_e_word 31 0)
									(next_active_packet == 4) ($slice pkt_4_e_word 31 0))
			
			//
			// to send data you must have valid data.
			//
			$volatile send_flag := ($excmux 
							(next_active_packet == 1) p1_valid 
							(next_active_packet == 2) p2_valid 
							(next_active_packet == 3) p3_valid 
							(next_active_packet == 4) p4_valid )
			
			$call updateCounter (next_active_packet ##PORT_ID $zero<1> send_flag) (continue)
						
			// send if necessary..
			$guard (send_flag)
				##OUTPUT_PORT := data_to_out

			$rreport ( ##OUTPUTPORTDAEMON 
						send_information started_new_packet next_active_packet send_flag p1_valid p2_valid p3_valid p4_valid data_to_out)
	
		$while 1
	}
}


