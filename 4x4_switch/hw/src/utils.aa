$volatile $module [prioritySelect]
	$in (down_counter: $uint<8> 
			active_packet: $uint<3>
			priority_index: $uint<2>
			p1_valid p2_valid p3_valid p4_valid: $uint<1>) 
	$out (next_active_packet: $uint<3> next_priority_index: $uint<2>)
$is
//
// if down_counter is 0, then it is time to decide which should be
// the new active packet.
{
	d0 := (down_counter == 0)

	$volatile priority_1_validity := ($excmux 
										(priority_index == 0) p1_valid
										(priority_index == 1) p2_valid
										(priority_index == 2) p3_valid
										(priority_index == 3) p4_valid)

	$volatile priority_2_validity := ($excmux 
										(priority_index == 0) p2_valid
										(priority_index == 1) p3_valid
										(priority_index == 2) p4_valid
										(priority_index == 3) p1_valid)

	$volatile priority_3_validity := ($excmux 
										(priority_index == 0) p3_valid
										(priority_index == 1) p4_valid
										(priority_index == 2) p1_valid
										(priority_index == 3) p2_valid)
	
	$volatile priority_4_validity := ($excmux 
										(priority_index == 0) p4_valid
										(priority_index == 1) p1_valid
										(priority_index == 2) p2_valid
										(priority_index == 3) p3_valid)

	select_first_priority := 
		($reduce & 
			d0
			priority_1_validity)
	
	select_second_priority := 
		($reduce & 
			d0
			priority_2_validity)

	select_third_priority := 
		($reduce & 
			d0
			priority_3_validity)

	select_fourth_priority := 
		($reduce & 
			d0
			priority_4_validity)

	next_active_packet := ($prioritymux 
					(~d0)	active_packet 	
					select_first_priority  ((ZERO_1 && priority_index) + 1) 
					select_second_priority ((ZERO_1 && (priority_index + 1)) + 1)
					select_third_priority  ((ZERO_1 && (priority_index + 2)) + 1)
					select_fourth_priority ((ZERO_1 && (priority_index + 3)) + 1)
					$default 0	) // We don't have packet processing + no queue has relevant info
					// The form looks weird because we are basically trying to ensure that we are looking at the 1-indexed version of priority_index as the next_active_packet

	// priority rotates on every selection.
	// I am assuming and really really hopeful that this doesn't end up 
	next_priority_index := ($prioritymux
							(~d0)	priority_index
							select_first_priority (priority_index + 1)
							select_second_priority (priority_index + 2)
							select_third_priority (priority_index + 3)
							select_fourth_priority (priority_index + 4)
							$default priority_index) // This means that nobody had a valid packet to deliver
}

$module [updateCounter]
	$in (input_port output_port : $uint<8>
			up : $uint<1>
			valid : $uint<1>) // valid is 1 if the request is valid, 0 if you're just kidding
	$out (continue : $uint<1>)
$is 	// inputDaemon will run this before pushing to the pipe, outputDaemon will run this after reading from the pipe (in the later case, the continue flag doesn't matter)
{	
	// down = ~up
	// if obuf_semaphore[input_port][output_port] = 128 and up:
	//		continue = 0
	// if obuf_semaphore[input_port][output_port] = 0 and down:
	//		continue = 0
	// if obuf_semaphore[input_port][output_port] != 128 and up:
	//		continue = 1
	//		obuf_semaphore[input_port][output_port] ++
	// if obuf_semaphore[input_port][output_port] != 0 and down:
	//		continue = 1
	//		obuf_semaphore[input_port][output_port] --
	
	$volatile down := (~up)

	$volatile continue := ($excmux 
						((obuf_semaphore[input_port][output_port] > 127) & (down == 1)) 	1
						((obuf_semaphore[input_port][output_port] < 1) & (up == 1)) 	1
						((obuf_semaphore[input_port][output_port] == 128) & (up == 1)) 	0
						((obuf_semaphore[input_port][output_port] == 0) & (down == 1)) 	0
						)

	obuf_semaphore[input_port][output_port] := ($excmux 
						(continue & (down == 1)) 	(obuf_semaphore[input_port][output_port] - 1)
						(continue & (up == 1)) 		(obuf_semaphore[input_port][output_port] + 1)
						(~continue) 				obuf_semaphore[input_port][output_port]
						)
}

$module [initialiseCounters]
	$in () 
	$out ()
$is 	// This will have to be run initially to ensure that the semaphores are put to 0 initially.
{	
	$branchblock[loop] {
	    $merge $entry I_loopback 
			$phi I := $zero<8> $on $entry nI $on I_loopback
		$endmerge
		$volatile nI := (I + 1)
		
		$branchblock[loop] {
			$merge $entry J_loopback 
				$phi J := $zero<8> $on $entry nJ $on J_loopback
			$endmerge
			$volatile nJ := (J + 1)
			obuf_semaphore[I][J] := ZERO_2
			$if (J < 3) $then $place [J_loopback] $endif
		}
	
		$if (I < 3) $then $place [I_loopback] $endif
	}
}
