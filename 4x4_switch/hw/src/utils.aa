$volatile $module [prioritySelect]
	$in (down_counter: $uint<8> active_packet: $uint<2>
			priority_index: $uint<3>
			p1_valid p2_valid p3_valid p4_valid: $uint<1>) 
	$out (next_active_packet: $uint<2> next_priority_index: $uint<3>)
$is
//
// if down_counter is 0, then it is time to decide which should be
// the new active packet.
{
	d0 := (down_counter == 0)

	$volatile pkt_1_has_priority := (priority_index == 1)
	$volatile pkt_2_has_priority := (priority_index == 2)
	$volatile pkt_3_has_priority := (priority_index == 3)
	$volatile pkt_4_has_priority := (priority_index == 4)

// FIXME: Make this make sense
	select_1 := 
		($reduce & 
			d0
			p1_valid
			(pkt_1_has_priority | (~p2_valid)))
	select_2 := 
		($reduce & 
			d0
			p2_valid
			((pkt_2_has_priority) | (~p1_valid)))

	select_3 := 
		($reduce & 
			d0
			p3_valid
			((pkt_3_has_priority) | (~p1_valid)))

	select_4 := 
		($reduce & 
			d0
			p4_valid
			((pkt_4_has_priority) | (~p1_valid)))

	next_active_packet := ($excmux 
					(~d0)	active_packet 
					select_1 1
					select_2 2
					select_3 3
					select_4 4
				)

	// priority rotates on every selection.
	next_pkt_1_has_priority := ($mux (select_1 | select_2) 
						(~pkt_1_has_priority)
						pkt_1_has_priority)
}

