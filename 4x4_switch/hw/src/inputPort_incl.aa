// GENERIC with MACROS
//   INPUTPORTDAEMON   
//   INPUT_PORT
//   NOBLOCKOBUF_TO_1 
//   NOBLOCKOBUF_TO_2 
//	 NOBLOCKOBUF_TO_3
//	 NOBLOCKOBUF_TO_4
// 
$module [ ##INPUTPORTDAEMON ]
	$in () $out () $is
{
	$branchblock[loop] {



		//
		//  These two are circulating values...
		//
		//  count_down = 0;
		//  last_dest_id = 0;
		//
		//
		//  while(1) {
		//       input_word = read_uint32("input_word");
		//       new_packet = (count_down == 0);
		//
		//       dest_id, pkt_length, seq_id = splitWord(input_word);
		//       count_down =   (new_packet ? pkt_length-1 : count_down-1);
		// 
		//       last_dest_id = (new_packet ? dest_id : last_dest_id);
		//       send_to_1    = (last_dest_id == 1);
		//       send_to_2    = (last_dest_id == 2);
		//       send_to_3    = (last_dest_id == 3);
		//       send_to_4    = (last_dest_id == 4);
		//       if(send_to_1)
		//            write_uint32("obuf_1_1", input_word);
		//       if(send_to_2)
		//            write_uint32("obuf_1_2", input_word);
		//       if(send_to_3)
		//            write_uint32("obuf_1_3", input_word);
		//       if(send_to_4)
		//            write_uint32("obuf_1_4", input_word);
		//  }

		$dopipeline $depth INPUT_PORT_PIPELINE_DEPTH
				$fullrate

			$merge $entry $loopback 
				$phi count_down   := 
						ZERO_16 $on $entry
							next_count_down $on $loopback
				$phi input_word   := ##INPUT_PORT $on $entry, $loopback
				$phi last_dest_id :=  0 $on $entry next_last_dest_id
								$on $loopback
			$endmerge

			$rreport ( ##INPUTPORTDAEMON   received_input_word input_word)
			//
			// volatile means that new_packet does not need
			// to be remembered in a register.
			//
			// compiler can make this a combinational circuit.
			//
			$volatile new_packet := (count_down == 0)
			
			$volatile $split (input_word 8 16 8)
						(dest_id pkt_length seq_id)
			$guard (new_packet)
				$rreport ( ##INPUTPORTDAEMON new_packet_summary dest_id pkt_length seq_id)

			$volatile next_count_down :=
				($mux new_packet (pkt_length - 1) (count_down - 1))

			$volatile next_last_dest_id :=
					($mux new_packet dest_id last_dest_id)

			// add valid bit for noblock.
			$volatile data_to_outport := ($concat ONE_1 input_word)
			
			$volatile continue := ( $call updateCounter (##PORT_ID (next_last_dest_id - 1) $one<1> $one<1>) )

			$volatile send_to_1 := ((next_last_dest_id == 1) & continue)
			$volatile send_to_2 := ((next_last_dest_id == 2) & continue)
			$volatile send_to_3 := ((next_last_dest_id == 3) & continue)
			$volatile send_to_4 := ((next_last_dest_id == 4) & continue)
			
			
			$guard (send_to_1)
				##NOBLOCKOBUF_TO_1 := data_to_outport

			$guard (send_to_2)
				##NOBLOCKOBUF_TO_2 := data_to_outport

			$guard (send_to_3)
				##NOBLOCKOBUF_TO_3 := data_to_outport

			$guard (send_to_4)
				##NOBLOCKOBUF_TO_4 := data_to_outport
			
			$rreport ( ##INPUTPORTDAEMON   write_status send_to_1 send_to_2 send_to_3 send_to_4 data_to_outport new_packet 
						last_dest_id next_last_dest_id count_down)

		$while 1
	}
}


