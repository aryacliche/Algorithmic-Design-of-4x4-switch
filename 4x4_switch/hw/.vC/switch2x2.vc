// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data_1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_1] 32 $depth 2 
// $pipe  in_data_2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_2] 32 $depth 2 
// $pipe  in_data_3 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_3] 32 $depth 2 
// $pipe  in_data_4 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [in_data_4] 32 $depth 2 
// $noblock $pipe  noblock_obuf_1_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_1_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_2_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_3_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_4] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_1 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_1] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_2 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_2] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_3 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_3] 33 $depth 128 
// $noblock $pipe  noblock_obuf_4_4 : $uint<33>  $depth 128 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_4] 33 $depth 128 
// $pipe  out_data_1 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_1] 32 $depth 2 
// $pipe  out_data_2 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_2] 32 $depth 2 
// $pipe  out_data_3 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_3] 32 $depth 2 
// $pipe  out_data_4 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [out_data_4] 32 $depth 2 
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_33] : $int<33> := _b000000000000000000000000000000001// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_16] : $int<16> := _b0000000000000000// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_3] : $int<3> := _b000// 0
$constant $W[ZERO_33] : $int<33> := _b000000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
// load store constants for object obuf_semaphore
$constant $W[obuf_semaphore_base_address] : $int<4> := _b0000
// Declared gated clocks.
$memoryspace [memory_space_0] 
{
  $capacity 16
  $datawidth 2
  $addrwidth 4
  $maxaccesswidth 2
  // $storage  obuf_semaphore : $array[4][4] $of $uint<2> // memory space index = 0  base address = 0  word size = 2
  // can point into 
  // in scope  top-level
  $object [obuf_semaphore] : $array[16] $of $int<2>
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/switch2x2.opt.aa, line 61
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/switch2x2.opt.aa, line 61
  }
  // end data-path
}
$module [initialiseCounters] 
{
  // pipe-declarations for block %initialiseCounters
  //  file .Aa/switch2x2.opt.aa, line 68
  // pipe-declarations for block %initialiseCounters%loop
  //  file .Aa/switch2x2.opt.aa, line 73
  // pipe-declarations for block %initialiseCounters%loop%
  //  file .Aa/switch2x2.opt.aa, line 75
  // pipe-declarations for block %initialiseCounters%loop%loop
  //  file .Aa/switch2x2.opt.aa, line 80
  // pipe-declarations for block %initialiseCounters%loop%loop%
  //  file .Aa/switch2x2.opt.aa, line 82
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_67] // Branch Block  file .Aa/switch2x2.opt.aa, line 73
    {
      $P [branch_block_stmt_67__entry__]
      branch_block_stmt_67__entry__ <-| ($entry)
      $P [branch_block_stmt_67__exit__]
      branch_block_stmt_67__exit__ |-> ($exit)
      $P [merge_stmt_68__entry__] 
      $P [merge_stmt_68__exit__] 
      $P [assign_stmt_79__entry__] 
      $P [assign_stmt_79__exit__] 
      $P [branch_block_stmt_80__entry__] 
      $P [branch_block_stmt_80__exit__] 
      $P [if_stmt_105__entry__] 
      $P [if_stmt_105__exit__] 
      ::[assign_stmt_79] 
      {
        // start: WAR dependencies for nI
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nI
        // start:  		$volatile nI := (I + 1 ) $buffering 1
        //  file .Aa/switch2x2.opt.aa, line 79
        // volatile! 
        // Source expression
        // (I + 1 )
        // I
        // Target expression
        // (as target) nI
        // start: WAR dependencies for nI
        // ignored out-of-scope w_root 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
        // type of target is $uint<8>
        // done: WAR dependencies for nI
        // end:  		$volatile nI := (I + 1 ) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_79__entry__ |-> (assign_stmt_79)
      assign_stmt_79__exit__ <-| (assign_stmt_79)
      <>[branch_block_stmt_80] // Branch Block  file .Aa/switch2x2.opt.aa, line 80
      {
        $P [branch_block_stmt_80__entry__]
        branch_block_stmt_80__entry__ <-| ($entry)
        $P [branch_block_stmt_80__exit__]
        branch_block_stmt_80__exit__ |-> ($exit)
        $P [merge_stmt_81__entry__] 
        $P [merge_stmt_81__exit__] 
        $P [assign_stmt_92_to_assign_stmt_97__entry__] 
        $P [assign_stmt_92_to_assign_stmt_97__exit__] 
        $P [if_stmt_98__entry__] 
        $P [if_stmt_98__exit__] 
        ::[assign_stmt_92_to_assign_stmt_97] 
        {
          // start: WAR dependencies for nJ
          // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
          // type of target is $uint<8>
          // done: WAR dependencies for nJ
          // start:  			$volatile nJ := (J + 1 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 86
          // volatile! 
          // Source expression
          // (J + 1 )
          // J
          // Target expression
          // (as target) nJ
          // start: WAR dependencies for nJ
          // ignored out-of-scope w_root 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
          // type of target is $uint<8>
          // done: WAR dependencies for nJ
          // end:  			$volatile nJ := (J + 1 ) $buffering 1
          // start:  			obuf_semaphore[I][J] := ZERO_2 $buffering 1// bits of buffering = 2. 
          //  file .Aa/switch2x2.opt.aa, line 87
          // Target expression
          // obuf_semaphore[I][J]
          $T[array_obj_ref_95_sample_start_] 
          $T[array_obj_ref_95_sample_completed_] 
          $T[array_obj_ref_95_update_start_] 
          $T[array_obj_ref_95_update_completed_] 
          $T[array_obj_ref_95_word_address_calculated] 
          $T[array_obj_ref_95_root_address_calculated] 
          $T[array_obj_ref_95_offset_calculated] 
          $T[array_obj_ref_95_index_resized_0] 
          $T[array_obj_ref_95_index_scaled_0] 
          $T[array_obj_ref_95_index_computed_0] 
          // I
          // start: Forward dependencies from I to transition array_obj_ref_95_index_computed_0
          // done: Forward dependencies from I to transition array_obj_ref_95_index_computed_0
          ;;[array_obj_ref_95_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_95_index_computed_0 &-> (array_obj_ref_95_index_resize_0)
          array_obj_ref_95_index_resized_0 <-& (array_obj_ref_95_index_resize_0)
          $T[array_obj_ref_95_index_scale_0_sample_start] 
          $T[array_obj_ref_95_index_scale_0_sample_complete] 
          $T[array_obj_ref_95_index_scale_0_update_start] 
          $T[array_obj_ref_95_index_scale_0_update_complete] 
          ;;[array_obj_ref_95_index_scale_0_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_95_index_scale_0_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_95_index_resized_0 &-> (array_obj_ref_95_index_scale_0_sample_start)
          array_obj_ref_95_index_scale_0_sample_start &-> (array_obj_ref_95_index_scale_0_Sample)
          array_obj_ref_95_index_scale_0_sample_complete <-& (array_obj_ref_95_index_scale_0_Sample)
          array_obj_ref_95_index_scale_0_update_start &-> (array_obj_ref_95_index_scale_0_Update)
          array_obj_ref_95_index_scale_0_update_complete <-& (array_obj_ref_95_index_scale_0_Update)
          array_obj_ref_95_index_scaled_0 <-& (array_obj_ref_95_index_scale_0_update_complete)
          $T[array_obj_ref_95_index_resized_1] 
          $T[array_obj_ref_95_index_scaled_1] 
          $T[array_obj_ref_95_index_computed_1] 
          // J
          // start: Forward dependencies from J to transition array_obj_ref_95_index_computed_1
          // done: Forward dependencies from J to transition array_obj_ref_95_index_computed_1
          ;;[array_obj_ref_95_index_resize_1] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_95_index_computed_1 &-> (array_obj_ref_95_index_resize_1)
          array_obj_ref_95_index_resized_1 <-& (array_obj_ref_95_index_resize_1)
          ;;[array_obj_ref_95_index_scale_1] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_95_index_resized_1 &-> (array_obj_ref_95_index_scale_1)
          array_obj_ref_95_index_scaled_1 <-& (array_obj_ref_95_index_scale_1)
          $T[array_obj_ref_95_partial_sum_1_sample_start] 
          $T[array_obj_ref_95_partial_sum_1_sample_complete] 
          $T[array_obj_ref_95_partial_sum_1_update_start] 
          $T[array_obj_ref_95_partial_sum_1_update_complete] 
          ;;[array_obj_ref_95_partial_sum_1_Sample] 
          {
            $T [rr] $T [ra] 
          }
          ;;[array_obj_ref_95_partial_sum_1_Update] 
          {
            $T [cr] $T [ca] 
          }
          array_obj_ref_95_partial_sum_1_sample_start &-> (array_obj_ref_95_partial_sum_1_Sample)
          array_obj_ref_95_partial_sum_1_sample_complete <-& (array_obj_ref_95_partial_sum_1_Sample)
          array_obj_ref_95_partial_sum_1_update_start &-> (array_obj_ref_95_partial_sum_1_Update)
          array_obj_ref_95_partial_sum_1_update_complete <-& (array_obj_ref_95_partial_sum_1_Update)
          array_obj_ref_95_partial_sum_1_sample_start <-& (array_obj_ref_95_index_scaled_0)
          array_obj_ref_95_partial_sum_1_sample_start <-& (array_obj_ref_95_index_scaled_1)
          array_obj_ref_95_offset_calculated <-& (array_obj_ref_95_partial_sum_1_update_complete)
          ;;[array_obj_ref_95_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_95_partial_sum_1_update_complete &-> (array_obj_ref_95_final_index_sum_regn)
          array_obj_ref_95_offset_calculated <-& (array_obj_ref_95_final_index_sum_regn)
          ;;[array_obj_ref_95_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_95_offset_calculated &-> (array_obj_ref_95_base_plus_offset)
          array_obj_ref_95_root_address_calculated <-& (array_obj_ref_95_base_plus_offset)
          ;;[array_obj_ref_95_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_95_root_address_calculated &-> (array_obj_ref_95_word_addrgen)
          array_obj_ref_95_word_address_calculated <-& (array_obj_ref_95_word_addrgen)
          ;;[array_obj_ref_95_Sample] 
          {
            ;;[array_obj_ref_95_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_95_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_95_sample_start_ <-& (array_obj_ref_95_word_address_calculated)
          array_obj_ref_95_sample_start_ &-> (array_obj_ref_95_Sample)
          array_obj_ref_95_sample_completed_ <-& (array_obj_ref_95_Sample)
          array_obj_ref_95_sample_completed_ &-> ($null)
          array_obj_ref_95_update_start_ &-> (array_obj_ref_95_Update)
          array_obj_ref_95_update_completed_ <-& (array_obj_ref_95_Update)
          // end:  			obuf_semaphore[I][J] := ZERO_2 $buffering 1// bits of buffering = 2. 
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_95 store
        }
        assign_stmt_92_to_assign_stmt_97__entry__ |-> (assign_stmt_92_to_assign_stmt_97)
        assign_stmt_92_to_assign_stmt_97__exit__ <-| (assign_stmt_92_to_assign_stmt_97)
        // if-statement  
        //  file .Aa/switch2x2.opt.aa, line 0
        ;;[if_stmt_98_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        if_stmt_98__entry__ |-> (if_stmt_98_dead_link)
        if_stmt_98__exit__ <-| (if_stmt_98_dead_link)
        ;;[if_stmt_98_eval_test] 
        {
          // test expression evaluate and trigger branch 
          // (J < 3 )
          ;;[ULT_u8_u1_101] 
          {
            // binary expression 
            ||[ULT_u8_u1_101_inputs] 
            {
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          $T [branch_req] 
        }
        if_stmt_98__entry__ |-> (if_stmt_98_eval_test)
        $P [ULT_u8_u1_101_place]
        ULT_u8_u1_101_place <-| (if_stmt_98_eval_test)
        ;;[if_stmt_98_if_link] 
        {
          $T [if_choice_transition] 
        }
        ;;[if_stmt_98_else_link] 
        {
          $T [else_choice_transition] 
        }
        ULT_u8_u1_101_place |-> (if_stmt_98_if_link if_stmt_98_else_link)
        $P [J_loopback]
        J_loopback <-| (if_stmt_98_if_link)
        if_stmt_98__exit__ <-| (if_stmt_98_else_link)
        // control-path for merge  
        //  file .Aa/switch2x2.opt.aa, line 82
        ;;[merge_stmt_81_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        merge_stmt_81__entry__ |-> (merge_stmt_81_dead_link)
        merge_stmt_81__exit__ <-| (merge_stmt_81_dead_link)
        //---------------------   merge statement  file .Aa/switch2x2.opt.aa, line 82  --------------------------
        ||[merge_stmt_81__entry___PhiReq] 
        {
          ;;[phi_stmt_82] 
          {
            ||[phi_stmt_82_sources] 
            {
              // sources for 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
              // type of target is $uint<8>
              // constant source .... delay transition 
              $T [type_cast_85_konst_delay_trans] $delay
            }
            $T [phi_stmt_82_req] 
          }
        }
        merge_stmt_81__entry__ |-> (merge_stmt_81__entry___PhiReq)
        ||[J_loopback_PhiReq] 
        {
          ;;[phi_stmt_82] 
          {
            ||[phi_stmt_82_sources] 
            {
              // sources for 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
              // type of target is $uint<8>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_82_req] 
          }
        }
        J_loopback |-> (J_loopback_PhiReq)
        $P [merge_stmt_81_PhiReqMerge] 
        merge_stmt_81_PhiReqMerge <-| ( merge_stmt_81__entry___PhiReq  J_loopback_PhiReq )
        ||[merge_stmt_81_PhiAck] 
        {
          $T [phi_stmt_82_ack] 
        }
        merge_stmt_81_PhiReqMerge |-> (merge_stmt_81_PhiAck)
        merge_stmt_81__exit__  <-| (merge_stmt_81_PhiAck)
        //---------------------  end of merge statement  file .Aa/switch2x2.opt.aa, line 82  --------------------------
        merge_stmt_81__entry__ <-| (branch_block_stmt_80__entry__)
        assign_stmt_92_to_assign_stmt_97__entry__ <-| (merge_stmt_81__exit__)
        if_stmt_98__entry__ <-| (assign_stmt_92_to_assign_stmt_97__exit__)
        if_stmt_98__exit__ |-> (branch_block_stmt_80__exit__)
      }
      branch_block_stmt_80__entry__ |-> (branch_block_stmt_80)
      branch_block_stmt_80__exit__ <-| (branch_block_stmt_80)
      // if-statement  
      //  file .Aa/switch2x2.opt.aa, line 0
      ;;[if_stmt_105_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_105__entry__ |-> (if_stmt_105_dead_link)
      if_stmt_105__exit__ <-| (if_stmt_105_dead_link)
      ;;[if_stmt_105_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (I < 3 )
        ;;[ULT_u8_u1_108] 
        {
          // binary expression 
          ||[ULT_u8_u1_108_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_105__entry__ |-> (if_stmt_105_eval_test)
      $P [ULT_u8_u1_108_place]
      ULT_u8_u1_108_place <-| (if_stmt_105_eval_test)
      ;;[if_stmt_105_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_105_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_108_place |-> (if_stmt_105_if_link if_stmt_105_else_link)
      $P [I_loopback]
      I_loopback <-| (if_stmt_105_if_link)
      if_stmt_105__exit__ <-| (if_stmt_105_else_link)
      // control-path for merge  
      //  file .Aa/switch2x2.opt.aa, line 75
      ;;[merge_stmt_68_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_68__entry__ |-> (merge_stmt_68_dead_link)
      merge_stmt_68__exit__ <-| (merge_stmt_68_dead_link)
      //---------------------   merge statement  file .Aa/switch2x2.opt.aa, line 75  --------------------------
      ||[merge_stmt_68__entry___PhiReq] 
      {
        ;;[phi_stmt_69] 
        {
          ||[phi_stmt_69_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_72_konst_delay_trans] $delay
          }
          $T [phi_stmt_69_req] 
        }
      }
      merge_stmt_68__entry__ |-> (merge_stmt_68__entry___PhiReq)
      ||[I_loopback_PhiReq] 
      {
        ;;[phi_stmt_69] 
        {
          ||[phi_stmt_69_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_69_req] 
        }
      }
      I_loopback |-> (I_loopback_PhiReq)
      $P [merge_stmt_68_PhiReqMerge] 
      merge_stmt_68_PhiReqMerge <-| ( merge_stmt_68__entry___PhiReq  I_loopback_PhiReq )
      ||[merge_stmt_68_PhiAck] 
      {
        $T [phi_stmt_69_ack] 
      }
      merge_stmt_68_PhiReqMerge |-> (merge_stmt_68_PhiAck)
      merge_stmt_68__exit__  <-| (merge_stmt_68_PhiAck)
      //---------------------  end of merge statement  file .Aa/switch2x2.opt.aa, line 75  --------------------------
      merge_stmt_68__entry__ <-| (branch_block_stmt_67__entry__)
      assign_stmt_79__entry__ <-| (merge_stmt_68__exit__)
      branch_block_stmt_80__entry__ <-| (assign_stmt_79__exit__)
      if_stmt_105__entry__ <-| (branch_block_stmt_80__exit__)
      if_stmt_105__exit__ |-> (branch_block_stmt_67__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %initialiseCounters%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-object-declarations for block %initialiseCounters%loop%loop%
    //  file .Aa/switch2x2.opt.aa, line 82
    // constant-object-declarations for block %initialiseCounters%loop%loop
    //  file .Aa/switch2x2.opt.aa, line 80
    // constant-object-declarations for block %initialiseCounters%loop
    //  file .Aa/switch2x2.opt.aa, line 73
    // constant-object-declarations for block %initialiseCounters
    //  file .Aa/switch2x2.opt.aa, line 68
    // constant-declarations for block %initialiseCounters%loop
    //  file .Aa/switch2x2.opt.aa, line 73
    // constant-declarations for block %initialiseCounters%loop%
    //  file .Aa/switch2x2.opt.aa, line 75
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 76
    // ($bitcast ($uint<8>) _b0  )
    $constant $W[type_cast_72_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_77_wire_constant] : $int<8> := _b00000001// 1
    // constant-declarations for block %initialiseCounters%loop%loop
    //  file .Aa/switch2x2.opt.aa, line 80
    // constant-declarations for block %initialiseCounters%loop%loop%
    //  file .Aa/switch2x2.opt.aa, line 82
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 83
    // ($bitcast ($uint<8>) _b0  )
    $constant $W[type_cast_85_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_90_wire_constant] : $int<8> := _b00000001// 1
    // ZERO_2
    $constant $W[R_ZERO_2_96_wire_constant] : $int<2> := _b00// 0
    // obuf_semaphore[I][J]
    $constant $W[array_obj_ref_95_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_95_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_95_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_95_word_offset_0] : $int<4> := _b0000// 0
    // if-statement  
    //  file .Aa/switch2x2.opt.aa, line 0
    // 3 
    $constant $W[konst_100_wire_constant] : $int<8> := _b00000011// 3
    // if-statement  
    //  file .Aa/switch2x2.opt.aa, line 0
    // 3 
    $constant $W[konst_107_wire_constant] : $int<8> := _b00000011// 3
    // block %initialiseCounters%loop
    //  file .Aa/switch2x2.opt.aa, line 73
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 76
    $W[nI_79_73_buffered] : $int<8>
    // I
    $W[I_69] : $int<8>
    // 		$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 79
    // nI
    $W[nI_79] : $int<8>
    // block %initialiseCounters%loop%loop
    //  file .Aa/switch2x2.opt.aa, line 80
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 82
    // 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 83
    $W[nJ_92_86_buffered] : $int<8>
    // J
    $W[J_82] : $int<8>
    // 			$volatile nJ := (J + 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // nJ
    $W[nJ_92] : $int<8>
    // 			obuf_semaphore[I][J] := ZERO_2 $buffering 1// bits of buffering = 2. 
    //  file .Aa/switch2x2.opt.aa, line 87
    // obuf_semaphore[I][J]
    $intermediate $W[R_I_93_resized] : $int<4>
    $intermediate $W[R_I_93_scaled] : $int<4>
    $intermediate $W[R_J_94_resized] : $int<4>
    $intermediate $W[R_J_94_scaled] : $int<4>
    $intermediate $W[array_obj_ref_95_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_95_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_95_root_address] : $int<4>
    $W[array_obj_ref_95_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_95_data_0] : $int<2>
    // if statement  
    //  file .Aa/switch2x2.opt.aa, line 0
    // (J < 3 )
    $intermediate $W[ULT_u8_u1_101_wire] : $int<1>
    // if statement  
    //  file .Aa/switch2x2.opt.aa, line 0
    // (I < 3 )
    $intermediate $W[ULT_u8_u1_108_wire] : $int<1>
    // datapath-instances for block %initialiseCounters%loop
    //  file .Aa/switch2x2.opt.aa, line 73
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 75
    // 			$phi I := 			  ($bitcast ($uint<8>) _b0  ) $on   $entry 			  nI $on   I_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 76
    # := [nI_79_73_buf] (nI_79) (nI_79_73_buffered)   $in_phi   
    $phi [phi_stmt_69] (type_cast_72_wire_constant nI_79_73_buffered) ( I_69 ) 
    // 		$volatile nI := (I + 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 79
    // (I + 1 )
    +[ADD_u8_u8_78_inst] (I_69 konst_77_wire_constant) (nI_79)   $flowthrough 
    $delay ADD_u8_u8_78_inst 0
    // datapath-instances for block %initialiseCounters%loop%loop
    //  file .Aa/switch2x2.opt.aa, line 80
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 82
    // 				$phi J := 				  ($bitcast ($uint<8>) _b0  ) $on   $entry 				  nJ $on   J_loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 83
    # := [nJ_92_86_buf] (nJ_92) (nJ_92_86_buffered)   $in_phi   
    $phi [phi_stmt_82] (type_cast_85_wire_constant nJ_92_86_buffered) ( J_82 ) 
    // 			$volatile nJ := (J + 1 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 86
    // (J + 1 )
    +[ADD_u8_u8_91_inst] (J_82 konst_90_wire_constant) (nJ_92)   $flowthrough 
    $delay ADD_u8_u8_91_inst 0
    // 			obuf_semaphore[I][J] := ZERO_2 $buffering 1// bits of buffering = 2. 
    //  file .Aa/switch2x2.opt.aa, line 87
    // obuf_semaphore[I][J]
    &/ [array_obj_ref_95_index_0_resize] (I_69) (R_I_93_resized) 
    $flowthrough 
    *[array_obj_ref_95_index_0_scale] (R_I_93_resized array_obj_ref_95_offset_scale_factor_0) (R_I_93_scaled)   
    $delay array_obj_ref_95_index_0_scale 2
    &/ [array_obj_ref_95_index_1_resize] (J_82) (R_J_94_resized) 
    $flowthrough 
    &/ [array_obj_ref_95_index_1_rename] (R_J_94_resized) (R_J_94_scaled) 
    $flowthrough 
    +[array_obj_ref_95_index_sum_1] (R_J_94_scaled R_I_93_scaled) (array_obj_ref_95_index_partial_sum_1)   
    $delay array_obj_ref_95_index_sum_1 2
    &/ [array_obj_ref_95_index_offset] (array_obj_ref_95_index_partial_sum_1) (array_obj_ref_95_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_95_root_address_inst] (array_obj_ref_95_final_offset) (array_obj_ref_95_root_address) 
    $flowthrough 
    &/ [array_obj_ref_95_addr_0] (array_obj_ref_95_root_address) (array_obj_ref_95_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_95_store_0] $to memory_space_0 (array_obj_ref_95_word_address_0 array_obj_ref_95_data_0) 
    $delay array_obj_ref_95_store_0 5
    &/ [array_obj_ref_95_gather_scatter] (R_ZERO_2_96_wire_constant) (array_obj_ref_95_data_0) 
    $flowthrough 
    // datapath-instances for if  
    //  file .Aa/switch2x2.opt.aa, line 0
    // (J < 3 )
    <[ULT_u8_u1_101_inst] (J_82 konst_100_wire_constant) (ULT_u8_u1_101_wire)   $flowthrough 
    $delay ULT_u8_u1_101_inst 0
    ==0? [if_stmt_98_branch] (ULT_u8_u1_101_wire)
    // datapath-instances for if  
    //  file .Aa/switch2x2.opt.aa, line 0
    // (I < 3 )
    <[ULT_u8_u1_108_inst] (I_69 konst_107_wire_constant) (ULT_u8_u1_108_wire)   $flowthrough 
    $delay ULT_u8_u1_108_inst 0
    ==0? [if_stmt_105_branch] (ULT_u8_u1_108_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/switch2x2.opt.aa, line 75
  nI_79_73_buf <=> (branch_block_stmt_67/I_loopback_PhiReq/phi_stmt_69/phi_stmt_69_sources/Interlock/Sample/req branch_block_stmt_67/I_loopback_PhiReq/phi_stmt_69/phi_stmt_69_sources/Interlock/Update/req) (branch_block_stmt_67/I_loopback_PhiReq/phi_stmt_69/phi_stmt_69_sources/Interlock/Sample/ack branch_block_stmt_67/I_loopback_PhiReq/phi_stmt_69/phi_stmt_69_sources/Interlock/Update/ack)
  phi_stmt_69 <=> (branch_block_stmt_67/merge_stmt_68__entry___PhiReq/phi_stmt_69/phi_stmt_69_req branch_block_stmt_67/I_loopback_PhiReq/phi_stmt_69/phi_stmt_69_req) (branch_block_stmt_67/merge_stmt_68_PhiAck/phi_stmt_69_ack)
  // 		$volatile nI := (I + 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 79
  // (I + 1 )
  // I
  // CP-DP links for merge  
  //  file .Aa/switch2x2.opt.aa, line 82
  nJ_92_86_buf <=> (branch_block_stmt_67/branch_block_stmt_80/J_loopback_PhiReq/phi_stmt_82/phi_stmt_82_sources/Interlock/Sample/req branch_block_stmt_67/branch_block_stmt_80/J_loopback_PhiReq/phi_stmt_82/phi_stmt_82_sources/Interlock/Update/req) (branch_block_stmt_67/branch_block_stmt_80/J_loopback_PhiReq/phi_stmt_82/phi_stmt_82_sources/Interlock/Sample/ack branch_block_stmt_67/branch_block_stmt_80/J_loopback_PhiReq/phi_stmt_82/phi_stmt_82_sources/Interlock/Update/ack)
  phi_stmt_82 <=> (branch_block_stmt_67/branch_block_stmt_80/merge_stmt_81__entry___PhiReq/phi_stmt_82/phi_stmt_82_req branch_block_stmt_67/branch_block_stmt_80/J_loopback_PhiReq/phi_stmt_82/phi_stmt_82_req) (branch_block_stmt_67/branch_block_stmt_80/merge_stmt_81_PhiAck/phi_stmt_82_ack)
  // 			$volatile nJ := (J + 1 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 86
  // (J + 1 )
  // J
  // 			obuf_semaphore[I][J] := ZERO_2 $buffering 1// bits of buffering = 2. 
  //  file .Aa/switch2x2.opt.aa, line 87
  // I
  array_obj_ref_95_index_0_resize <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_resize_0/index_resize_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_resize_0/index_resize_ack)
  array_obj_ref_95_index_0_scale <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_0_Sample/rr branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_0_Update/cr) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_0_Sample/ra branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_0_Update/ca)
  // J
  array_obj_ref_95_index_1_resize <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_resize_1/index_resize_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_resize_1/index_resize_ack)
  array_obj_ref_95_index_1_rename <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_1/scale_rename_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_index_scale_1/scale_rename_ack)
  array_obj_ref_95_index_sum_1 <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_partial_sum_1_Sample/rr branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_partial_sum_1_Update/cr) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_partial_sum_1_Sample/ra branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_partial_sum_1_Update/ca)
  array_obj_ref_95_index_offset <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_final_index_sum_regn/req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_final_index_sum_regn/ack)
  array_obj_ref_95_root_address_inst <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_base_plus_offset/sum_rename_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_base_plus_offset/sum_rename_ack)
  array_obj_ref_95_addr_0 <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_word_addrgen/root_register_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_word_addrgen/root_register_ack)
  array_obj_ref_95_gather_scatter <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Sample/array_obj_ref_95_Split/split_req) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Sample/array_obj_ref_95_Split/split_ack)
  array_obj_ref_95_store_0 <=> (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Sample/word_access_start/word_0/rr branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Update/word_access_complete/word_0/cr) (branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Sample/word_access_start/word_0/ra branch_block_stmt_67/branch_block_stmt_80/assign_stmt_92_to_assign_stmt_97/array_obj_ref_95_Update/word_access_complete/word_0/ca)
  // CP-DP links for if  
  //  file .Aa/switch2x2.opt.aa, line 0
  // (J < 3 )
  if_stmt_98_branch <=> (branch_block_stmt_67/branch_block_stmt_80/if_stmt_98_eval_test/branch_req) (branch_block_stmt_67/branch_block_stmt_80/if_stmt_98_else_link/else_choice_transition branch_block_stmt_67/branch_block_stmt_80/if_stmt_98_if_link/if_choice_transition)
  // CP-DP links for if  
  //  file .Aa/switch2x2.opt.aa, line 0
  // (I < 3 )
  if_stmt_105_branch <=> (branch_block_stmt_67/if_stmt_105_eval_test/branch_req) (branch_block_stmt_67/if_stmt_105_else_link/else_choice_transition branch_block_stmt_67/if_stmt_105_if_link/if_choice_transition)
}
$module [updateCounter] 
{
  $in input_port:$int<8>
  // can point into 
  output_port:$int<8>
  // can point into 
  up:$int<1>
  // can point into 
  $out continue:$int<1>
  // can point into 
  // pipe-declarations for block %updateCounter
  //  file .Aa/switch2x2.opt.aa, line 97
  // memory-space 0 is written into.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_121_to_assign_stmt_211] 
    {
      // start: WAR dependencies for down
      // ignored out-of-scope w_root  up : $uint<1> 
      // done: WAR dependencies for down
      // start:  	$volatile down := ( ~ up ) $buffering 1
      //  file .Aa/switch2x2.opt.aa, line 102
      // volatile! 
      // Source expression
      // ( ~ up )
      // up
      // Target expression
      // (as target) down
      // start: WAR dependencies for down
      // ignored out-of-scope w_root  up : $uint<1> 
      // done: WAR dependencies for down
      // end:  	$volatile down := ( ~ up ) $buffering 1
      // start: WAR dependencies for continue
      // ignored out-of-scope w_root  up : $uint<1> 
      // ignored out-of-scope w_root obuf_semaphore[input_port][output_port]
      // ignored out-of-scope w_root obuf_semaphore[input_port][output_port]
      // ignored out-of-scope w_root obuf_semaphore[input_port][output_port]
      // ignored out-of-scope w_root obuf_semaphore[input_port][output_port]
      // done: WAR dependencies for continue
      // start:  	$volatile continue := ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )) $buffering 1
      //  file .Aa/switch2x2.opt.aa, line 103
      // volatile! 
      // Source expression
      // ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) ))
      // (( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) )
      // ( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  ) 
      // ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 ))
      // (obuf_semaphore[input_port][output_port] > 127 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_125_sample_start_] 
      $T[array_obj_ref_125_sample_completed_] 
      $T[array_obj_ref_125_update_start_] 
      $T[array_obj_ref_125_update_completed_] 
      $T[array_obj_ref_125_word_address_calculated] 
      $T[array_obj_ref_125_root_address_calculated] 
      $T[array_obj_ref_125_offset_calculated] 
      $T[array_obj_ref_125_index_resized_0] 
      $T[array_obj_ref_125_index_scaled_0] 
      $T[array_obj_ref_125_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_125_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_125_index_computed_0
      ;;[array_obj_ref_125_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_125_index_computed_0 &-> (array_obj_ref_125_index_resize_0)
      array_obj_ref_125_index_resized_0 <-& (array_obj_ref_125_index_resize_0)
      $T[array_obj_ref_125_index_scale_0_sample_start] 
      $T[array_obj_ref_125_index_scale_0_sample_complete] 
      $T[array_obj_ref_125_index_scale_0_update_start] 
      $T[array_obj_ref_125_index_scale_0_update_complete] 
      ;;[array_obj_ref_125_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_125_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_125_index_resized_0 &-> (array_obj_ref_125_index_scale_0_sample_start)
      array_obj_ref_125_index_scale_0_sample_start &-> (array_obj_ref_125_index_scale_0_Sample)
      array_obj_ref_125_index_scale_0_sample_complete <-& (array_obj_ref_125_index_scale_0_Sample)
      array_obj_ref_125_index_scale_0_update_start &-> (array_obj_ref_125_index_scale_0_Update)
      array_obj_ref_125_index_scale_0_update_complete <-& (array_obj_ref_125_index_scale_0_Update)
      array_obj_ref_125_index_scaled_0 <-& (array_obj_ref_125_index_scale_0_update_complete)
      $T[array_obj_ref_125_index_resized_1] 
      $T[array_obj_ref_125_index_scaled_1] 
      $T[array_obj_ref_125_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_125_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_125_index_computed_1
      ;;[array_obj_ref_125_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_125_index_computed_1 &-> (array_obj_ref_125_index_resize_1)
      array_obj_ref_125_index_resized_1 <-& (array_obj_ref_125_index_resize_1)
      ;;[array_obj_ref_125_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_125_index_resized_1 &-> (array_obj_ref_125_index_scale_1)
      array_obj_ref_125_index_scaled_1 <-& (array_obj_ref_125_index_scale_1)
      $T[array_obj_ref_125_partial_sum_1_sample_start] 
      $T[array_obj_ref_125_partial_sum_1_sample_complete] 
      $T[array_obj_ref_125_partial_sum_1_update_start] 
      $T[array_obj_ref_125_partial_sum_1_update_complete] 
      ;;[array_obj_ref_125_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_125_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_125_partial_sum_1_sample_start &-> (array_obj_ref_125_partial_sum_1_Sample)
      array_obj_ref_125_partial_sum_1_sample_complete <-& (array_obj_ref_125_partial_sum_1_Sample)
      array_obj_ref_125_partial_sum_1_update_start &-> (array_obj_ref_125_partial_sum_1_Update)
      array_obj_ref_125_partial_sum_1_update_complete <-& (array_obj_ref_125_partial_sum_1_Update)
      array_obj_ref_125_partial_sum_1_sample_start <-& (array_obj_ref_125_index_scaled_0)
      array_obj_ref_125_partial_sum_1_sample_start <-& (array_obj_ref_125_index_scaled_1)
      array_obj_ref_125_offset_calculated <-& (array_obj_ref_125_partial_sum_1_update_complete)
      ;;[array_obj_ref_125_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_125_partial_sum_1_update_complete &-> (array_obj_ref_125_final_index_sum_regn)
      array_obj_ref_125_offset_calculated <-& (array_obj_ref_125_final_index_sum_regn)
      ;;[array_obj_ref_125_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_125_offset_calculated &-> (array_obj_ref_125_base_plus_offset)
      array_obj_ref_125_root_address_calculated <-& (array_obj_ref_125_base_plus_offset)
      ;;[array_obj_ref_125_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_125_root_address_calculated &-> (array_obj_ref_125_word_addrgen)
      array_obj_ref_125_word_address_calculated <-& (array_obj_ref_125_word_addrgen)
      ;;[array_obj_ref_125_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_125_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_125_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_125_sample_start_ <-& (array_obj_ref_125_word_address_calculated)
      array_obj_ref_125_sample_start_ &-> (array_obj_ref_125_Sample)
      array_obj_ref_125_sample_completed_ <-& (array_obj_ref_125_Sample)
      array_obj_ref_125_sample_completed_ &-> ($null)
      array_obj_ref_125_update_start_ &-> (array_obj_ref_125_Update)
      array_obj_ref_125_update_completed_ <-& (array_obj_ref_125_Update)
      // (down == 1 )
      // down
      // ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) 
      // ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 ))
      // (obuf_semaphore[input_port][output_port] < 1 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_137_sample_start_] 
      $T[array_obj_ref_137_sample_completed_] 
      $T[array_obj_ref_137_update_start_] 
      $T[array_obj_ref_137_update_completed_] 
      $T[array_obj_ref_137_word_address_calculated] 
      $T[array_obj_ref_137_root_address_calculated] 
      $T[array_obj_ref_137_offset_calculated] 
      $T[array_obj_ref_137_index_resized_0] 
      $T[array_obj_ref_137_index_scaled_0] 
      $T[array_obj_ref_137_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_137_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_137_index_computed_0
      ;;[array_obj_ref_137_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_137_index_computed_0 &-> (array_obj_ref_137_index_resize_0)
      array_obj_ref_137_index_resized_0 <-& (array_obj_ref_137_index_resize_0)
      $T[array_obj_ref_137_index_scale_0_sample_start] 
      $T[array_obj_ref_137_index_scale_0_sample_complete] 
      $T[array_obj_ref_137_index_scale_0_update_start] 
      $T[array_obj_ref_137_index_scale_0_update_complete] 
      ;;[array_obj_ref_137_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_137_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_137_index_resized_0 &-> (array_obj_ref_137_index_scale_0_sample_start)
      array_obj_ref_137_index_scale_0_sample_start &-> (array_obj_ref_137_index_scale_0_Sample)
      array_obj_ref_137_index_scale_0_sample_complete <-& (array_obj_ref_137_index_scale_0_Sample)
      array_obj_ref_137_index_scale_0_update_start &-> (array_obj_ref_137_index_scale_0_Update)
      array_obj_ref_137_index_scale_0_update_complete <-& (array_obj_ref_137_index_scale_0_Update)
      array_obj_ref_137_index_scaled_0 <-& (array_obj_ref_137_index_scale_0_update_complete)
      $T[array_obj_ref_137_index_resized_1] 
      $T[array_obj_ref_137_index_scaled_1] 
      $T[array_obj_ref_137_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_137_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_137_index_computed_1
      ;;[array_obj_ref_137_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_137_index_computed_1 &-> (array_obj_ref_137_index_resize_1)
      array_obj_ref_137_index_resized_1 <-& (array_obj_ref_137_index_resize_1)
      ;;[array_obj_ref_137_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_137_index_resized_1 &-> (array_obj_ref_137_index_scale_1)
      array_obj_ref_137_index_scaled_1 <-& (array_obj_ref_137_index_scale_1)
      $T[array_obj_ref_137_partial_sum_1_sample_start] 
      $T[array_obj_ref_137_partial_sum_1_sample_complete] 
      $T[array_obj_ref_137_partial_sum_1_update_start] 
      $T[array_obj_ref_137_partial_sum_1_update_complete] 
      ;;[array_obj_ref_137_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_137_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_137_partial_sum_1_sample_start &-> (array_obj_ref_137_partial_sum_1_Sample)
      array_obj_ref_137_partial_sum_1_sample_complete <-& (array_obj_ref_137_partial_sum_1_Sample)
      array_obj_ref_137_partial_sum_1_update_start &-> (array_obj_ref_137_partial_sum_1_Update)
      array_obj_ref_137_partial_sum_1_update_complete <-& (array_obj_ref_137_partial_sum_1_Update)
      array_obj_ref_137_partial_sum_1_sample_start <-& (array_obj_ref_137_index_scaled_0)
      array_obj_ref_137_partial_sum_1_sample_start <-& (array_obj_ref_137_index_scaled_1)
      array_obj_ref_137_offset_calculated <-& (array_obj_ref_137_partial_sum_1_update_complete)
      ;;[array_obj_ref_137_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_137_partial_sum_1_update_complete &-> (array_obj_ref_137_final_index_sum_regn)
      array_obj_ref_137_offset_calculated <-& (array_obj_ref_137_final_index_sum_regn)
      ;;[array_obj_ref_137_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_137_offset_calculated &-> (array_obj_ref_137_base_plus_offset)
      array_obj_ref_137_root_address_calculated <-& (array_obj_ref_137_base_plus_offset)
      ;;[array_obj_ref_137_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_137_root_address_calculated &-> (array_obj_ref_137_word_addrgen)
      array_obj_ref_137_word_address_calculated <-& (array_obj_ref_137_word_addrgen)
      ;;[array_obj_ref_137_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_137_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_137_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_137_sample_start_ <-& (array_obj_ref_137_word_address_calculated)
      array_obj_ref_137_sample_start_ &-> (array_obj_ref_137_Sample)
      array_obj_ref_137_sample_completed_ <-& (array_obj_ref_137_Sample)
      array_obj_ref_137_sample_completed_ &-> ($null)
      array_obj_ref_137_update_start_ &-> (array_obj_ref_137_Update)
      array_obj_ref_137_update_completed_ <-& (array_obj_ref_137_Update)
      // (up == 1 )
      // up
      // (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )
      // ( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  ) 
      // ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 ))
      // (obuf_semaphore[input_port][output_port] == 128 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_150_sample_start_] 
      $T[array_obj_ref_150_sample_completed_] 
      $T[array_obj_ref_150_update_start_] 
      $T[array_obj_ref_150_update_completed_] 
      $T[array_obj_ref_150_word_address_calculated] 
      $T[array_obj_ref_150_root_address_calculated] 
      $T[array_obj_ref_150_offset_calculated] 
      $T[array_obj_ref_150_index_resized_0] 
      $T[array_obj_ref_150_index_scaled_0] 
      $T[array_obj_ref_150_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_150_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_150_index_computed_0
      ;;[array_obj_ref_150_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_150_index_computed_0 &-> (array_obj_ref_150_index_resize_0)
      array_obj_ref_150_index_resized_0 <-& (array_obj_ref_150_index_resize_0)
      $T[array_obj_ref_150_index_scale_0_sample_start] 
      $T[array_obj_ref_150_index_scale_0_sample_complete] 
      $T[array_obj_ref_150_index_scale_0_update_start] 
      $T[array_obj_ref_150_index_scale_0_update_complete] 
      ;;[array_obj_ref_150_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_150_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_150_index_resized_0 &-> (array_obj_ref_150_index_scale_0_sample_start)
      array_obj_ref_150_index_scale_0_sample_start &-> (array_obj_ref_150_index_scale_0_Sample)
      array_obj_ref_150_index_scale_0_sample_complete <-& (array_obj_ref_150_index_scale_0_Sample)
      array_obj_ref_150_index_scale_0_update_start &-> (array_obj_ref_150_index_scale_0_Update)
      array_obj_ref_150_index_scale_0_update_complete <-& (array_obj_ref_150_index_scale_0_Update)
      array_obj_ref_150_index_scaled_0 <-& (array_obj_ref_150_index_scale_0_update_complete)
      $T[array_obj_ref_150_index_resized_1] 
      $T[array_obj_ref_150_index_scaled_1] 
      $T[array_obj_ref_150_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_150_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_150_index_computed_1
      ;;[array_obj_ref_150_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_150_index_computed_1 &-> (array_obj_ref_150_index_resize_1)
      array_obj_ref_150_index_resized_1 <-& (array_obj_ref_150_index_resize_1)
      ;;[array_obj_ref_150_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_150_index_resized_1 &-> (array_obj_ref_150_index_scale_1)
      array_obj_ref_150_index_scaled_1 <-& (array_obj_ref_150_index_scale_1)
      $T[array_obj_ref_150_partial_sum_1_sample_start] 
      $T[array_obj_ref_150_partial_sum_1_sample_complete] 
      $T[array_obj_ref_150_partial_sum_1_update_start] 
      $T[array_obj_ref_150_partial_sum_1_update_complete] 
      ;;[array_obj_ref_150_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_150_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_150_partial_sum_1_sample_start &-> (array_obj_ref_150_partial_sum_1_Sample)
      array_obj_ref_150_partial_sum_1_sample_complete <-& (array_obj_ref_150_partial_sum_1_Sample)
      array_obj_ref_150_partial_sum_1_update_start &-> (array_obj_ref_150_partial_sum_1_Update)
      array_obj_ref_150_partial_sum_1_update_complete <-& (array_obj_ref_150_partial_sum_1_Update)
      array_obj_ref_150_partial_sum_1_sample_start <-& (array_obj_ref_150_index_scaled_0)
      array_obj_ref_150_partial_sum_1_sample_start <-& (array_obj_ref_150_index_scaled_1)
      array_obj_ref_150_offset_calculated <-& (array_obj_ref_150_partial_sum_1_update_complete)
      ;;[array_obj_ref_150_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_150_partial_sum_1_update_complete &-> (array_obj_ref_150_final_index_sum_regn)
      array_obj_ref_150_offset_calculated <-& (array_obj_ref_150_final_index_sum_regn)
      ;;[array_obj_ref_150_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_150_offset_calculated &-> (array_obj_ref_150_base_plus_offset)
      array_obj_ref_150_root_address_calculated <-& (array_obj_ref_150_base_plus_offset)
      ;;[array_obj_ref_150_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_150_root_address_calculated &-> (array_obj_ref_150_word_addrgen)
      array_obj_ref_150_word_address_calculated <-& (array_obj_ref_150_word_addrgen)
      ;;[array_obj_ref_150_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_150_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_150_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_150_sample_start_ <-& (array_obj_ref_150_word_address_calculated)
      array_obj_ref_150_sample_start_ &-> (array_obj_ref_150_Sample)
      array_obj_ref_150_sample_completed_ <-& (array_obj_ref_150_Sample)
      array_obj_ref_150_sample_completed_ &-> ($null)
      array_obj_ref_150_update_start_ &-> (array_obj_ref_150_Update)
      array_obj_ref_150_update_completed_ <-& (array_obj_ref_150_Update)
      // (up == 1 )
      // up
      // ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) 
      // ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 ))
      // (obuf_semaphore[input_port][output_port] == 0 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_162_sample_start_] 
      $T[array_obj_ref_162_sample_completed_] 
      $T[array_obj_ref_162_update_start_] 
      $T[array_obj_ref_162_update_completed_] 
      $T[array_obj_ref_162_word_address_calculated] 
      $T[array_obj_ref_162_root_address_calculated] 
      $T[array_obj_ref_162_offset_calculated] 
      $T[array_obj_ref_162_index_resized_0] 
      $T[array_obj_ref_162_index_scaled_0] 
      $T[array_obj_ref_162_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_162_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_162_index_computed_0
      ;;[array_obj_ref_162_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_162_index_computed_0 &-> (array_obj_ref_162_index_resize_0)
      array_obj_ref_162_index_resized_0 <-& (array_obj_ref_162_index_resize_0)
      $T[array_obj_ref_162_index_scale_0_sample_start] 
      $T[array_obj_ref_162_index_scale_0_sample_complete] 
      $T[array_obj_ref_162_index_scale_0_update_start] 
      $T[array_obj_ref_162_index_scale_0_update_complete] 
      ;;[array_obj_ref_162_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_162_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_162_index_resized_0 &-> (array_obj_ref_162_index_scale_0_sample_start)
      array_obj_ref_162_index_scale_0_sample_start &-> (array_obj_ref_162_index_scale_0_Sample)
      array_obj_ref_162_index_scale_0_sample_complete <-& (array_obj_ref_162_index_scale_0_Sample)
      array_obj_ref_162_index_scale_0_update_start &-> (array_obj_ref_162_index_scale_0_Update)
      array_obj_ref_162_index_scale_0_update_complete <-& (array_obj_ref_162_index_scale_0_Update)
      array_obj_ref_162_index_scaled_0 <-& (array_obj_ref_162_index_scale_0_update_complete)
      $T[array_obj_ref_162_index_resized_1] 
      $T[array_obj_ref_162_index_scaled_1] 
      $T[array_obj_ref_162_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_162_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_162_index_computed_1
      ;;[array_obj_ref_162_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_162_index_computed_1 &-> (array_obj_ref_162_index_resize_1)
      array_obj_ref_162_index_resized_1 <-& (array_obj_ref_162_index_resize_1)
      ;;[array_obj_ref_162_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_162_index_resized_1 &-> (array_obj_ref_162_index_scale_1)
      array_obj_ref_162_index_scaled_1 <-& (array_obj_ref_162_index_scale_1)
      $T[array_obj_ref_162_partial_sum_1_sample_start] 
      $T[array_obj_ref_162_partial_sum_1_sample_complete] 
      $T[array_obj_ref_162_partial_sum_1_update_start] 
      $T[array_obj_ref_162_partial_sum_1_update_complete] 
      ;;[array_obj_ref_162_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_162_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_162_partial_sum_1_sample_start &-> (array_obj_ref_162_partial_sum_1_Sample)
      array_obj_ref_162_partial_sum_1_sample_complete <-& (array_obj_ref_162_partial_sum_1_Sample)
      array_obj_ref_162_partial_sum_1_update_start &-> (array_obj_ref_162_partial_sum_1_Update)
      array_obj_ref_162_partial_sum_1_update_complete <-& (array_obj_ref_162_partial_sum_1_Update)
      array_obj_ref_162_partial_sum_1_sample_start <-& (array_obj_ref_162_index_scaled_0)
      array_obj_ref_162_partial_sum_1_sample_start <-& (array_obj_ref_162_index_scaled_1)
      array_obj_ref_162_offset_calculated <-& (array_obj_ref_162_partial_sum_1_update_complete)
      ;;[array_obj_ref_162_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_162_partial_sum_1_update_complete &-> (array_obj_ref_162_final_index_sum_regn)
      array_obj_ref_162_offset_calculated <-& (array_obj_ref_162_final_index_sum_regn)
      ;;[array_obj_ref_162_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_162_offset_calculated &-> (array_obj_ref_162_base_plus_offset)
      array_obj_ref_162_root_address_calculated <-& (array_obj_ref_162_base_plus_offset)
      ;;[array_obj_ref_162_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_162_root_address_calculated &-> (array_obj_ref_162_word_addrgen)
      array_obj_ref_162_word_address_calculated <-& (array_obj_ref_162_word_addrgen)
      ;;[array_obj_ref_162_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_162_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_162_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_162_sample_start_ <-& (array_obj_ref_162_word_address_calculated)
      array_obj_ref_162_sample_start_ &-> (array_obj_ref_162_Sample)
      array_obj_ref_162_sample_completed_ <-& (array_obj_ref_162_Sample)
      array_obj_ref_162_sample_completed_ &-> ($null)
      array_obj_ref_162_update_start_ &-> (array_obj_ref_162_Update)
      array_obj_ref_162_update_completed_ <-& (array_obj_ref_162_Update)
      // (down == 1 )
      // down
      // Target expression
      // (as target) continue
      // continue
      // write to interface object
      // start: WAR dependencies for continue
      // ignored out-of-scope w_root  up : $uint<1> 
      // done: WAR dependencies for continue
      // continue
      // write to interface object
      // end:  	$volatile continue := ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )) $buffering 1
      // start:  	obuf_semaphore[input_port][output_port] := ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) $buffering 1// bits of buffering = 2. 
      //  file .Aa/switch2x2.opt.aa, line 104
      // Source expression
      // ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) )
      $T[OR_u2_u2_210_sample_start_] 
      $T[OR_u2_u2_210_sample_completed_] 
      $T[OR_u2_u2_210_update_start_] 
      $T[OR_u2_u2_210_update_completed_] 
      // (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) )
      // ( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  ) 
      // (continue & (down == 1 ))
      // continue
      // (down == 1 )
      // down
      // (obuf_semaphore[input_port][output_port] - 1 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_185_sample_start_] 
      $T[array_obj_ref_185_sample_completed_] 
      $T[array_obj_ref_185_update_start_] 
      $T[array_obj_ref_185_update_completed_] 
      $T[array_obj_ref_185_word_address_calculated] 
      $T[array_obj_ref_185_root_address_calculated] 
      $T[array_obj_ref_185_offset_calculated] 
      $T[array_obj_ref_185_index_resized_0] 
      $T[array_obj_ref_185_index_scaled_0] 
      $T[array_obj_ref_185_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_185_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_185_index_computed_0
      ;;[array_obj_ref_185_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_185_index_computed_0 &-> (array_obj_ref_185_index_resize_0)
      array_obj_ref_185_index_resized_0 <-& (array_obj_ref_185_index_resize_0)
      $T[array_obj_ref_185_index_scale_0_sample_start] 
      $T[array_obj_ref_185_index_scale_0_sample_complete] 
      $T[array_obj_ref_185_index_scale_0_update_start] 
      $T[array_obj_ref_185_index_scale_0_update_complete] 
      ;;[array_obj_ref_185_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_185_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_185_index_resized_0 &-> (array_obj_ref_185_index_scale_0_sample_start)
      array_obj_ref_185_index_scale_0_sample_start &-> (array_obj_ref_185_index_scale_0_Sample)
      array_obj_ref_185_index_scale_0_sample_complete <-& (array_obj_ref_185_index_scale_0_Sample)
      array_obj_ref_185_index_scale_0_update_start &-> (array_obj_ref_185_index_scale_0_Update)
      array_obj_ref_185_index_scale_0_update_complete <-& (array_obj_ref_185_index_scale_0_Update)
      array_obj_ref_185_index_scaled_0 <-& (array_obj_ref_185_index_scale_0_update_complete)
      $T[array_obj_ref_185_index_resized_1] 
      $T[array_obj_ref_185_index_scaled_1] 
      $T[array_obj_ref_185_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_185_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_185_index_computed_1
      ;;[array_obj_ref_185_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_185_index_computed_1 &-> (array_obj_ref_185_index_resize_1)
      array_obj_ref_185_index_resized_1 <-& (array_obj_ref_185_index_resize_1)
      ;;[array_obj_ref_185_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_185_index_resized_1 &-> (array_obj_ref_185_index_scale_1)
      array_obj_ref_185_index_scaled_1 <-& (array_obj_ref_185_index_scale_1)
      $T[array_obj_ref_185_partial_sum_1_sample_start] 
      $T[array_obj_ref_185_partial_sum_1_sample_complete] 
      $T[array_obj_ref_185_partial_sum_1_update_start] 
      $T[array_obj_ref_185_partial_sum_1_update_complete] 
      ;;[array_obj_ref_185_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_185_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_185_partial_sum_1_sample_start &-> (array_obj_ref_185_partial_sum_1_Sample)
      array_obj_ref_185_partial_sum_1_sample_complete <-& (array_obj_ref_185_partial_sum_1_Sample)
      array_obj_ref_185_partial_sum_1_update_start &-> (array_obj_ref_185_partial_sum_1_Update)
      array_obj_ref_185_partial_sum_1_update_complete <-& (array_obj_ref_185_partial_sum_1_Update)
      array_obj_ref_185_partial_sum_1_sample_start <-& (array_obj_ref_185_index_scaled_0)
      array_obj_ref_185_partial_sum_1_sample_start <-& (array_obj_ref_185_index_scaled_1)
      array_obj_ref_185_offset_calculated <-& (array_obj_ref_185_partial_sum_1_update_complete)
      ;;[array_obj_ref_185_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_185_partial_sum_1_update_complete &-> (array_obj_ref_185_final_index_sum_regn)
      array_obj_ref_185_offset_calculated <-& (array_obj_ref_185_final_index_sum_regn)
      ;;[array_obj_ref_185_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_185_offset_calculated &-> (array_obj_ref_185_base_plus_offset)
      array_obj_ref_185_root_address_calculated <-& (array_obj_ref_185_base_plus_offset)
      ;;[array_obj_ref_185_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_185_root_address_calculated &-> (array_obj_ref_185_word_addrgen)
      array_obj_ref_185_word_address_calculated <-& (array_obj_ref_185_word_addrgen)
      ;;[array_obj_ref_185_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_185_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_185_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_185_sample_start_ <-& (array_obj_ref_185_word_address_calculated)
      array_obj_ref_185_sample_start_ &-> (array_obj_ref_185_Sample)
      array_obj_ref_185_sample_completed_ <-& (array_obj_ref_185_Sample)
      array_obj_ref_185_sample_completed_ &-> ($null)
      array_obj_ref_185_update_start_ &-> (array_obj_ref_185_Update)
      array_obj_ref_185_update_completed_ <-& (array_obj_ref_185_Update)
      // ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) 
      // (continue & (up == 1 ))
      // continue
      // (up == 1 )
      // up
      // (obuf_semaphore[input_port][output_port] + 1 )
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_197_sample_start_] 
      $T[array_obj_ref_197_sample_completed_] 
      $T[array_obj_ref_197_update_start_] 
      $T[array_obj_ref_197_update_completed_] 
      $T[array_obj_ref_197_word_address_calculated] 
      $T[array_obj_ref_197_root_address_calculated] 
      $T[array_obj_ref_197_offset_calculated] 
      $T[array_obj_ref_197_index_resized_0] 
      $T[array_obj_ref_197_index_scaled_0] 
      $T[array_obj_ref_197_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_197_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_197_index_computed_0
      ;;[array_obj_ref_197_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_197_index_computed_0 &-> (array_obj_ref_197_index_resize_0)
      array_obj_ref_197_index_resized_0 <-& (array_obj_ref_197_index_resize_0)
      $T[array_obj_ref_197_index_scale_0_sample_start] 
      $T[array_obj_ref_197_index_scale_0_sample_complete] 
      $T[array_obj_ref_197_index_scale_0_update_start] 
      $T[array_obj_ref_197_index_scale_0_update_complete] 
      ;;[array_obj_ref_197_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_197_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_197_index_resized_0 &-> (array_obj_ref_197_index_scale_0_sample_start)
      array_obj_ref_197_index_scale_0_sample_start &-> (array_obj_ref_197_index_scale_0_Sample)
      array_obj_ref_197_index_scale_0_sample_complete <-& (array_obj_ref_197_index_scale_0_Sample)
      array_obj_ref_197_index_scale_0_update_start &-> (array_obj_ref_197_index_scale_0_Update)
      array_obj_ref_197_index_scale_0_update_complete <-& (array_obj_ref_197_index_scale_0_Update)
      array_obj_ref_197_index_scaled_0 <-& (array_obj_ref_197_index_scale_0_update_complete)
      $T[array_obj_ref_197_index_resized_1] 
      $T[array_obj_ref_197_index_scaled_1] 
      $T[array_obj_ref_197_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_197_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_197_index_computed_1
      ;;[array_obj_ref_197_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_197_index_computed_1 &-> (array_obj_ref_197_index_resize_1)
      array_obj_ref_197_index_resized_1 <-& (array_obj_ref_197_index_resize_1)
      ;;[array_obj_ref_197_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_197_index_resized_1 &-> (array_obj_ref_197_index_scale_1)
      array_obj_ref_197_index_scaled_1 <-& (array_obj_ref_197_index_scale_1)
      $T[array_obj_ref_197_partial_sum_1_sample_start] 
      $T[array_obj_ref_197_partial_sum_1_sample_complete] 
      $T[array_obj_ref_197_partial_sum_1_update_start] 
      $T[array_obj_ref_197_partial_sum_1_update_complete] 
      ;;[array_obj_ref_197_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_197_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_197_partial_sum_1_sample_start &-> (array_obj_ref_197_partial_sum_1_Sample)
      array_obj_ref_197_partial_sum_1_sample_complete <-& (array_obj_ref_197_partial_sum_1_Sample)
      array_obj_ref_197_partial_sum_1_update_start &-> (array_obj_ref_197_partial_sum_1_Update)
      array_obj_ref_197_partial_sum_1_update_complete <-& (array_obj_ref_197_partial_sum_1_Update)
      array_obj_ref_197_partial_sum_1_sample_start <-& (array_obj_ref_197_index_scaled_0)
      array_obj_ref_197_partial_sum_1_sample_start <-& (array_obj_ref_197_index_scaled_1)
      array_obj_ref_197_offset_calculated <-& (array_obj_ref_197_partial_sum_1_update_complete)
      ;;[array_obj_ref_197_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_197_partial_sum_1_update_complete &-> (array_obj_ref_197_final_index_sum_regn)
      array_obj_ref_197_offset_calculated <-& (array_obj_ref_197_final_index_sum_regn)
      ;;[array_obj_ref_197_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_197_offset_calculated &-> (array_obj_ref_197_base_plus_offset)
      array_obj_ref_197_root_address_calculated <-& (array_obj_ref_197_base_plus_offset)
      ;;[array_obj_ref_197_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_197_root_address_calculated &-> (array_obj_ref_197_word_addrgen)
      array_obj_ref_197_word_address_calculated <-& (array_obj_ref_197_word_addrgen)
      ;;[array_obj_ref_197_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_197_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_197_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_197_sample_start_ <-& (array_obj_ref_197_word_address_calculated)
      array_obj_ref_197_sample_start_ &-> (array_obj_ref_197_Sample)
      array_obj_ref_197_sample_completed_ <-& (array_obj_ref_197_Sample)
      array_obj_ref_197_sample_completed_ &-> ($null)
      array_obj_ref_197_update_start_ &-> (array_obj_ref_197_Update)
      array_obj_ref_197_update_completed_ <-& (array_obj_ref_197_Update)
      // ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) 
      // ( ~ continue )
      // continue
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_207_sample_start_] 
      $T[array_obj_ref_207_sample_completed_] 
      $T[array_obj_ref_207_update_start_] 
      $T[array_obj_ref_207_update_completed_] 
      $T[array_obj_ref_207_word_address_calculated] 
      $T[array_obj_ref_207_root_address_calculated] 
      $T[array_obj_ref_207_offset_calculated] 
      $T[array_obj_ref_207_index_resized_0] 
      $T[array_obj_ref_207_index_scaled_0] 
      $T[array_obj_ref_207_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_207_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_207_index_computed_0
      ;;[array_obj_ref_207_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_207_index_computed_0 &-> (array_obj_ref_207_index_resize_0)
      array_obj_ref_207_index_resized_0 <-& (array_obj_ref_207_index_resize_0)
      $T[array_obj_ref_207_index_scale_0_sample_start] 
      $T[array_obj_ref_207_index_scale_0_sample_complete] 
      $T[array_obj_ref_207_index_scale_0_update_start] 
      $T[array_obj_ref_207_index_scale_0_update_complete] 
      ;;[array_obj_ref_207_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_207_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_207_index_resized_0 &-> (array_obj_ref_207_index_scale_0_sample_start)
      array_obj_ref_207_index_scale_0_sample_start &-> (array_obj_ref_207_index_scale_0_Sample)
      array_obj_ref_207_index_scale_0_sample_complete <-& (array_obj_ref_207_index_scale_0_Sample)
      array_obj_ref_207_index_scale_0_update_start &-> (array_obj_ref_207_index_scale_0_Update)
      array_obj_ref_207_index_scale_0_update_complete <-& (array_obj_ref_207_index_scale_0_Update)
      array_obj_ref_207_index_scaled_0 <-& (array_obj_ref_207_index_scale_0_update_complete)
      $T[array_obj_ref_207_index_resized_1] 
      $T[array_obj_ref_207_index_scaled_1] 
      $T[array_obj_ref_207_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_207_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_207_index_computed_1
      ;;[array_obj_ref_207_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_207_index_computed_1 &-> (array_obj_ref_207_index_resize_1)
      array_obj_ref_207_index_resized_1 <-& (array_obj_ref_207_index_resize_1)
      ;;[array_obj_ref_207_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_207_index_resized_1 &-> (array_obj_ref_207_index_scale_1)
      array_obj_ref_207_index_scaled_1 <-& (array_obj_ref_207_index_scale_1)
      $T[array_obj_ref_207_partial_sum_1_sample_start] 
      $T[array_obj_ref_207_partial_sum_1_sample_complete] 
      $T[array_obj_ref_207_partial_sum_1_update_start] 
      $T[array_obj_ref_207_partial_sum_1_update_complete] 
      ;;[array_obj_ref_207_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_207_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_207_partial_sum_1_sample_start &-> (array_obj_ref_207_partial_sum_1_Sample)
      array_obj_ref_207_partial_sum_1_sample_complete <-& (array_obj_ref_207_partial_sum_1_Sample)
      array_obj_ref_207_partial_sum_1_update_start &-> (array_obj_ref_207_partial_sum_1_Update)
      array_obj_ref_207_partial_sum_1_update_complete <-& (array_obj_ref_207_partial_sum_1_Update)
      array_obj_ref_207_partial_sum_1_sample_start <-& (array_obj_ref_207_index_scaled_0)
      array_obj_ref_207_partial_sum_1_sample_start <-& (array_obj_ref_207_index_scaled_1)
      array_obj_ref_207_offset_calculated <-& (array_obj_ref_207_partial_sum_1_update_complete)
      ;;[array_obj_ref_207_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_207_partial_sum_1_update_complete &-> (array_obj_ref_207_final_index_sum_regn)
      array_obj_ref_207_offset_calculated <-& (array_obj_ref_207_final_index_sum_regn)
      ;;[array_obj_ref_207_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_207_offset_calculated &-> (array_obj_ref_207_base_plus_offset)
      array_obj_ref_207_root_address_calculated <-& (array_obj_ref_207_base_plus_offset)
      ;;[array_obj_ref_207_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_207_root_address_calculated &-> (array_obj_ref_207_word_addrgen)
      array_obj_ref_207_word_address_calculated <-& (array_obj_ref_207_word_addrgen)
      ;;[array_obj_ref_207_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_207_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_207_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_207_sample_start_ <-& (array_obj_ref_207_word_address_calculated)
      array_obj_ref_207_sample_start_ &-> (array_obj_ref_207_Sample)
      array_obj_ref_207_sample_completed_ <-& (array_obj_ref_207_Sample)
      array_obj_ref_207_sample_completed_ &-> ($null)
      array_obj_ref_207_update_start_ &-> (array_obj_ref_207_Update)
      array_obj_ref_207_update_completed_ <-& (array_obj_ref_207_Update)
      // start: Forward dependencies from (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) to transition OR_u2_u2_210_sample_start_
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_125_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_137_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_150_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_162_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_185_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_197_update_completed_)
      // done: Forward dependencies from (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) to transition OR_u2_u2_210_sample_start_
      // start: Forward dependencies from ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  )  to transition OR_u2_u2_210_sample_start_
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_125_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_137_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_150_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_162_update_completed_)
      OR_u2_u2_210_sample_start_ <-& (array_obj_ref_207_update_completed_)
      // done: Forward dependencies from ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  )  to transition OR_u2_u2_210_sample_start_
      ;;[OR_u2_u2_210_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u2_u2_210_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u2_u2_210_sample_start_ &-> (OR_u2_u2_210_Sample)
      OR_u2_u2_210_sample_completed_ <-& (OR_u2_u2_210_Sample)
      OR_u2_u2_210_sample_completed_ &-> ($null)
      OR_u2_u2_210_update_start_ &-> (OR_u2_u2_210_Update)
      OR_u2_u2_210_update_completed_ <-& (OR_u2_u2_210_Update)
      // Target expression
      // obuf_semaphore[input_port][output_port]
      $T[array_obj_ref_177_sample_start_] 
      $T[array_obj_ref_177_sample_completed_] 
      $T[array_obj_ref_177_update_start_] 
      $T[array_obj_ref_177_update_completed_] 
      $T[array_obj_ref_177_word_address_calculated] 
      $T[array_obj_ref_177_root_address_calculated] 
      $T[array_obj_ref_177_offset_calculated] 
      $T[array_obj_ref_177_index_resized_0] 
      $T[array_obj_ref_177_index_scaled_0] 
      $T[array_obj_ref_177_index_computed_0] 
      // input_port
      // start: Forward dependencies from input_port to transition array_obj_ref_177_index_computed_0
      // done: Forward dependencies from input_port to transition array_obj_ref_177_index_computed_0
      ;;[array_obj_ref_177_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_177_index_computed_0 &-> (array_obj_ref_177_index_resize_0)
      array_obj_ref_177_index_resized_0 <-& (array_obj_ref_177_index_resize_0)
      $T[array_obj_ref_177_index_scale_0_sample_start] 
      $T[array_obj_ref_177_index_scale_0_sample_complete] 
      $T[array_obj_ref_177_index_scale_0_update_start] 
      $T[array_obj_ref_177_index_scale_0_update_complete] 
      ;;[array_obj_ref_177_index_scale_0_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_177_index_scale_0_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_177_index_resized_0 &-> (array_obj_ref_177_index_scale_0_sample_start)
      array_obj_ref_177_index_scale_0_sample_start &-> (array_obj_ref_177_index_scale_0_Sample)
      array_obj_ref_177_index_scale_0_sample_complete <-& (array_obj_ref_177_index_scale_0_Sample)
      array_obj_ref_177_index_scale_0_update_start &-> (array_obj_ref_177_index_scale_0_Update)
      array_obj_ref_177_index_scale_0_update_complete <-& (array_obj_ref_177_index_scale_0_Update)
      array_obj_ref_177_index_scaled_0 <-& (array_obj_ref_177_index_scale_0_update_complete)
      $T[array_obj_ref_177_index_resized_1] 
      $T[array_obj_ref_177_index_scaled_1] 
      $T[array_obj_ref_177_index_computed_1] 
      // output_port
      // start: Forward dependencies from output_port to transition array_obj_ref_177_index_computed_1
      // done: Forward dependencies from output_port to transition array_obj_ref_177_index_computed_1
      ;;[array_obj_ref_177_index_resize_1] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_177_index_computed_1 &-> (array_obj_ref_177_index_resize_1)
      array_obj_ref_177_index_resized_1 <-& (array_obj_ref_177_index_resize_1)
      ;;[array_obj_ref_177_index_scale_1] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_177_index_resized_1 &-> (array_obj_ref_177_index_scale_1)
      array_obj_ref_177_index_scaled_1 <-& (array_obj_ref_177_index_scale_1)
      $T[array_obj_ref_177_partial_sum_1_sample_start] 
      $T[array_obj_ref_177_partial_sum_1_sample_complete] 
      $T[array_obj_ref_177_partial_sum_1_update_start] 
      $T[array_obj_ref_177_partial_sum_1_update_complete] 
      ;;[array_obj_ref_177_partial_sum_1_Sample] 
      {
        $T [rr] $T [ra] 
      }
      ;;[array_obj_ref_177_partial_sum_1_Update] 
      {
        $T [cr] $T [ca] 
      }
      array_obj_ref_177_partial_sum_1_sample_start &-> (array_obj_ref_177_partial_sum_1_Sample)
      array_obj_ref_177_partial_sum_1_sample_complete <-& (array_obj_ref_177_partial_sum_1_Sample)
      array_obj_ref_177_partial_sum_1_update_start &-> (array_obj_ref_177_partial_sum_1_Update)
      array_obj_ref_177_partial_sum_1_update_complete <-& (array_obj_ref_177_partial_sum_1_Update)
      array_obj_ref_177_partial_sum_1_sample_start <-& (array_obj_ref_177_index_scaled_0)
      array_obj_ref_177_partial_sum_1_sample_start <-& (array_obj_ref_177_index_scaled_1)
      array_obj_ref_177_offset_calculated <-& (array_obj_ref_177_partial_sum_1_update_complete)
      ;;[array_obj_ref_177_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_177_partial_sum_1_update_complete &-> (array_obj_ref_177_final_index_sum_regn)
      array_obj_ref_177_offset_calculated <-& (array_obj_ref_177_final_index_sum_regn)
      ;;[array_obj_ref_177_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_177_offset_calculated &-> (array_obj_ref_177_base_plus_offset)
      array_obj_ref_177_root_address_calculated <-& (array_obj_ref_177_base_plus_offset)
      ;;[array_obj_ref_177_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_177_root_address_calculated &-> (array_obj_ref_177_word_addrgen)
      array_obj_ref_177_word_address_calculated <-& (array_obj_ref_177_word_addrgen)
      ;;[array_obj_ref_177_Sample] 
      {
        ;;[array_obj_ref_177_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_177_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_177_word_address_calculated)
      array_obj_ref_177_sample_start_ &-> (array_obj_ref_177_Sample)
      array_obj_ref_177_sample_completed_ <-& (array_obj_ref_177_Sample)
      array_obj_ref_177_sample_completed_ &-> ($null)
      array_obj_ref_177_update_start_ &-> (array_obj_ref_177_Update)
      array_obj_ref_177_update_completed_ <-& (array_obj_ref_177_Update)
      // start: Forward dependencies from ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) to transition array_obj_ref_177_sample_start_
      array_obj_ref_177_sample_start_ <-& (OR_u2_u2_210_update_completed_)
      // done: Forward dependencies from ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) to transition array_obj_ref_177_sample_start_
      // end:  	obuf_semaphore[input_port][output_port] := ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) $buffering 1// bits of buffering = 2. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_125 load
      //  array_obj_ref_137 load
      //  array_obj_ref_150 load
      //  array_obj_ref_162 load
      //  array_obj_ref_185 load
      //  array_obj_ref_197 load
      //  array_obj_ref_207 load
      //  array_obj_ref_177 store
      $T [array_obj_ref_125_array_obj_ref_177_delay] $delay
      // array_obj_ref_125(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_125_array_obj_ref_177_delay)
      array_obj_ref_125_array_obj_ref_177_delay <-& (array_obj_ref_125_sample_completed_)
      $T [array_obj_ref_137_array_obj_ref_177_delay] $delay
      // array_obj_ref_137(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_137_array_obj_ref_177_delay)
      array_obj_ref_137_array_obj_ref_177_delay <-& (array_obj_ref_137_sample_completed_)
      $T [array_obj_ref_150_array_obj_ref_177_delay] $delay
      // array_obj_ref_150(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_150_array_obj_ref_177_delay)
      array_obj_ref_150_array_obj_ref_177_delay <-& (array_obj_ref_150_sample_completed_)
      $T [array_obj_ref_162_array_obj_ref_177_delay] $delay
      // array_obj_ref_162(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_162_array_obj_ref_177_delay)
      array_obj_ref_162_array_obj_ref_177_delay <-& (array_obj_ref_162_sample_completed_)
      $T [array_obj_ref_185_array_obj_ref_177_delay] $delay
      // array_obj_ref_185(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_185_array_obj_ref_177_delay)
      array_obj_ref_185_array_obj_ref_177_delay <-& (array_obj_ref_185_sample_completed_)
      $T [array_obj_ref_197_array_obj_ref_177_delay] $delay
      // array_obj_ref_197(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_197_array_obj_ref_177_delay)
      array_obj_ref_197_array_obj_ref_177_delay <-& (array_obj_ref_197_sample_completed_)
      $T [array_obj_ref_207_array_obj_ref_177_delay] $delay
      // array_obj_ref_207(load) -> array_obj_ref_177(store)
      array_obj_ref_177_sample_start_ <-& (array_obj_ref_207_array_obj_ref_177_delay)
      array_obj_ref_207_array_obj_ref_177_delay <-& (array_obj_ref_207_sample_completed_)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %updateCounter
    //  file .Aa/switch2x2.opt.aa, line 97
    // ( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  ) 
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_125_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_125_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_125_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_125_word_offset_0] : $int<4> := _b0000// 0
    // 127 
    $constant $W[konst_126_wire_constant] : $int<2> := _b11// 127
    // 1 
    $constant $W[konst_129_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_132_wire_constant] : $int<1> := _b1// 1
    // _b0 
    $constant $W[konst_133_wire_constant] : $int<1> := _b0// 0
    // ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) 
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_137_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_137_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_137_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_137_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_138_wire_constant] : $int<2> := _b01// 1
    // 1 
    $constant $W[konst_141_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_144_wire_constant] : $int<1> := _b1// 1
    // _b0 
    $constant $W[konst_145_wire_constant] : $int<1> := _b0// 0
    // ( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  ) 
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_150_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_150_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_150_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_150_word_offset_0] : $int<4> := _b0000// 0
    // 128 
    $constant $W[konst_151_wire_constant] : $int<2> := _b00// 128
    // 1 
    $constant $W[konst_154_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_157_wire_constant] : $int<1> := _b0// 0
    // _b0 
    $constant $W[konst_158_wire_constant] : $int<1> := _b0// 0
    // ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) 
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_162_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_162_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_162_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_162_word_offset_0] : $int<4> := _b0000// 0
    // 0 
    $constant $W[konst_163_wire_constant] : $int<2> := _b00// 0
    // 1 
    $constant $W[konst_166_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_169_wire_constant] : $int<1> := _b0// 0
    // _b0 
    $constant $W[konst_170_wire_constant] : $int<1> := _b0// 0
    // ( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  ) 
    // 1 
    $constant $W[konst_180_wire_constant] : $int<1> := _b1// 1
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_185_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_185_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_185_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_185_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_186_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_188_wire_constant] : $int<2> := _b00// 0
    // ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) 
    // 1 
    $constant $W[konst_192_wire_constant] : $int<1> := _b1// 1
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_197_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_197_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_197_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_197_word_offset_0] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_198_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_200_wire_constant] : $int<2> := _b00// 0
    // ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) 
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_207_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_207_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_207_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_207_word_offset_0] : $int<4> := _b0000// 0
    // _b0 
    $constant $W[konst_208_wire_constant] : $int<2> := _b00// 0
    // obuf_semaphore[input_port][output_port]
    $constant $W[array_obj_ref_177_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_177_offset_scale_factor_0] : $int<4> := _b0100// 4
    $constant $W[array_obj_ref_177_offset_scale_factor_1] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_177_word_offset_0] : $int<4> := _b0000// 0
    // 	$volatile down := ( ~ up ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 102
    // down
    $W[down_121] : $int<1>
    // 	$volatile continue := ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 103
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_123_resized] : $int<4>
    $intermediate $W[R_input_port_123_scaled] : $int<4>
    $intermediate $W[R_output_port_124_resized] : $int<4>
    $intermediate $W[R_output_port_124_scaled] : $int<4>
    $intermediate $W[array_obj_ref_125_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_125_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_125_root_address] : $int<4>
    $W[array_obj_ref_125_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_125_data_0] : $int<2>
    $W[array_obj_ref_125_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] > 127 )
    $intermediate $W[UGT_u2_u1_127_wire] : $int<1>
    // (down == 1 )
    $intermediate $W[EQ_u1_u1_130_wire] : $int<1>
    // ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 ))
    $intermediate $W[AND_u1_u1_131_wire] : $int<1>
    // ( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  ) 
    $intermediate $W[MUX_134_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_135_resized] : $int<4>
    $intermediate $W[R_input_port_135_scaled] : $int<4>
    $intermediate $W[R_output_port_136_resized] : $int<4>
    $intermediate $W[R_output_port_136_scaled] : $int<4>
    $intermediate $W[array_obj_ref_137_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_137_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_137_root_address] : $int<4>
    $W[array_obj_ref_137_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_137_data_0] : $int<2>
    $W[array_obj_ref_137_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] < 1 )
    $intermediate $W[ULT_u2_u1_139_wire] : $int<1>
    // (up == 1 )
    $intermediate $W[EQ_u1_u1_142_wire] : $int<1>
    // ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 ))
    $intermediate $W[AND_u1_u1_143_wire] : $int<1>
    // ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) 
    $intermediate $W[MUX_146_wire] : $int<1>
    // (( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) )
    $intermediate $W[OR_u1_u1_147_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_148_resized] : $int<4>
    $intermediate $W[R_input_port_148_scaled] : $int<4>
    $intermediate $W[R_output_port_149_resized] : $int<4>
    $intermediate $W[R_output_port_149_scaled] : $int<4>
    $intermediate $W[array_obj_ref_150_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_150_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_150_root_address] : $int<4>
    $W[array_obj_ref_150_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_150_data_0] : $int<2>
    $W[array_obj_ref_150_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] == 128 )
    $intermediate $W[EQ_u2_u1_152_wire] : $int<1>
    // (up == 1 )
    $intermediate $W[EQ_u1_u1_155_wire] : $int<1>
    // ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 ))
    $intermediate $W[AND_u1_u1_156_wire] : $int<1>
    // ( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  ) 
    $intermediate $W[MUX_159_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_160_resized] : $int<4>
    $intermediate $W[R_input_port_160_scaled] : $int<4>
    $intermediate $W[R_output_port_161_resized] : $int<4>
    $intermediate $W[R_output_port_161_scaled] : $int<4>
    $intermediate $W[array_obj_ref_162_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_162_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_162_root_address] : $int<4>
    $W[array_obj_ref_162_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_162_data_0] : $int<2>
    $W[array_obj_ref_162_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] == 0 )
    $intermediate $W[EQ_u2_u1_164_wire] : $int<1>
    // (down == 1 )
    $intermediate $W[EQ_u1_u1_167_wire] : $int<1>
    // ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 ))
    $intermediate $W[AND_u1_u1_168_wire] : $int<1>
    // ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) 
    $intermediate $W[MUX_171_wire] : $int<1>
    // (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )
    $intermediate $W[OR_u1_u1_172_wire] : $int<1>
    // continue
    // 	obuf_semaphore[input_port][output_port] := ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) $buffering 1// bits of buffering = 2. 
    //  file .Aa/switch2x2.opt.aa, line 104
    // (down == 1 )
    $intermediate $W[EQ_u1_u1_181_wire] : $int<1>
    // (continue & (down == 1 ))
    $intermediate $W[AND_u1_u1_182_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_183_resized] : $int<4>
    $intermediate $W[R_input_port_183_scaled] : $int<4>
    $intermediate $W[R_output_port_184_resized] : $int<4>
    $intermediate $W[R_output_port_184_scaled] : $int<4>
    $intermediate $W[array_obj_ref_185_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_185_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_185_root_address] : $int<4>
    $W[array_obj_ref_185_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_185_data_0] : $int<2>
    $W[array_obj_ref_185_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] - 1 )
    $intermediate $W[SUB_u2_u2_187_wire] : $int<2>
    // ( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  ) 
    $intermediate $W[MUX_189_wire] : $int<2>
    // (up == 1 )
    $intermediate $W[EQ_u1_u1_193_wire] : $int<1>
    // (continue & (up == 1 ))
    $intermediate $W[AND_u1_u1_194_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_195_resized] : $int<4>
    $intermediate $W[R_input_port_195_scaled] : $int<4>
    $intermediate $W[R_output_port_196_resized] : $int<4>
    $intermediate $W[R_output_port_196_scaled] : $int<4>
    $intermediate $W[array_obj_ref_197_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_197_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_197_root_address] : $int<4>
    $W[array_obj_ref_197_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_197_data_0] : $int<2>
    $W[array_obj_ref_197_wire] : $int<2>
    // (obuf_semaphore[input_port][output_port] + 1 )
    $intermediate $W[ADD_u2_u2_199_wire] : $int<2>
    // ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) 
    $intermediate $W[MUX_201_wire] : $int<2>
    // (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) )
    $intermediate $W[OR_u2_u2_202_wire] : $int<2>
    // ( ~ continue )
    $intermediate $W[NOT_u1_u1_204_wire] : $int<1>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_205_resized] : $int<4>
    $intermediate $W[R_input_port_205_scaled] : $int<4>
    $intermediate $W[R_output_port_206_resized] : $int<4>
    $intermediate $W[R_output_port_206_scaled] : $int<4>
    $intermediate $W[array_obj_ref_207_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_207_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_207_root_address] : $int<4>
    $W[array_obj_ref_207_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_207_data_0] : $int<2>
    $W[array_obj_ref_207_wire] : $int<2>
    // ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) 
    $intermediate $W[MUX_209_wire] : $int<2>
    // ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) )
    $intermediate $W[OR_u2_u2_210_wire] : $int<2>
    // obuf_semaphore[input_port][output_port]
    $intermediate $W[R_input_port_175_resized] : $int<4>
    $intermediate $W[R_input_port_175_scaled] : $int<4>
    $intermediate $W[R_output_port_176_resized] : $int<4>
    $intermediate $W[R_output_port_176_scaled] : $int<4>
    $intermediate $W[array_obj_ref_177_index_partial_sum_1] : $int<4>
    $intermediate $W[array_obj_ref_177_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_177_root_address] : $int<4>
    $W[array_obj_ref_177_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_177_data_0] : $int<2>
    // 	$volatile down := ( ~ up ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 102
    // ( ~ up )
    ~ [NOT_u1_u1_120_inst] (up) (down_121)   $flowthrough
    $delay NOT_u1_u1_120_inst 0
    // 	$volatile continue := ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 103
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_125_index_0_resize] (input_port) (R_input_port_123_resized) 
    $flowthrough 
    *[array_obj_ref_125_index_0_scale] (R_input_port_123_resized array_obj_ref_125_offset_scale_factor_0) (R_input_port_123_scaled)   
    $delay array_obj_ref_125_index_0_scale 2
    &/ [array_obj_ref_125_index_1_resize] (output_port) (R_output_port_124_resized) 
    $flowthrough 
    &/ [array_obj_ref_125_index_1_rename] (R_output_port_124_resized) (R_output_port_124_scaled) 
    $flowthrough 
    +[array_obj_ref_125_index_sum_1] (R_output_port_124_scaled R_input_port_123_scaled) (array_obj_ref_125_index_partial_sum_1)   
    $delay array_obj_ref_125_index_sum_1 2
    &/ [array_obj_ref_125_index_offset] (array_obj_ref_125_index_partial_sum_1) (array_obj_ref_125_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_125_root_address_inst] (array_obj_ref_125_final_offset) (array_obj_ref_125_root_address) 
    $flowthrough 
    &/ [array_obj_ref_125_addr_0] (array_obj_ref_125_root_address) (array_obj_ref_125_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_125_load_0] $from memory_space_0 (array_obj_ref_125_word_address_0) (array_obj_ref_125_data_0) 
    $delay array_obj_ref_125_load_0 4
    &/ [array_obj_ref_125_gather_scatter] (array_obj_ref_125_data_0) (array_obj_ref_125_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] > 127 )
    >[UGT_u2_u1_127_inst] (array_obj_ref_125_wire konst_126_wire_constant) (UGT_u2_u1_127_wire)   $flowthrough 
    $delay UGT_u2_u1_127_inst 0
    // (down == 1 )
    ==[EQ_u1_u1_130_inst] (down_121 konst_129_wire_constant) (EQ_u1_u1_130_wire)   $flowthrough 
    $delay EQ_u1_u1_130_inst 0
    // ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 ))
    &[AND_u1_u1_131_inst] (UGT_u2_u1_127_wire EQ_u1_u1_130_wire) (AND_u1_u1_131_wire)   $flowthrough 
    $delay AND_u1_u1_131_inst 0
    // ( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  ) 
    ? [MUX_134_inst] (AND_u1_u1_131_wire konst_132_wire_constant konst_133_wire_constant) (MUX_134_wire)  $flowthrough
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_137_index_0_resize] (input_port) (R_input_port_135_resized) 
    $flowthrough 
    *[array_obj_ref_137_index_0_scale] (R_input_port_135_resized array_obj_ref_137_offset_scale_factor_0) (R_input_port_135_scaled)   
    $delay array_obj_ref_137_index_0_scale 2
    &/ [array_obj_ref_137_index_1_resize] (output_port) (R_output_port_136_resized) 
    $flowthrough 
    &/ [array_obj_ref_137_index_1_rename] (R_output_port_136_resized) (R_output_port_136_scaled) 
    $flowthrough 
    +[array_obj_ref_137_index_sum_1] (R_output_port_136_scaled R_input_port_135_scaled) (array_obj_ref_137_index_partial_sum_1)   
    $delay array_obj_ref_137_index_sum_1 2
    &/ [array_obj_ref_137_index_offset] (array_obj_ref_137_index_partial_sum_1) (array_obj_ref_137_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_137_root_address_inst] (array_obj_ref_137_final_offset) (array_obj_ref_137_root_address) 
    $flowthrough 
    &/ [array_obj_ref_137_addr_0] (array_obj_ref_137_root_address) (array_obj_ref_137_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_137_load_0] $from memory_space_0 (array_obj_ref_137_word_address_0) (array_obj_ref_137_data_0) 
    $delay array_obj_ref_137_load_0 4
    &/ [array_obj_ref_137_gather_scatter] (array_obj_ref_137_data_0) (array_obj_ref_137_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] < 1 )
    <[ULT_u2_u1_139_inst] (array_obj_ref_137_wire konst_138_wire_constant) (ULT_u2_u1_139_wire)   $flowthrough 
    $delay ULT_u2_u1_139_inst 0
    // (up == 1 )
    ==[EQ_u1_u1_142_inst] (up konst_141_wire_constant) (EQ_u1_u1_142_wire)   $flowthrough 
    $delay EQ_u1_u1_142_inst 0
    // ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 ))
    &[AND_u1_u1_143_inst] (ULT_u2_u1_139_wire EQ_u1_u1_142_wire) (AND_u1_u1_143_wire)   $flowthrough 
    $delay AND_u1_u1_143_inst 0
    // ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) 
    ? [MUX_146_inst] (AND_u1_u1_143_wire konst_144_wire_constant konst_145_wire_constant) (MUX_146_wire)  $flowthrough
    // (( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) )
    |[OR_u1_u1_147_inst] (MUX_134_wire MUX_146_wire) (OR_u1_u1_147_wire)   $flowthrough 
    $delay OR_u1_u1_147_inst 0
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_150_index_0_resize] (input_port) (R_input_port_148_resized) 
    $flowthrough 
    *[array_obj_ref_150_index_0_scale] (R_input_port_148_resized array_obj_ref_150_offset_scale_factor_0) (R_input_port_148_scaled)   
    $delay array_obj_ref_150_index_0_scale 2
    &/ [array_obj_ref_150_index_1_resize] (output_port) (R_output_port_149_resized) 
    $flowthrough 
    &/ [array_obj_ref_150_index_1_rename] (R_output_port_149_resized) (R_output_port_149_scaled) 
    $flowthrough 
    +[array_obj_ref_150_index_sum_1] (R_output_port_149_scaled R_input_port_148_scaled) (array_obj_ref_150_index_partial_sum_1)   
    $delay array_obj_ref_150_index_sum_1 2
    &/ [array_obj_ref_150_index_offset] (array_obj_ref_150_index_partial_sum_1) (array_obj_ref_150_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_150_root_address_inst] (array_obj_ref_150_final_offset) (array_obj_ref_150_root_address) 
    $flowthrough 
    &/ [array_obj_ref_150_addr_0] (array_obj_ref_150_root_address) (array_obj_ref_150_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_150_load_0] $from memory_space_0 (array_obj_ref_150_word_address_0) (array_obj_ref_150_data_0) 
    $delay array_obj_ref_150_load_0 4
    &/ [array_obj_ref_150_gather_scatter] (array_obj_ref_150_data_0) (array_obj_ref_150_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] == 128 )
    ==[EQ_u2_u1_152_inst] (array_obj_ref_150_wire konst_151_wire_constant) (EQ_u2_u1_152_wire)   $flowthrough 
    $delay EQ_u2_u1_152_inst 0
    // (up == 1 )
    ==[EQ_u1_u1_155_inst] (up konst_154_wire_constant) (EQ_u1_u1_155_wire)   $flowthrough 
    $delay EQ_u1_u1_155_inst 0
    // ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 ))
    &[AND_u1_u1_156_inst] (EQ_u2_u1_152_wire EQ_u1_u1_155_wire) (AND_u1_u1_156_wire)   $flowthrough 
    $delay AND_u1_u1_156_inst 0
    // ( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  ) 
    ? [MUX_159_inst] (AND_u1_u1_156_wire konst_157_wire_constant konst_158_wire_constant) (MUX_159_wire)  $flowthrough
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_162_index_0_resize] (input_port) (R_input_port_160_resized) 
    $flowthrough 
    *[array_obj_ref_162_index_0_scale] (R_input_port_160_resized array_obj_ref_162_offset_scale_factor_0) (R_input_port_160_scaled)   
    $delay array_obj_ref_162_index_0_scale 2
    &/ [array_obj_ref_162_index_1_resize] (output_port) (R_output_port_161_resized) 
    $flowthrough 
    &/ [array_obj_ref_162_index_1_rename] (R_output_port_161_resized) (R_output_port_161_scaled) 
    $flowthrough 
    +[array_obj_ref_162_index_sum_1] (R_output_port_161_scaled R_input_port_160_scaled) (array_obj_ref_162_index_partial_sum_1)   
    $delay array_obj_ref_162_index_sum_1 2
    &/ [array_obj_ref_162_index_offset] (array_obj_ref_162_index_partial_sum_1) (array_obj_ref_162_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_162_root_address_inst] (array_obj_ref_162_final_offset) (array_obj_ref_162_root_address) 
    $flowthrough 
    &/ [array_obj_ref_162_addr_0] (array_obj_ref_162_root_address) (array_obj_ref_162_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_162_load_0] $from memory_space_0 (array_obj_ref_162_word_address_0) (array_obj_ref_162_data_0) 
    $delay array_obj_ref_162_load_0 4
    &/ [array_obj_ref_162_gather_scatter] (array_obj_ref_162_data_0) (array_obj_ref_162_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] == 0 )
    ==[EQ_u2_u1_164_inst] (array_obj_ref_162_wire konst_163_wire_constant) (EQ_u2_u1_164_wire)   $flowthrough 
    $delay EQ_u2_u1_164_inst 0
    // (down == 1 )
    ==[EQ_u1_u1_167_inst] (down_121 konst_166_wire_constant) (EQ_u1_u1_167_wire)   $flowthrough 
    $delay EQ_u1_u1_167_inst 0
    // ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 ))
    &[AND_u1_u1_168_inst] (EQ_u2_u1_164_wire EQ_u1_u1_167_wire) (AND_u1_u1_168_wire)   $flowthrough 
    $delay AND_u1_u1_168_inst 0
    // ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) 
    ? [MUX_171_inst] (AND_u1_u1_168_wire konst_169_wire_constant konst_170_wire_constant) (MUX_171_wire)  $flowthrough
    // (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )
    |[OR_u1_u1_172_inst] (MUX_159_wire MUX_171_wire) (OR_u1_u1_172_wire)   $flowthrough 
    $delay OR_u1_u1_172_inst 0
    // ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) ))
    |[OR_u1_u1_173_inst] (OR_u1_u1_147_wire OR_u1_u1_172_wire) (continue)   $flowthrough 
    $delay OR_u1_u1_173_inst 0
    // 	obuf_semaphore[input_port][output_port] := ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) $buffering 1// bits of buffering = 2. 
    //  file .Aa/switch2x2.opt.aa, line 104
    // (down == 1 )
    ==[EQ_u1_u1_181_inst] (down_121 konst_180_wire_constant) (EQ_u1_u1_181_wire)   $flowthrough 
    $delay EQ_u1_u1_181_inst 0
    // (continue & (down == 1 ))
    &[AND_u1_u1_182_inst] (continue EQ_u1_u1_181_wire) (AND_u1_u1_182_wire)   $flowthrough 
    $delay AND_u1_u1_182_inst 0
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_185_index_0_resize] (input_port) (R_input_port_183_resized) 
    $flowthrough 
    *[array_obj_ref_185_index_0_scale] (R_input_port_183_resized array_obj_ref_185_offset_scale_factor_0) (R_input_port_183_scaled)   
    $delay array_obj_ref_185_index_0_scale 2
    &/ [array_obj_ref_185_index_1_resize] (output_port) (R_output_port_184_resized) 
    $flowthrough 
    &/ [array_obj_ref_185_index_1_rename] (R_output_port_184_resized) (R_output_port_184_scaled) 
    $flowthrough 
    +[array_obj_ref_185_index_sum_1] (R_output_port_184_scaled R_input_port_183_scaled) (array_obj_ref_185_index_partial_sum_1)   
    $delay array_obj_ref_185_index_sum_1 2
    &/ [array_obj_ref_185_index_offset] (array_obj_ref_185_index_partial_sum_1) (array_obj_ref_185_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_185_root_address_inst] (array_obj_ref_185_final_offset) (array_obj_ref_185_root_address) 
    $flowthrough 
    &/ [array_obj_ref_185_addr_0] (array_obj_ref_185_root_address) (array_obj_ref_185_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_185_load_0] $from memory_space_0 (array_obj_ref_185_word_address_0) (array_obj_ref_185_data_0) 
    $delay array_obj_ref_185_load_0 4
    &/ [array_obj_ref_185_gather_scatter] (array_obj_ref_185_data_0) (array_obj_ref_185_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] - 1 )
    -[SUB_u2_u2_187_inst] (array_obj_ref_185_wire konst_186_wire_constant) (SUB_u2_u2_187_wire)   $flowthrough 
    $delay SUB_u2_u2_187_inst 0
    // ( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  ) 
    ? [MUX_189_inst] (AND_u1_u1_182_wire SUB_u2_u2_187_wire konst_188_wire_constant) (MUX_189_wire)  $flowthrough
    // (up == 1 )
    ==[EQ_u1_u1_193_inst] (up konst_192_wire_constant) (EQ_u1_u1_193_wire)   $flowthrough 
    $delay EQ_u1_u1_193_inst 0
    // (continue & (up == 1 ))
    &[AND_u1_u1_194_inst] (continue EQ_u1_u1_193_wire) (AND_u1_u1_194_wire)   $flowthrough 
    $delay AND_u1_u1_194_inst 0
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_197_index_0_resize] (input_port) (R_input_port_195_resized) 
    $flowthrough 
    *[array_obj_ref_197_index_0_scale] (R_input_port_195_resized array_obj_ref_197_offset_scale_factor_0) (R_input_port_195_scaled)   
    $delay array_obj_ref_197_index_0_scale 2
    &/ [array_obj_ref_197_index_1_resize] (output_port) (R_output_port_196_resized) 
    $flowthrough 
    &/ [array_obj_ref_197_index_1_rename] (R_output_port_196_resized) (R_output_port_196_scaled) 
    $flowthrough 
    +[array_obj_ref_197_index_sum_1] (R_output_port_196_scaled R_input_port_195_scaled) (array_obj_ref_197_index_partial_sum_1)   
    $delay array_obj_ref_197_index_sum_1 2
    &/ [array_obj_ref_197_index_offset] (array_obj_ref_197_index_partial_sum_1) (array_obj_ref_197_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_197_root_address_inst] (array_obj_ref_197_final_offset) (array_obj_ref_197_root_address) 
    $flowthrough 
    &/ [array_obj_ref_197_addr_0] (array_obj_ref_197_root_address) (array_obj_ref_197_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_197_load_0] $from memory_space_0 (array_obj_ref_197_word_address_0) (array_obj_ref_197_data_0) 
    $delay array_obj_ref_197_load_0 4
    &/ [array_obj_ref_197_gather_scatter] (array_obj_ref_197_data_0) (array_obj_ref_197_wire) 
    $flowthrough 
    // (obuf_semaphore[input_port][output_port] + 1 )
    +[ADD_u2_u2_199_inst] (array_obj_ref_197_wire konst_198_wire_constant) (ADD_u2_u2_199_wire)   $flowthrough 
    $delay ADD_u2_u2_199_inst 0
    // ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) 
    ? [MUX_201_inst] (AND_u1_u1_194_wire ADD_u2_u2_199_wire konst_200_wire_constant) (MUX_201_wire)  $flowthrough
    // (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) )
    |[OR_u2_u2_202_inst] (MUX_189_wire MUX_201_wire) (OR_u2_u2_202_wire)   $flowthrough 
    $delay OR_u2_u2_202_inst 0
    // ( ~ continue )
    ~ [NOT_u1_u1_204_inst] (continue) (NOT_u1_u1_204_wire)   $flowthrough
    $delay NOT_u1_u1_204_inst 0
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_207_index_0_resize] (input_port) (R_input_port_205_resized) 
    $flowthrough 
    *[array_obj_ref_207_index_0_scale] (R_input_port_205_resized array_obj_ref_207_offset_scale_factor_0) (R_input_port_205_scaled)   
    $delay array_obj_ref_207_index_0_scale 2
    &/ [array_obj_ref_207_index_1_resize] (output_port) (R_output_port_206_resized) 
    $flowthrough 
    &/ [array_obj_ref_207_index_1_rename] (R_output_port_206_resized) (R_output_port_206_scaled) 
    $flowthrough 
    +[array_obj_ref_207_index_sum_1] (R_output_port_206_scaled R_input_port_205_scaled) (array_obj_ref_207_index_partial_sum_1)   
    $delay array_obj_ref_207_index_sum_1 2
    &/ [array_obj_ref_207_index_offset] (array_obj_ref_207_index_partial_sum_1) (array_obj_ref_207_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_207_root_address_inst] (array_obj_ref_207_final_offset) (array_obj_ref_207_root_address) 
    $flowthrough 
    &/ [array_obj_ref_207_addr_0] (array_obj_ref_207_root_address) (array_obj_ref_207_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_207_load_0] $from memory_space_0 (array_obj_ref_207_word_address_0) (array_obj_ref_207_data_0) 
    $delay array_obj_ref_207_load_0 4
    &/ [array_obj_ref_207_gather_scatter] (array_obj_ref_207_data_0) (array_obj_ref_207_wire) 
    $flowthrough 
    // ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) 
    ? [MUX_209_inst] (NOT_u1_u1_204_wire array_obj_ref_207_wire konst_208_wire_constant) (MUX_209_wire)  $flowthrough
    // ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) )
    |[OR_u2_u2_210_inst] (OR_u2_u2_202_wire MUX_209_wire) (OR_u2_u2_210_wire)   
    $buffering  $out OR_u2_u2_210_inst OR_u2_u2_210_wire 1
    $delay OR_u2_u2_210_inst 1
    // obuf_semaphore[input_port][output_port]
    &/ [array_obj_ref_177_index_0_resize] (input_port) (R_input_port_175_resized) 
    $flowthrough 
    *[array_obj_ref_177_index_0_scale] (R_input_port_175_resized array_obj_ref_177_offset_scale_factor_0) (R_input_port_175_scaled)   
    $delay array_obj_ref_177_index_0_scale 2
    &/ [array_obj_ref_177_index_1_resize] (output_port) (R_output_port_176_resized) 
    $flowthrough 
    &/ [array_obj_ref_177_index_1_rename] (R_output_port_176_resized) (R_output_port_176_scaled) 
    $flowthrough 
    +[array_obj_ref_177_index_sum_1] (R_output_port_176_scaled R_input_port_175_scaled) (array_obj_ref_177_index_partial_sum_1)   
    $delay array_obj_ref_177_index_sum_1 2
    &/ [array_obj_ref_177_index_offset] (array_obj_ref_177_index_partial_sum_1) (array_obj_ref_177_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_177_root_address_inst] (array_obj_ref_177_final_offset) (array_obj_ref_177_root_address) 
    $flowthrough 
    &/ [array_obj_ref_177_addr_0] (array_obj_ref_177_root_address) (array_obj_ref_177_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_177_store_0] $to memory_space_0 (array_obj_ref_177_word_address_0 array_obj_ref_177_data_0) 
    $delay array_obj_ref_177_store_0 5
    &/ [array_obj_ref_177_gather_scatter] (OR_u2_u2_210_wire) (array_obj_ref_177_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$volatile down := ( ~ up ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 102
  // up
  // 	$volatile continue := ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 103
  // ((( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) ) | (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) ))
  // (( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) )
  // ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 ))
  // (obuf_semaphore[input_port][output_port] > 127 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_125_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_resize_0/index_resize_ack)
  array_obj_ref_125_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_125_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_resize_1/index_resize_ack)
  array_obj_ref_125_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_index_scale_1/scale_rename_ack)
  array_obj_ref_125_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_partial_sum_1_Update/ca)
  array_obj_ref_125_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_final_index_sum_regn/ack)
  array_obj_ref_125_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_base_plus_offset/sum_rename_ack)
  array_obj_ref_125_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_word_addrgen/root_register_ack)
  array_obj_ref_125_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Update/array_obj_ref_125_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Update/array_obj_ref_125_Merge/merge_ack)
  array_obj_ref_125_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_125_Update/word_access_complete/word_0/ca)
  // (down == 1 )
  // down
  // ( $mux ((obuf_semaphore[input_port][output_port] > 127 ) & (down == 1 )) 1   _b0  ) 
  // ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 ))
  // (obuf_semaphore[input_port][output_port] < 1 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_137_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_resize_0/index_resize_ack)
  array_obj_ref_137_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_137_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_resize_1/index_resize_ack)
  array_obj_ref_137_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_index_scale_1/scale_rename_ack)
  array_obj_ref_137_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_partial_sum_1_Update/ca)
  array_obj_ref_137_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_final_index_sum_regn/ack)
  array_obj_ref_137_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_base_plus_offset/sum_rename_ack)
  array_obj_ref_137_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_word_addrgen/root_register_ack)
  array_obj_ref_137_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Update/array_obj_ref_137_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Update/array_obj_ref_137_Merge/merge_ack)
  array_obj_ref_137_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_137_Update/word_access_complete/word_0/ca)
  // (up == 1 )
  // up
  // ( $mux ((obuf_semaphore[input_port][output_port] < 1 ) & (up == 1 )) 1   _b0  ) 
  // (( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  )  | ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) )
  // ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 ))
  // (obuf_semaphore[input_port][output_port] == 128 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_150_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_resize_0/index_resize_ack)
  array_obj_ref_150_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_150_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_resize_1/index_resize_ack)
  array_obj_ref_150_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_index_scale_1/scale_rename_ack)
  array_obj_ref_150_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_partial_sum_1_Update/ca)
  array_obj_ref_150_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_final_index_sum_regn/ack)
  array_obj_ref_150_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_base_plus_offset/sum_rename_ack)
  array_obj_ref_150_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_word_addrgen/root_register_ack)
  array_obj_ref_150_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Update/array_obj_ref_150_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Update/array_obj_ref_150_Merge/merge_ack)
  array_obj_ref_150_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_150_Update/word_access_complete/word_0/ca)
  // (up == 1 )
  // up
  // ( $mux ((obuf_semaphore[input_port][output_port] == 128 ) & (up == 1 )) 0   _b0  ) 
  // ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 ))
  // (obuf_semaphore[input_port][output_port] == 0 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_162_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_resize_0/index_resize_ack)
  array_obj_ref_162_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_162_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_resize_1/index_resize_ack)
  array_obj_ref_162_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_index_scale_1/scale_rename_ack)
  array_obj_ref_162_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_partial_sum_1_Update/ca)
  array_obj_ref_162_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_final_index_sum_regn/ack)
  array_obj_ref_162_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_base_plus_offset/sum_rename_ack)
  array_obj_ref_162_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_word_addrgen/root_register_ack)
  array_obj_ref_162_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Update/array_obj_ref_162_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Update/array_obj_ref_162_Merge/merge_ack)
  array_obj_ref_162_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_162_Update/word_access_complete/word_0/ca)
  // (down == 1 )
  // down
  // ( $mux ((obuf_semaphore[input_port][output_port] == 0 ) & (down == 1 )) 0   _b0  ) 
  // 	obuf_semaphore[input_port][output_port] := ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) ) $buffering 1// bits of buffering = 2. 
  //  file .Aa/switch2x2.opt.aa, line 104
  // ((( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) ) | ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) )
  // (( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  )  | ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) )
  // (continue & (down == 1 ))
  // continue
  // (down == 1 )
  // down
  // (obuf_semaphore[input_port][output_port] - 1 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_185_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_resize_0/index_resize_ack)
  array_obj_ref_185_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_185_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_resize_1/index_resize_ack)
  array_obj_ref_185_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_index_scale_1/scale_rename_ack)
  array_obj_ref_185_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_partial_sum_1_Update/ca)
  array_obj_ref_185_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_final_index_sum_regn/ack)
  array_obj_ref_185_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_base_plus_offset/sum_rename_ack)
  array_obj_ref_185_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_word_addrgen/root_register_ack)
  array_obj_ref_185_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Update/array_obj_ref_185_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Update/array_obj_ref_185_Merge/merge_ack)
  array_obj_ref_185_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_185_Update/word_access_complete/word_0/ca)
  // ( $mux (continue & (down == 1 )) (obuf_semaphore[input_port][output_port] - 1 )  _b0  ) 
  // (continue & (up == 1 ))
  // continue
  // (up == 1 )
  // up
  // (obuf_semaphore[input_port][output_port] + 1 )
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_197_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_resize_0/index_resize_ack)
  array_obj_ref_197_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_197_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_resize_1/index_resize_ack)
  array_obj_ref_197_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_index_scale_1/scale_rename_ack)
  array_obj_ref_197_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_partial_sum_1_Update/ca)
  array_obj_ref_197_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_final_index_sum_regn/ack)
  array_obj_ref_197_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_base_plus_offset/sum_rename_ack)
  array_obj_ref_197_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_word_addrgen/root_register_ack)
  array_obj_ref_197_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Update/array_obj_ref_197_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Update/array_obj_ref_197_Merge/merge_ack)
  array_obj_ref_197_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_197_Update/word_access_complete/word_0/ca)
  // ( $mux (continue & (up == 1 )) (obuf_semaphore[input_port][output_port] + 1 )  _b0  ) 
  // continue
  // obuf_semaphore[input_port][output_port]
  // input_port
  array_obj_ref_207_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_resize_0/index_resize_ack)
  array_obj_ref_207_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_207_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_resize_1/index_resize_ack)
  array_obj_ref_207_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_index_scale_1/scale_rename_ack)
  array_obj_ref_207_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_partial_sum_1_Update/ca)
  array_obj_ref_207_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_final_index_sum_regn/ack)
  array_obj_ref_207_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_base_plus_offset/sum_rename_ack)
  array_obj_ref_207_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_word_addrgen/root_register_ack)
  array_obj_ref_207_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Update/array_obj_ref_207_Merge/merge_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Update/array_obj_ref_207_Merge/merge_ack)
  array_obj_ref_207_load_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_207_Update/word_access_complete/word_0/ca)
  // ( $mux ( ~ continue ) obuf_semaphore[input_port][output_port]  _b0  ) 
  OR_u2_u2_210_inst <=> (assign_stmt_121_to_assign_stmt_211/OR_u2_u2_210_Sample/rr assign_stmt_121_to_assign_stmt_211/OR_u2_u2_210_Update/cr) (assign_stmt_121_to_assign_stmt_211/OR_u2_u2_210_Sample/ra assign_stmt_121_to_assign_stmt_211/OR_u2_u2_210_Update/ca)
  // input_port
  array_obj_ref_177_index_0_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_resize_0/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_resize_0/index_resize_ack)
  array_obj_ref_177_index_0_scale <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_0_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_0_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_0_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_0_Update/ca)
  // output_port
  array_obj_ref_177_index_1_resize <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_resize_1/index_resize_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_resize_1/index_resize_ack)
  array_obj_ref_177_index_1_rename <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_1/scale_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_index_scale_1/scale_rename_ack)
  array_obj_ref_177_index_sum_1 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_partial_sum_1_Sample/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_partial_sum_1_Update/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_partial_sum_1_Sample/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_partial_sum_1_Update/ca)
  array_obj_ref_177_index_offset <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_final_index_sum_regn/req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_final_index_sum_regn/ack)
  array_obj_ref_177_root_address_inst <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_base_plus_offset/sum_rename_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_base_plus_offset/sum_rename_ack)
  array_obj_ref_177_addr_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_word_addrgen/root_register_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_word_addrgen/root_register_ack)
  array_obj_ref_177_gather_scatter <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Sample/array_obj_ref_177_Split/split_req) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Sample/array_obj_ref_177_Split/split_ack)
  array_obj_ref_177_store_0 <=> (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Sample/word_access_start/word_0/rr assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Update/word_access_complete/word_0/cr) (assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Sample/word_access_start/word_0/ra assign_stmt_121_to_assign_stmt_211/array_obj_ref_177_Update/word_access_complete/word_0/ca)
}
$module [inputPort_1_Daemon] 
{
  // pipe-declarations for block %inputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 106
  // pipe-declarations for block %inputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 111
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_214] // Branch Block  file .Aa/switch2x2.opt.aa, line 111
    {
      $P [branch_block_stmt_214__entry__]
      branch_block_stmt_214__entry__ <-| ($entry)
      $P [branch_block_stmt_214__exit__]
      branch_block_stmt_214__exit__ |-> ($exit)
      $P [do_while_stmt_215__entry__] 
      $P [do_while_stmt_215__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 113
      <o> [do_while_stmt_215]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_215__entry__] 
        $P[do_while_stmt_215__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_215_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_217
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ZERO_16 $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_217_sample_start_] 
          $T[phi_stmt_217_sample_completed_] 
          $T[phi_stmt_217_update_start_] 
          $T[phi_stmt_217_update_completed_] 
          $T[phi_stmt_217_sample_start__ps] 
          phi_stmt_217_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_217_sample_completed__ps] 
          phi_stmt_217_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_217_update_start__ps] 
          phi_stmt_217_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_217_update_completed__ps] 
          phi_stmt_217_update_completed_ <-& (phi_stmt_217_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_217_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_217_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_217_update_start_)
          $T[phi_stmt_217_loopback_trigger] 
          phi_stmt_217_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_217_loopback_sample_req] 
          $T[phi_stmt_217_loopback_sample_req_ps] 
          phi_stmt_217_loopback_sample_req <-& (phi_stmt_217_loopback_sample_req_ps)
          phi_stmt_217_loopback_sample_req &-> ($null)
          $T[phi_stmt_217_entry_trigger] 
          phi_stmt_217_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_217_entry_sample_req] 
          $T[phi_stmt_217_entry_sample_req_ps] 
          phi_stmt_217_entry_sample_req <-& (phi_stmt_217_entry_sample_req_ps)
          phi_stmt_217_entry_sample_req &-> ($null)
          phi_stmt_217_update_start_ o<-& (phi_stmt_217_update_completed_ 0)
          phi_stmt_217_sample_start_ o<-& (phi_stmt_217_sample_completed_ 1)
          $T[phi_stmt_217_merged_reqs] 
          $T[phi_stmt_217_phi_mux_ack] 
          $T[phi_stmt_217_phi_mux_ack_ps] 
          phi_stmt_217_phi_mux_ack_ps <-& (phi_stmt_217_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_217_update_completed_)
          $T[R_next_count_down_219_sample_start__ps] 
          $T[R_next_count_down_219_sample_completed__ps] 
          $T[R_next_count_down_219_update_start__ps] 
          $T[R_next_count_down_219_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_219_sample_start_] 
          $T[R_next_count_down_219_sample_completed_] 
          $T[R_next_count_down_219_update_start_] 
          $T[R_next_count_down_219_update_completed_] 
          ;;[R_next_count_down_219_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_219_sample_start_ &-> (R_next_count_down_219_Sample)
          R_next_count_down_219_sample_completed_ <-& (R_next_count_down_219_Sample)
          ;;[R_next_count_down_219_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_219_update_start_ &-> (R_next_count_down_219_Update)
          R_next_count_down_219_update_completed_ <-& (R_next_count_down_219_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_219_sample_start_ <-& (R_next_count_down_219_sample_start__ps)
          R_next_count_down_219_update_start_ <-& (R_next_count_down_219_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_219_sample_completed__ps <-& (R_next_count_down_219_sample_completed_)
          R_next_count_down_219_update_completed__ps <-& (R_next_count_down_219_update_completed_)
          $T[R_ZERO_16_220_sample_start__ps] 
          $T[R_ZERO_16_220_sample_completed__ps] 
          $T[R_ZERO_16_220_update_start__ps] 
          $T[R_ZERO_16_220_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_220_sample_start_] 
          $T[R_ZERO_16_220_sample_completed_] 
          R_ZERO_16_220_sample_completed_ <-& (R_ZERO_16_220_sample_start_)
          $T[R_ZERO_16_220_update_start_] 
          $T [R_ZERO_16_220_update_completed_] $delay 
          R_ZERO_16_220_update_completed_ <-& (R_ZERO_16_220_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_220_sample_start_ <-& (R_ZERO_16_220_sample_start__ps)
          R_ZERO_16_220_update_start_ <-& (R_ZERO_16_220_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_220_sample_completed__ps <-& (R_ZERO_16_220_sample_completed_)
          R_ZERO_16_220_update_completed__ps <-& (R_ZERO_16_220_update_completed_)
          $phisequencer [ phi_stmt_217_phi_seq] : 
          phi_stmt_217_loopback_trigger R_next_count_down_219_sample_start__ps R_next_count_down_219_sample_completed__ps R_next_count_down_219_update_start__ps R_next_count_down_219_update_completed__ps phi_stmt_217_entry_trigger R_ZERO_16_220_sample_start__ps R_ZERO_16_220_sample_completed__ps R_ZERO_16_220_update_start__ps R_ZERO_16_220_update_completed__ps :
          phi_stmt_217_sample_start__ps phi_stmt_217_sample_completed__ps phi_stmt_217_update_start__ps phi_stmt_217_update_completed__ps :
          phi_stmt_217_loopback_sample_req_ps phi_stmt_217_entry_sample_req_ps : 
          phi_stmt_217_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_217
          // start:  single source PHI statement phi_stmt_221
          // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_221_sample_start_] 
          $T[phi_stmt_221_sample_completed_] 
          $T[phi_stmt_221_update_start_] 
          $T[phi_stmt_221_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_221_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_221_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_221_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_1
          $T[RPIPE_in_data_1_223_sample_start_] 
          $T[RPIPE_in_data_1_223_sample_completed_] 
          $T[RPIPE_in_data_1_223_update_start_] 
          $T[RPIPE_in_data_1_223_update_completed_] 
          ;;[RPIPE_in_data_1_223_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_1_223_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_1_223_sample_start_ &-> (RPIPE_in_data_1_223_Sample)
          RPIPE_in_data_1_223_sample_completed_ <-& (RPIPE_in_data_1_223_Sample)
          RPIPE_in_data_1_223_update_start_ <-& (RPIPE_in_data_1_223_sample_completed_)
          RPIPE_in_data_1_223_update_start_ &-> (RPIPE_in_data_1_223_Update)
          RPIPE_in_data_1_223_update_completed_ <-& (RPIPE_in_data_1_223_Update)
          RPIPE_in_data_1_223_sample_start_ o<-& (RPIPE_in_data_1_223_update_completed_ 0)
          // RAW reenables for in_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_1_223_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_1_223_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_1_223_update_start_)
          phi_stmt_221_update_completed_ <-& (RPIPE_in_data_1_223_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_221_update_completed_)
          // done: PHI Statement phi_stmt_221
          // start:  multi-source PHI statement phi_stmt_224
          // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
          // type of target is $uint<8>
          $T[phi_stmt_224_sample_start_] 
          $T[phi_stmt_224_sample_completed_] 
          $T[phi_stmt_224_update_start_] 
          $T[phi_stmt_224_update_completed_] 
          $T[phi_stmt_224_sample_start__ps] 
          phi_stmt_224_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_224_sample_completed__ps] 
          phi_stmt_224_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_224_update_start__ps] 
          phi_stmt_224_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_224_update_completed__ps] 
          phi_stmt_224_update_completed_ <-& (phi_stmt_224_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_224_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_224_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_224_update_start_)
          $T[phi_stmt_224_loopback_trigger] 
          phi_stmt_224_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_224_loopback_sample_req] 
          $T[phi_stmt_224_loopback_sample_req_ps] 
          phi_stmt_224_loopback_sample_req <-& (phi_stmt_224_loopback_sample_req_ps)
          phi_stmt_224_loopback_sample_req &-> ($null)
          $T[phi_stmt_224_entry_trigger] 
          phi_stmt_224_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_224_entry_sample_req] 
          $T[phi_stmt_224_entry_sample_req_ps] 
          phi_stmt_224_entry_sample_req <-& (phi_stmt_224_entry_sample_req_ps)
          phi_stmt_224_entry_sample_req &-> ($null)
          phi_stmt_224_update_start_ o<-& (phi_stmt_224_update_completed_ 0)
          phi_stmt_224_sample_start_ o<-& (phi_stmt_224_sample_completed_ 1)
          $T[phi_stmt_224_merged_reqs] 
          $T[phi_stmt_224_phi_mux_ack] 
          $T[phi_stmt_224_phi_mux_ack_ps] 
          phi_stmt_224_phi_mux_ack_ps <-& (phi_stmt_224_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_224_update_completed_)
          $T[R_next_last_dest_id_226_sample_start__ps] 
          $T[R_next_last_dest_id_226_sample_completed__ps] 
          $T[R_next_last_dest_id_226_update_start__ps] 
          $T[R_next_last_dest_id_226_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_last_dest_id_226_sample_start_] 
          $T[R_next_last_dest_id_226_sample_completed_] 
          $T[R_next_last_dest_id_226_update_start_] 
          $T[R_next_last_dest_id_226_update_completed_] 
          ;;[R_next_last_dest_id_226_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_226_sample_start_ &-> (R_next_last_dest_id_226_Sample)
          R_next_last_dest_id_226_sample_completed_ <-& (R_next_last_dest_id_226_Sample)
          ;;[R_next_last_dest_id_226_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_226_update_start_ &-> (R_next_last_dest_id_226_Update)
          R_next_last_dest_id_226_update_completed_ <-& (R_next_last_dest_id_226_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_226_sample_start_ <-& (R_next_last_dest_id_226_sample_start__ps)
          R_next_last_dest_id_226_update_start_ <-& (R_next_last_dest_id_226_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_226_sample_completed__ps <-& (R_next_last_dest_id_226_sample_completed_)
          R_next_last_dest_id_226_update_completed__ps <-& (R_next_last_dest_id_226_update_completed_)
          $T[konst_227_sample_start__ps] 
          $T[konst_227_sample_completed__ps] 
          $T[konst_227_update_start__ps] 
          $T[konst_227_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_227_sample_start_] 
          $T[konst_227_sample_completed_] 
          konst_227_sample_completed_ <-& (konst_227_sample_start_)
          $T[konst_227_update_start_] 
          $T [konst_227_update_completed_] $delay 
          konst_227_update_completed_ <-& (konst_227_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_227_sample_start_ <-& (konst_227_sample_start__ps)
          konst_227_update_start_ <-& (konst_227_update_start__ps)
          // Phi complete dependency.
          konst_227_sample_completed__ps <-& (konst_227_sample_completed_)
          konst_227_update_completed__ps <-& (konst_227_update_completed_)
          $phisequencer [ phi_stmt_224_phi_seq] : 
          phi_stmt_224_loopback_trigger R_next_last_dest_id_226_sample_start__ps R_next_last_dest_id_226_sample_completed__ps R_next_last_dest_id_226_update_start__ps R_next_last_dest_id_226_update_completed__ps phi_stmt_224_entry_trigger konst_227_sample_start__ps konst_227_sample_completed__ps konst_227_update_start__ps konst_227_update_completed__ps :
          phi_stmt_224_sample_start__ps phi_stmt_224_sample_completed__ps phi_stmt_224_update_start__ps phi_stmt_224_update_completed__ps :
          phi_stmt_224_loopback_sample_req_ps phi_stmt_224_entry_sample_req_ps : 
          phi_stmt_224_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_224
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 124
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 125
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 126
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // start:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 127
          // volatile! 
          // Source expression
          // ( $slice input_word 7 0 ) 
          // input_word
          // Target expression
          // (as target) seq_id
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // end:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 129
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 130
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 131
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for continue
          // ignored out-of-scope w_root ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          // done: WAR dependencies for continue
          // start:  			$volatile continue := ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 132
          // volatile! 
          // Source expression
          // ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          $T[call_updateCounter_expr_281_sample_start_] 
          $T[call_updateCounter_expr_281_sample_completed_] 
          $T[call_updateCounter_expr_281_update_start_] 
          $T[call_updateCounter_expr_281_update_completed_] 
          // (next_last_dest_id - 1 )
          // next_last_dest_id
          // start: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_281_sample_start_
          call_updateCounter_expr_281_sample_start_ <-& (phi_stmt_221_update_completed_)
          call_updateCounter_expr_281_sample_start_ <-& (phi_stmt_224_update_completed_)
          call_updateCounter_expr_281_sample_start_ <-& (phi_stmt_217_update_completed_)
          // done: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_281_sample_start_
          // RAW reenables for (next_last_dest_id - 1 )
          phi_stmt_221_update_start_ o<-& (call_updateCounter_expr_281_sample_completed_ 0)
          phi_stmt_224_update_start_ o<-& (call_updateCounter_expr_281_sample_completed_ 0)
          phi_stmt_217_update_start_ o<-& (call_updateCounter_expr_281_sample_completed_ 0)
          ;;[call_updateCounter_expr_281_Sample] 
          {
            // fn-call expression 
            $T [req] $T [ack]  // (split) fn-call binary operation 
          }
          ;;[call_updateCounter_expr_281_Update] 
          {
            // fn-call binary expression 
            $T [req] $T [ack] // (split) fn-call binary operation 
          }
          call_updateCounter_expr_281_sample_start_ &-> (call_updateCounter_expr_281_Sample)
          call_updateCounter_expr_281_sample_completed_ <-& (call_updateCounter_expr_281_Sample)
          call_updateCounter_expr_281_sample_completed_ &-> ($null)
          call_updateCounter_expr_281_update_start_ &-> (call_updateCounter_expr_281_Update)
          call_updateCounter_expr_281_update_completed_ <-& (call_updateCounter_expr_281_Update)
          // self-release: 
          call_updateCounter_expr_281_sample_start_ o<-& (call_updateCounter_expr_281_sample_completed_ 1)
          $null &-> (call_updateCounter_expr_281_update_start_)
          call_updateCounter_expr_281_update_start_ o<-& (call_updateCounter_expr_281_update_completed_ 0)
          // Target expression
          // (as target) continue
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end:  			$volatile continue := ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          // start:  			EQ_u8_u1_286_286_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 133
          // Source expression
          // (next_last_dest_id == 1 )
          $T[EQ_u8_u1_286_sample_start_] 
          $T[EQ_u8_u1_286_sample_completed_] 
          $T[EQ_u8_u1_286_update_start_] 
          $T[EQ_u8_u1_286_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_286_sample_start_
          EQ_u8_u1_286_sample_start_ <-& (phi_stmt_221_update_completed_)
          EQ_u8_u1_286_sample_start_ <-& (phi_stmt_224_update_completed_)
          EQ_u8_u1_286_sample_start_ <-& (phi_stmt_217_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_286_sample_start_
          ;;[EQ_u8_u1_286_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_286_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_286_sample_start_ &-> (EQ_u8_u1_286_Sample)
          EQ_u8_u1_286_sample_completed_ <-& (EQ_u8_u1_286_Sample)
          EQ_u8_u1_286_sample_completed_ &-> ($null)
          EQ_u8_u1_286_update_start_ &-> (EQ_u8_u1_286_Update)
          EQ_u8_u1_286_update_completed_ <-& (EQ_u8_u1_286_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_221_update_start_ o<-& (EQ_u8_u1_286_sample_completed_ 0)
          phi_stmt_224_update_start_ o<-& (EQ_u8_u1_286_sample_completed_ 0)
          phi_stmt_217_update_start_ o<-& (EQ_u8_u1_286_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_286_sample_start_ o<-& (EQ_u8_u1_286_sample_completed_ 1)
          $null &-> (EQ_u8_u1_286_update_start_)
          EQ_u8_u1_286_update_start_ o<-& (EQ_u8_u1_286_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_286_286_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_286_286_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_286_286_delayed_4_0
          // end:  			EQ_u8_u1_286_286_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (EQ_u8_u1_286_286_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 134
          // volatile! 
          // Source expression
          // (EQ_u8_u1_286_286_delayed_4_0 & continue)
          // EQ_u8_u1_286_286_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (EQ_u8_u1_286_286_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_293_293_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 135
          // Source expression
          // (next_last_dest_id == 2 )
          $T[EQ_u8_u1_296_sample_start_] 
          $T[EQ_u8_u1_296_sample_completed_] 
          $T[EQ_u8_u1_296_update_start_] 
          $T[EQ_u8_u1_296_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_296_sample_start_
          EQ_u8_u1_296_sample_start_ <-& (phi_stmt_221_update_completed_)
          EQ_u8_u1_296_sample_start_ <-& (phi_stmt_224_update_completed_)
          EQ_u8_u1_296_sample_start_ <-& (phi_stmt_217_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_296_sample_start_
          ;;[EQ_u8_u1_296_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_296_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_296_sample_start_ &-> (EQ_u8_u1_296_Sample)
          EQ_u8_u1_296_sample_completed_ <-& (EQ_u8_u1_296_Sample)
          EQ_u8_u1_296_sample_completed_ &-> ($null)
          EQ_u8_u1_296_update_start_ &-> (EQ_u8_u1_296_Update)
          EQ_u8_u1_296_update_completed_ <-& (EQ_u8_u1_296_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_221_update_start_ o<-& (EQ_u8_u1_296_sample_completed_ 0)
          phi_stmt_224_update_start_ o<-& (EQ_u8_u1_296_sample_completed_ 0)
          phi_stmt_217_update_start_ o<-& (EQ_u8_u1_296_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_296_sample_start_ o<-& (EQ_u8_u1_296_sample_completed_ 1)
          $null &-> (EQ_u8_u1_296_update_start_)
          EQ_u8_u1_296_update_start_ o<-& (EQ_u8_u1_296_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_293_293_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_293_293_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_293_293_delayed_4_0
          // end:  			EQ_u8_u1_293_293_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (EQ_u8_u1_293_293_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 136
          // volatile! 
          // Source expression
          // (EQ_u8_u1_293_293_delayed_4_0 & continue)
          // EQ_u8_u1_293_293_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (EQ_u8_u1_293_293_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_300_300_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 137
          // Source expression
          // (next_last_dest_id == 3 )
          $T[EQ_u8_u1_306_sample_start_] 
          $T[EQ_u8_u1_306_sample_completed_] 
          $T[EQ_u8_u1_306_update_start_] 
          $T[EQ_u8_u1_306_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_306_sample_start_
          EQ_u8_u1_306_sample_start_ <-& (phi_stmt_221_update_completed_)
          EQ_u8_u1_306_sample_start_ <-& (phi_stmt_224_update_completed_)
          EQ_u8_u1_306_sample_start_ <-& (phi_stmt_217_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_306_sample_start_
          ;;[EQ_u8_u1_306_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_306_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_306_sample_start_ &-> (EQ_u8_u1_306_Sample)
          EQ_u8_u1_306_sample_completed_ <-& (EQ_u8_u1_306_Sample)
          EQ_u8_u1_306_sample_completed_ &-> ($null)
          EQ_u8_u1_306_update_start_ &-> (EQ_u8_u1_306_Update)
          EQ_u8_u1_306_update_completed_ <-& (EQ_u8_u1_306_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_221_update_start_ o<-& (EQ_u8_u1_306_sample_completed_ 0)
          phi_stmt_224_update_start_ o<-& (EQ_u8_u1_306_sample_completed_ 0)
          phi_stmt_217_update_start_ o<-& (EQ_u8_u1_306_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_306_sample_start_ o<-& (EQ_u8_u1_306_sample_completed_ 1)
          $null &-> (EQ_u8_u1_306_update_start_)
          EQ_u8_u1_306_update_start_ o<-& (EQ_u8_u1_306_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_300_300_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_300_300_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_300_300_delayed_4_0
          // end:  			EQ_u8_u1_300_300_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (EQ_u8_u1_300_300_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 138
          // volatile! 
          // Source expression
          // (EQ_u8_u1_300_300_delayed_4_0 & continue)
          // EQ_u8_u1_300_300_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (EQ_u8_u1_300_300_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_307_307_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 139
          // Source expression
          // (next_last_dest_id == 4 )
          $T[EQ_u8_u1_316_sample_start_] 
          $T[EQ_u8_u1_316_sample_completed_] 
          $T[EQ_u8_u1_316_update_start_] 
          $T[EQ_u8_u1_316_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_316_sample_start_
          EQ_u8_u1_316_sample_start_ <-& (phi_stmt_221_update_completed_)
          EQ_u8_u1_316_sample_start_ <-& (phi_stmt_224_update_completed_)
          EQ_u8_u1_316_sample_start_ <-& (phi_stmt_217_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_316_sample_start_
          ;;[EQ_u8_u1_316_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_316_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_316_sample_start_ &-> (EQ_u8_u1_316_Sample)
          EQ_u8_u1_316_sample_completed_ <-& (EQ_u8_u1_316_Sample)
          EQ_u8_u1_316_sample_completed_ &-> ($null)
          EQ_u8_u1_316_update_start_ &-> (EQ_u8_u1_316_Update)
          EQ_u8_u1_316_update_completed_ <-& (EQ_u8_u1_316_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_221_update_start_ o<-& (EQ_u8_u1_316_sample_completed_ 0)
          phi_stmt_224_update_start_ o<-& (EQ_u8_u1_316_sample_completed_ 0)
          phi_stmt_217_update_start_ o<-& (EQ_u8_u1_316_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_316_sample_start_ o<-& (EQ_u8_u1_316_sample_completed_ 1)
          $null &-> (EQ_u8_u1_316_update_start_)
          EQ_u8_u1_316_update_start_ o<-& (EQ_u8_u1_316_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_307_307_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_307_307_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_307_307_delayed_4_0
          // end:  			EQ_u8_u1_307_307_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (EQ_u8_u1_307_307_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 140
          // volatile! 
          // Source expression
          // (EQ_u8_u1_307_307_delayed_4_0 & continue)
          // EQ_u8_u1_307_307_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (EQ_u8_u1_307_307_delayed_4_0 & continue) $buffering 1
          // start:  			data_to_outport_313_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 141
          $T[assign_stmt_325_sample_start_] 
          $T[assign_stmt_325_sample_completed_] 
          $T[assign_stmt_325_update_start_] 
          $T[assign_stmt_325_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_313_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_325_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_325_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_325_sample_start_ &-> (assign_stmt_325_Sample)
          assign_stmt_325_sample_completed_ <-& (assign_stmt_325_Sample)
          assign_stmt_325_sample_completed_ &-> ($null)
          assign_stmt_325_update_start_ &-> (assign_stmt_325_Update)
          assign_stmt_325_update_completed_ <-& (assign_stmt_325_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_325_sample_start_
          assign_stmt_325_sample_start_ <-& (phi_stmt_221_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_325_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_221_update_start_ o<-& (assign_stmt_325_sample_completed_ 0)
          // self-release: 
          assign_stmt_325_sample_start_ o<-& (assign_stmt_325_sample_completed_ 1)
          $null &-> (assign_stmt_325_update_start_)
          assign_stmt_325_update_start_ o<-& (assign_stmt_325_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_313_delayed_4_0
          // done: WAR dependencies for data_to_outport_313_delayed_4_0
          // end:  			data_to_outport_313_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport_313_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 142
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport_313_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_1_1
          $T[WPIPE_noblock_obuf_1_1_327_sample_start_] 
          $T[WPIPE_noblock_obuf_1_1_327_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_1_327_update_start_] 
          $T[WPIPE_noblock_obuf_1_1_327_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_1_327 with guard R_send_to_1_326
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_1_327_sample_start_ <-& (call_updateCounter_expr_281_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_1_327_sample_start_ <-& (EQ_u8_u1_286_update_completed_)
          // RAW reenables for send_to_1
          call_updateCounter_expr_281_update_start_ o<-& (WPIPE_noblock_obuf_1_1_327_sample_completed_ 0)
          EQ_u8_u1_286_update_start_ o<-& (WPIPE_noblock_obuf_1_1_327_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_1_327_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_1_327_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_1_327_sample_start_ &-> (WPIPE_noblock_obuf_1_1_327_Sample)
          WPIPE_noblock_obuf_1_1_327_sample_completed_ <-& (WPIPE_noblock_obuf_1_1_327_Sample)
          WPIPE_noblock_obuf_1_1_327_update_start_ <-& (WPIPE_noblock_obuf_1_1_327_sample_completed_)
          WPIPE_noblock_obuf_1_1_327_update_start_ &-> (WPIPE_noblock_obuf_1_1_327_Update)
          WPIPE_noblock_obuf_1_1_327_update_completed_ <-& (WPIPE_noblock_obuf_1_1_327_Update)
          WPIPE_noblock_obuf_1_1_327_sample_start_ o<-& (WPIPE_noblock_obuf_1_1_327_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_313_delayed_4_0 to transition WPIPE_noblock_obuf_1_1_327_sample_start_
          WPIPE_noblock_obuf_1_1_327_sample_start_ <-& (assign_stmt_325_update_completed_)
          // done: Forward dependencies from data_to_outport_313_delayed_4_0 to transition WPIPE_noblock_obuf_1_1_327_sample_start_
          // RAW reenables for data_to_outport_313_delayed_4_0
          assign_stmt_325_update_start_ o<-& (WPIPE_noblock_obuf_1_1_327_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport_313_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_317_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 143
          $T[assign_stmt_332_sample_start_] 
          $T[assign_stmt_332_sample_completed_] 
          $T[assign_stmt_332_update_start_] 
          $T[assign_stmt_332_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_317_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_332_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_332_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_332_sample_start_ &-> (assign_stmt_332_Sample)
          assign_stmt_332_sample_completed_ <-& (assign_stmt_332_Sample)
          assign_stmt_332_sample_completed_ &-> ($null)
          assign_stmt_332_update_start_ &-> (assign_stmt_332_Update)
          assign_stmt_332_update_completed_ <-& (assign_stmt_332_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_332_sample_start_
          assign_stmt_332_sample_start_ <-& (phi_stmt_221_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_332_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_221_update_start_ o<-& (assign_stmt_332_sample_completed_ 0)
          // self-release: 
          assign_stmt_332_sample_start_ o<-& (assign_stmt_332_sample_completed_ 1)
          $null &-> (assign_stmt_332_update_start_)
          assign_stmt_332_update_start_ o<-& (assign_stmt_332_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_317_delayed_4_0
          // done: WAR dependencies for data_to_outport_317_delayed_4_0
          // end:  			data_to_outport_317_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport_317_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 144
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport_317_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_1_2
          $T[WPIPE_noblock_obuf_1_2_334_sample_start_] 
          $T[WPIPE_noblock_obuf_1_2_334_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_2_334_update_start_] 
          $T[WPIPE_noblock_obuf_1_2_334_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_2_334 with guard R_send_to_2_333
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_2_334_sample_start_ <-& (call_updateCounter_expr_281_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_2_334_sample_start_ <-& (EQ_u8_u1_296_update_completed_)
          // RAW reenables for send_to_2
          call_updateCounter_expr_281_update_start_ o<-& (WPIPE_noblock_obuf_1_2_334_sample_completed_ 0)
          EQ_u8_u1_296_update_start_ o<-& (WPIPE_noblock_obuf_1_2_334_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_2_334_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_2_334_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_2_334_sample_start_ &-> (WPIPE_noblock_obuf_1_2_334_Sample)
          WPIPE_noblock_obuf_1_2_334_sample_completed_ <-& (WPIPE_noblock_obuf_1_2_334_Sample)
          WPIPE_noblock_obuf_1_2_334_update_start_ <-& (WPIPE_noblock_obuf_1_2_334_sample_completed_)
          WPIPE_noblock_obuf_1_2_334_update_start_ &-> (WPIPE_noblock_obuf_1_2_334_Update)
          WPIPE_noblock_obuf_1_2_334_update_completed_ <-& (WPIPE_noblock_obuf_1_2_334_Update)
          WPIPE_noblock_obuf_1_2_334_sample_start_ o<-& (WPIPE_noblock_obuf_1_2_334_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_317_delayed_4_0 to transition WPIPE_noblock_obuf_1_2_334_sample_start_
          WPIPE_noblock_obuf_1_2_334_sample_start_ <-& (assign_stmt_332_update_completed_)
          // done: Forward dependencies from data_to_outport_317_delayed_4_0 to transition WPIPE_noblock_obuf_1_2_334_sample_start_
          // RAW reenables for data_to_outport_317_delayed_4_0
          assign_stmt_332_update_start_ o<-& (WPIPE_noblock_obuf_1_2_334_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport_317_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_321_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 145
          $T[assign_stmt_339_sample_start_] 
          $T[assign_stmt_339_sample_completed_] 
          $T[assign_stmt_339_update_start_] 
          $T[assign_stmt_339_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_321_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_339_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_339_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_339_sample_start_ &-> (assign_stmt_339_Sample)
          assign_stmt_339_sample_completed_ <-& (assign_stmt_339_Sample)
          assign_stmt_339_sample_completed_ &-> ($null)
          assign_stmt_339_update_start_ &-> (assign_stmt_339_Update)
          assign_stmt_339_update_completed_ <-& (assign_stmt_339_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_339_sample_start_
          assign_stmt_339_sample_start_ <-& (phi_stmt_221_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_339_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_221_update_start_ o<-& (assign_stmt_339_sample_completed_ 0)
          // self-release: 
          assign_stmt_339_sample_start_ o<-& (assign_stmt_339_sample_completed_ 1)
          $null &-> (assign_stmt_339_update_start_)
          assign_stmt_339_update_start_ o<-& (assign_stmt_339_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_321_delayed_4_0
          // done: WAR dependencies for data_to_outport_321_delayed_4_0
          // end:  			data_to_outport_321_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport_321_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 146
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport_321_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_1_3
          $T[WPIPE_noblock_obuf_1_3_341_sample_start_] 
          $T[WPIPE_noblock_obuf_1_3_341_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_3_341_update_start_] 
          $T[WPIPE_noblock_obuf_1_3_341_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_3_341 with guard R_send_to_3_340
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_3_341_sample_start_ <-& (call_updateCounter_expr_281_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_3_341_sample_start_ <-& (EQ_u8_u1_306_update_completed_)
          // RAW reenables for send_to_3
          call_updateCounter_expr_281_update_start_ o<-& (WPIPE_noblock_obuf_1_3_341_sample_completed_ 0)
          EQ_u8_u1_306_update_start_ o<-& (WPIPE_noblock_obuf_1_3_341_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_3_341_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_3_341_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_3_341_sample_start_ &-> (WPIPE_noblock_obuf_1_3_341_Sample)
          WPIPE_noblock_obuf_1_3_341_sample_completed_ <-& (WPIPE_noblock_obuf_1_3_341_Sample)
          WPIPE_noblock_obuf_1_3_341_update_start_ <-& (WPIPE_noblock_obuf_1_3_341_sample_completed_)
          WPIPE_noblock_obuf_1_3_341_update_start_ &-> (WPIPE_noblock_obuf_1_3_341_Update)
          WPIPE_noblock_obuf_1_3_341_update_completed_ <-& (WPIPE_noblock_obuf_1_3_341_Update)
          WPIPE_noblock_obuf_1_3_341_sample_start_ o<-& (WPIPE_noblock_obuf_1_3_341_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_321_delayed_4_0 to transition WPIPE_noblock_obuf_1_3_341_sample_start_
          WPIPE_noblock_obuf_1_3_341_sample_start_ <-& (assign_stmt_339_update_completed_)
          // done: Forward dependencies from data_to_outport_321_delayed_4_0 to transition WPIPE_noblock_obuf_1_3_341_sample_start_
          // RAW reenables for data_to_outport_321_delayed_4_0
          assign_stmt_339_update_start_ o<-& (WPIPE_noblock_obuf_1_3_341_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport_321_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_325_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 147
          $T[assign_stmt_346_sample_start_] 
          $T[assign_stmt_346_sample_completed_] 
          $T[assign_stmt_346_update_start_] 
          $T[assign_stmt_346_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_325_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_346_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_346_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_346_sample_start_ &-> (assign_stmt_346_Sample)
          assign_stmt_346_sample_completed_ <-& (assign_stmt_346_Sample)
          assign_stmt_346_sample_completed_ &-> ($null)
          assign_stmt_346_update_start_ &-> (assign_stmt_346_Update)
          assign_stmt_346_update_completed_ <-& (assign_stmt_346_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_346_sample_start_
          assign_stmt_346_sample_start_ <-& (phi_stmt_221_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_346_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_221_update_start_ o<-& (assign_stmt_346_sample_completed_ 0)
          // self-release: 
          assign_stmt_346_sample_start_ o<-& (assign_stmt_346_sample_completed_ 1)
          $null &-> (assign_stmt_346_update_start_)
          assign_stmt_346_update_start_ o<-& (assign_stmt_346_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_325_delayed_4_0
          // done: WAR dependencies for data_to_outport_325_delayed_4_0
          // end:  			data_to_outport_325_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport_325_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 148
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport_325_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_1_4
          $T[WPIPE_noblock_obuf_1_4_348_sample_start_] 
          $T[WPIPE_noblock_obuf_1_4_348_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_4_348_update_start_] 
          $T[WPIPE_noblock_obuf_1_4_348_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_4_348 with guard R_send_to_4_347
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_4_348_sample_start_ <-& (call_updateCounter_expr_281_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_1_4_348_sample_start_ <-& (EQ_u8_u1_316_update_completed_)
          // RAW reenables for send_to_4
          call_updateCounter_expr_281_update_start_ o<-& (WPIPE_noblock_obuf_1_4_348_sample_completed_ 0)
          EQ_u8_u1_316_update_start_ o<-& (WPIPE_noblock_obuf_1_4_348_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_4_348_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_4_348_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_4_348_sample_start_ &-> (WPIPE_noblock_obuf_1_4_348_Sample)
          WPIPE_noblock_obuf_1_4_348_sample_completed_ <-& (WPIPE_noblock_obuf_1_4_348_Sample)
          WPIPE_noblock_obuf_1_4_348_update_start_ <-& (WPIPE_noblock_obuf_1_4_348_sample_completed_)
          WPIPE_noblock_obuf_1_4_348_update_start_ &-> (WPIPE_noblock_obuf_1_4_348_Update)
          WPIPE_noblock_obuf_1_4_348_update_completed_ <-& (WPIPE_noblock_obuf_1_4_348_Update)
          WPIPE_noblock_obuf_1_4_348_sample_start_ o<-& (WPIPE_noblock_obuf_1_4_348_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_325_delayed_4_0 to transition WPIPE_noblock_obuf_1_4_348_sample_start_
          WPIPE_noblock_obuf_1_4_348_sample_start_ <-& (assign_stmt_346_update_completed_)
          // done: Forward dependencies from data_to_outport_325_delayed_4_0 to transition WPIPE_noblock_obuf_1_4_348_sample_start_
          // RAW reenables for data_to_outport_325_delayed_4_0
          assign_stmt_346_update_start_ o<-& (WPIPE_noblock_obuf_1_4_348_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport_325_delayed_4_0 $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_updateCounter_expr_281 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data_1
          // read-dependencies for pipe in_data_1
          // write-dependencies for pipe in_data_1
          // signal write dependencies for in_data_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_215__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_215_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_215__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_215_loop_body : condition_evaluated
        $bind do_while_stmt_215__entry__  => do_while_stmt_215_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_215_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_215__exit__)
      }
      do_while_stmt_215__entry__ |-> (do_while_stmt_215)
      do_while_stmt_215__exit__ <-| (do_while_stmt_215)
      do_while_stmt_215__entry__ <-| (branch_block_stmt_214__entry__)
      do_while_stmt_215__exit__ |-> (branch_block_stmt_214__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 115
    // constant-object-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 111
    // constant-object-declarations for block %inputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 106
    // constant-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 111
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 113
    // 1 
    $constant $W[konst_362_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 115
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ZERO_16 $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 116
    // ZERO_16
    $constant $W[R_ZERO_16_220_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 118
    // constant-declarations for phi:  			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 120
    // 0 
    $constant $W[konst_227_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_233_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_256_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_259_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_270_wire_constant] : $int<1> := _b1// 1
    // ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    // 0 
    $constant $W[konst_275_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_277_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_280_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_285_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_295_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_305_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_315_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 111
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 113
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 115
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ZERO_16 $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 116
    $W[next_count_down_262_219_buffered] : $int<16>
    // count_down
    $W[count_down_217] : $int<16>
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 118
    // in_data_1
    $W[RPIPE_in_data_1_223_wire] : $int<32>
    // input_word
    $W[input_word_221] : $int<32>
    // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 120
    $W[next_last_dest_id_268_226_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_224] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 124
    // new_packet
    $W[new_packet_235] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // dest_id
    $W[dest_id_239] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 126
    // pkt_length
    $W[pkt_length_243] : $int<16>
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // seq_id
    $W[seq_id_247] : $int<8>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_257_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_260_wire] : $int<16>
    // next_count_down
    $W[next_count_down_262] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 130
    // next_last_dest_id
    $W[next_last_dest_id_268] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 131
    // data_to_outport
    $W[data_to_outport_273] : $int<33>
    // 			$volatile continue := ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 132
    // (next_last_dest_id - 1 )
    $intermediate $W[SUB_u8_u8_278_wire] : $int<8>
    // continue
    $W[continue_282] : $int<1>
    // 			EQ_u8_u1_286_286_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 133
    // EQ_u8_u1_286_286_delayed_4_0
    $W[EQ_u8_u1_286_286_delayed_4_0_287] : $int<1>
    // 			$volatile send_to_1 := (EQ_u8_u1_286_286_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 134
    // send_to_1
    $W[send_to_1_292] : $int<1>
    // 			EQ_u8_u1_293_293_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 135
    // EQ_u8_u1_293_293_delayed_4_0
    $W[EQ_u8_u1_293_293_delayed_4_0_297] : $int<1>
    // 			$volatile send_to_2 := (EQ_u8_u1_293_293_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 136
    // send_to_2
    $W[send_to_2_302] : $int<1>
    // 			EQ_u8_u1_300_300_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 137
    // EQ_u8_u1_300_300_delayed_4_0
    $W[EQ_u8_u1_300_300_delayed_4_0_307] : $int<1>
    // 			$volatile send_to_3 := (EQ_u8_u1_300_300_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 138
    // send_to_3
    $W[send_to_3_312] : $int<1>
    // 			EQ_u8_u1_307_307_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 139
    // EQ_u8_u1_307_307_delayed_4_0
    $W[EQ_u8_u1_307_307_delayed_4_0_317] : $int<1>
    // 			$volatile send_to_4 := (EQ_u8_u1_307_307_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 140
    // send_to_4
    $W[send_to_4_322] : $int<1>
    // 			data_to_outport_313_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 141
    // data_to_outport_313_delayed_4_0
    $W[data_to_outport_313_delayed_4_0_325] : $int<33>
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport_313_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 142
    // noblock_obuf_1_1
    // 			data_to_outport_317_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 143
    // data_to_outport_317_delayed_4_0
    $W[data_to_outport_317_delayed_4_0_332] : $int<33>
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport_317_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 144
    // noblock_obuf_1_2
    // 			data_to_outport_321_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 145
    // data_to_outport_321_delayed_4_0
    $W[data_to_outport_321_delayed_4_0_339] : $int<33>
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport_321_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 146
    // noblock_obuf_1_3
    // 			data_to_outport_325_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 147
    // data_to_outport_325_delayed_4_0
    $W[data_to_outport_325_delayed_4_0_346] : $int<33>
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport_325_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 148
    // noblock_obuf_1_4
    // datapath-instances for block %inputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 111
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 113
    ==0? [do_while_stmt_215_branch] (konst_362_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 115
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ZERO_16 $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 116
    # := [next_count_down_262_219_buf] (next_count_down_262) (next_count_down_262_219_buffered)   $in_phi    $fullrate
    $buffering $out next_count_down_262_219_buf next_count_down_262_219_buffered  1
    # $phi [phi_stmt_217] (next_count_down_262_219_buffered R_ZERO_16_220_wire_constant) ( count_down_217 ) $fullrate
    // $buffering  $out phi_stmt_217 count_down_217 2
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 118
    // in_data_1
    $ioport $in [RPIPE_in_data_1_223_inst] (in_data_1) (RPIPE_in_data_1_223_wire)  $fullrate 
    $buffering $out RPIPE_in_data_1_223_inst RPIPE_in_data_1_223_wire 1
    # := [ssrc_phi_stmt_221] (RPIPE_in_data_1_223_wire) (input_word_221)     $flowthrough 
    // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 120
    # := [next_last_dest_id_268_226_buf] (next_last_dest_id_268) (next_last_dest_id_268_226_buffered)   $in_phi    $fullrate
    $buffering $out next_last_dest_id_268_226_buf next_last_dest_id_268_226_buffered  1
    # $phi [phi_stmt_224] (next_last_dest_id_268_226_buffered konst_227_wire_constant) ( last_dest_id_224 ) $fullrate
    // $buffering  $out phi_stmt_224 last_dest_id_224 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 124
    // (count_down == 0 )
    ==[EQ_u16_u1_234_inst] (count_down_217 konst_233_wire_constant) (new_packet_235)   $flowthrough 
    $delay EQ_u16_u1_234_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 125
    // ( $slice input_word 31 24 ) 
    [:] [slice_238_inst] (input_word_221 31 24) (dest_id_239)  $flowthrough
    $delay slice_238_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 126
    // ( $slice input_word 23 8 ) 
    [:] [slice_242_inst] (input_word_221 23 8) (pkt_length_243)  $flowthrough
    $delay slice_242_inst 0
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 127
    // ( $slice input_word 7 0 ) 
    [:] [slice_246_inst] (input_word_221 7 0) (seq_id_247)  $flowthrough
    $delay slice_246_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 129
    // (pkt_length - 1 )
    -[SUB_u16_u16_257_inst] (pkt_length_243 konst_256_wire_constant) (SUB_u16_u16_257_wire)   $flowthrough 
    $delay SUB_u16_u16_257_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_260_inst] (count_down_217 konst_259_wire_constant) (SUB_u16_u16_260_wire)   $flowthrough 
    $delay SUB_u16_u16_260_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_261_inst] (new_packet_235 SUB_u16_u16_257_wire SUB_u16_u16_260_wire) (next_count_down_262)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 130
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_267_inst] (new_packet_235 dest_id_239 last_dest_id_224) (next_last_dest_id_268)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 131
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_272_inst] (R_ONE_1_270_wire_constant input_word_221) (data_to_outport_273)   $flowthrough 
    $delay CONCAT_u1_u33_272_inst 0
    // 			$volatile continue := ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 132
    // ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    //  file .Aa/switch2x2.opt.aa, line 132
    // (next_last_dest_id - 1 )
    -[SUB_u8_u8_278_inst] (next_last_dest_id_268 konst_277_wire_constant) (SUB_u8_u8_278_wire)   $flowthrough 
    $delay SUB_u8_u8_278_inst 0
    $call [call_updateCounter_expr_281_inst] $module updateCounter(konst_275_wire_constant SUB_u8_u8_278_wire type_cast_280_wire_constant) (continue_282)   $fullrate
    $delay call_updateCounter_expr_281_inst 4
    $buffering  $in call_updateCounter_expr_281_inst konst_275_wire_constant 1
    $buffering  $in call_updateCounter_expr_281_inst SUB_u8_u8_278_wire 1
    $buffering  $in call_updateCounter_expr_281_inst type_cast_280_wire_constant 1
    $buffering  $out call_updateCounter_expr_281_inst continue_282 1
    // 			EQ_u8_u1_286_286_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 133
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_286_inst] (next_last_dest_id_268 konst_285_wire_constant) (EQ_u8_u1_286_286_delayed_4_0_287)    $fullrate
    $buffering  $out EQ_u8_u1_286_inst EQ_u8_u1_286_286_delayed_4_0_287 4
    $delay EQ_u8_u1_286_inst 1
    // 			$volatile send_to_1 := (EQ_u8_u1_286_286_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 134
    // (EQ_u8_u1_286_286_delayed_4_0 & continue)
    &[AND_u1_u1_291_inst] (EQ_u8_u1_286_286_delayed_4_0_287 continue_282) (send_to_1_292)   $flowthrough 
    $delay AND_u1_u1_291_inst 0
    // 			EQ_u8_u1_293_293_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 135
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_296_inst] (next_last_dest_id_268 konst_295_wire_constant) (EQ_u8_u1_293_293_delayed_4_0_297)    $fullrate
    $buffering  $out EQ_u8_u1_296_inst EQ_u8_u1_293_293_delayed_4_0_297 4
    $delay EQ_u8_u1_296_inst 1
    // 			$volatile send_to_2 := (EQ_u8_u1_293_293_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 136
    // (EQ_u8_u1_293_293_delayed_4_0 & continue)
    &[AND_u1_u1_301_inst] (EQ_u8_u1_293_293_delayed_4_0_297 continue_282) (send_to_2_302)   $flowthrough 
    $delay AND_u1_u1_301_inst 0
    // 			EQ_u8_u1_300_300_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 137
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_306_inst] (next_last_dest_id_268 konst_305_wire_constant) (EQ_u8_u1_300_300_delayed_4_0_307)    $fullrate
    $buffering  $out EQ_u8_u1_306_inst EQ_u8_u1_300_300_delayed_4_0_307 4
    $delay EQ_u8_u1_306_inst 1
    // 			$volatile send_to_3 := (EQ_u8_u1_300_300_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 138
    // (EQ_u8_u1_300_300_delayed_4_0 & continue)
    &[AND_u1_u1_311_inst] (EQ_u8_u1_300_300_delayed_4_0_307 continue_282) (send_to_3_312)   $flowthrough 
    $delay AND_u1_u1_311_inst 0
    // 			EQ_u8_u1_307_307_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 139
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_316_inst] (next_last_dest_id_268 konst_315_wire_constant) (EQ_u8_u1_307_307_delayed_4_0_317)    $fullrate
    $buffering  $out EQ_u8_u1_316_inst EQ_u8_u1_307_307_delayed_4_0_317 4
    $delay EQ_u8_u1_316_inst 1
    // 			$volatile send_to_4 := (EQ_u8_u1_307_307_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 140
    // (EQ_u8_u1_307_307_delayed_4_0 & continue)
    &[AND_u1_u1_321_inst] (EQ_u8_u1_307_307_delayed_4_0_317 continue_282) (send_to_4_322)   $flowthrough 
    $delay AND_u1_u1_321_inst 0
    // 			data_to_outport_313_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 141
    # := [W_data_to_outport_313_delayed_4_0_323_inst] (data_to_outport_273) (data_to_outport_313_delayed_4_0_325)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_313_delayed_4_0_323_inst data_to_outport_313_delayed_4_0_325 4
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport_313_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 142
    // noblock_obuf_1_1
    $ioport $out [WPIPE_noblock_obuf_1_1_327_inst]  (data_to_outport_313_delayed_4_0_325) (noblock_obuf_1_1) $guard ( send_to_1_292 )  $fullrate 
    // 			data_to_outport_317_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 143
    # := [W_data_to_outport_317_delayed_4_0_330_inst] (data_to_outport_273) (data_to_outport_317_delayed_4_0_332)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_317_delayed_4_0_330_inst data_to_outport_317_delayed_4_0_332 4
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport_317_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 144
    // noblock_obuf_1_2
    $ioport $out [WPIPE_noblock_obuf_1_2_334_inst]  (data_to_outport_317_delayed_4_0_332) (noblock_obuf_1_2) $guard ( send_to_2_302 )  $fullrate 
    // 			data_to_outport_321_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 145
    # := [W_data_to_outport_321_delayed_4_0_337_inst] (data_to_outport_273) (data_to_outport_321_delayed_4_0_339)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_321_delayed_4_0_337_inst data_to_outport_321_delayed_4_0_339 4
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport_321_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 146
    // noblock_obuf_1_3
    $ioport $out [WPIPE_noblock_obuf_1_3_341_inst]  (data_to_outport_321_delayed_4_0_339) (noblock_obuf_1_3) $guard ( send_to_3_312 )  $fullrate 
    // 			data_to_outport_325_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 147
    # := [W_data_to_outport_325_delayed_4_0_344_inst] (data_to_outport_273) (data_to_outport_325_delayed_4_0_346)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_325_delayed_4_0_344_inst data_to_outport_325_delayed_4_0_346 4
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport_325_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 148
    // noblock_obuf_1_4
    $ioport $out [WPIPE_noblock_obuf_1_4_348_inst]  (data_to_outport_325_delayed_4_0_346) (noblock_obuf_1_4) $guard ( send_to_4_322 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_215
  //  file .Aa/switch2x2.opt.aa, line 113
  phi_stmt_217 <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_217_loopback_sample_req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_217_entry_sample_req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_217_phi_mux_ack)
  next_count_down_262_219_buf <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_count_down_219_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_count_down_219_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_count_down_219_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_count_down_219_Update/ack)
  // in_data_1
  RPIPE_in_data_1_223_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/RPIPE_in_data_1_223_Sample/rr branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/RPIPE_in_data_1_223_Update/cr) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/RPIPE_in_data_1_223_Sample/ra branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/RPIPE_in_data_1_223_Update/ca)
  phi_stmt_224 <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_224_loopback_sample_req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_224_entry_sample_req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/phi_stmt_224_phi_mux_ack)
  next_last_dest_id_268_226_buf <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_last_dest_id_226_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_last_dest_id_226_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_last_dest_id_226_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/R_next_last_dest_id_226_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 124
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 125
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 126
  // input_word
  // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 127
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 129
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 130
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 131
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile continue := ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 132
  // (next_last_dest_id - 1 )
  // next_last_dest_id
  // ( $call updateCounter (0  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
  call_updateCounter_expr_281_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/call_updateCounter_expr_281_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/call_updateCounter_expr_281_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/call_updateCounter_expr_281_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/call_updateCounter_expr_281_Update/ack)
  // 			EQ_u8_u1_286_286_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 133
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  EQ_u8_u1_286_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_286_Sample/rr branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_286_Update/cr) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_286_Sample/ra branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_286_Update/ca)
  // 			$volatile send_to_1 := (EQ_u8_u1_286_286_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 134
  // (EQ_u8_u1_286_286_delayed_4_0 & continue)
  // EQ_u8_u1_286_286_delayed_4_0
  // continue
  // 			EQ_u8_u1_293_293_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 135
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  EQ_u8_u1_296_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_296_Sample/rr branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_296_Update/cr) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_296_Sample/ra branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_296_Update/ca)
  // 			$volatile send_to_2 := (EQ_u8_u1_293_293_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 136
  // (EQ_u8_u1_293_293_delayed_4_0 & continue)
  // EQ_u8_u1_293_293_delayed_4_0
  // continue
  // 			EQ_u8_u1_300_300_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 137
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  EQ_u8_u1_306_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_306_Sample/rr branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_306_Update/cr) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_306_Sample/ra branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_306_Update/ca)
  // 			$volatile send_to_3 := (EQ_u8_u1_300_300_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 138
  // (EQ_u8_u1_300_300_delayed_4_0 & continue)
  // EQ_u8_u1_300_300_delayed_4_0
  // continue
  // 			EQ_u8_u1_307_307_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 139
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  EQ_u8_u1_316_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_316_Sample/rr branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_316_Update/cr) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_316_Sample/ra branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/EQ_u8_u1_316_Update/ca)
  // 			$volatile send_to_4 := (EQ_u8_u1_307_307_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 140
  // (EQ_u8_u1_307_307_delayed_4_0 & continue)
  // EQ_u8_u1_307_307_delayed_4_0
  // continue
  // 			data_to_outport_313_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 141
  // data_to_outport
  W_data_to_outport_313_delayed_4_0_323_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_325_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_325_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_325_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_325_Update/ack)
  // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport_313_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 142
  // data_to_outport_313_delayed_4_0
  // noblock_obuf_1_1
  WPIPE_noblock_obuf_1_1_327_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_1_327_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_1_327_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_1_327_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_1_327_Update/ack)
  // 			data_to_outport_317_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 143
  // data_to_outport
  W_data_to_outport_317_delayed_4_0_330_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_332_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_332_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_332_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_332_Update/ack)
  // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport_317_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 144
  // data_to_outport_317_delayed_4_0
  // noblock_obuf_1_2
  WPIPE_noblock_obuf_1_2_334_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_2_334_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_2_334_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_2_334_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_2_334_Update/ack)
  // 			data_to_outport_321_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 145
  // data_to_outport
  W_data_to_outport_321_delayed_4_0_337_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_339_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_339_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_339_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_339_Update/ack)
  // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport_321_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 146
  // data_to_outport_321_delayed_4_0
  // noblock_obuf_1_3
  WPIPE_noblock_obuf_1_3_341_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_3_341_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_3_341_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_3_341_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_3_341_Update/ack)
  // 			data_to_outport_325_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 147
  // data_to_outport
  W_data_to_outport_325_delayed_4_0_344_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_346_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_346_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_346_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/assign_stmt_346_Update/ack)
  // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport_325_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 148
  // data_to_outport_325_delayed_4_0
  // noblock_obuf_1_4
  WPIPE_noblock_obuf_1_4_348_inst <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_4_348_Sample/req branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_4_348_Update/req) (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_4_348_Sample/ack branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/WPIPE_noblock_obuf_1_4_348_Update/ack)
  do_while_stmt_215_branch <=> (branch_block_stmt_214/do_while_stmt_215/do_while_stmt_215_loop_body/condition_evaluated) (branch_block_stmt_214/do_while_stmt_215/loop_exit/ack branch_block_stmt_214/do_while_stmt_215/loop_taken/ack)
}
$module [inputPort_2_Daemon] 
{
  // pipe-declarations for block %inputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 153
  // pipe-declarations for block %inputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 158
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_366] // Branch Block  file .Aa/switch2x2.opt.aa, line 158
    {
      $P [branch_block_stmt_366__entry__]
      branch_block_stmt_366__entry__ <-| ($entry)
      $P [branch_block_stmt_366__exit__]
      branch_block_stmt_366__exit__ |-> ($exit)
      $P [do_while_stmt_367__entry__] 
      $P [do_while_stmt_367__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 160
      <o> [do_while_stmt_367]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_367__entry__] 
        $P[do_while_stmt_367__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_367_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_369
          // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_369_sample_start_] 
          $T[phi_stmt_369_sample_completed_] 
          $T[phi_stmt_369_update_start_] 
          $T[phi_stmt_369_update_completed_] 
          $T[phi_stmt_369_sample_start__ps] 
          phi_stmt_369_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_369_sample_completed__ps] 
          phi_stmt_369_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_369_update_start__ps] 
          phi_stmt_369_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_369_update_completed__ps] 
          phi_stmt_369_update_completed_ <-& (phi_stmt_369_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_369_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_369_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_369_update_start_)
          $T[phi_stmt_369_loopback_trigger] 
          phi_stmt_369_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_369_loopback_sample_req] 
          $T[phi_stmt_369_loopback_sample_req_ps] 
          phi_stmt_369_loopback_sample_req <-& (phi_stmt_369_loopback_sample_req_ps)
          phi_stmt_369_loopback_sample_req &-> ($null)
          $T[phi_stmt_369_entry_trigger] 
          phi_stmt_369_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_369_entry_sample_req] 
          $T[phi_stmt_369_entry_sample_req_ps] 
          phi_stmt_369_entry_sample_req <-& (phi_stmt_369_entry_sample_req_ps)
          phi_stmt_369_entry_sample_req &-> ($null)
          phi_stmt_369_update_start_ o<-& (phi_stmt_369_update_completed_ 0)
          phi_stmt_369_sample_start_ o<-& (phi_stmt_369_sample_completed_ 1)
          $T[phi_stmt_369_merged_reqs] 
          $T[phi_stmt_369_phi_mux_ack] 
          $T[phi_stmt_369_phi_mux_ack_ps] 
          phi_stmt_369_phi_mux_ack_ps <-& (phi_stmt_369_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_369_update_completed_)
          $T[R_ZERO_16_371_sample_start__ps] 
          $T[R_ZERO_16_371_sample_completed__ps] 
          $T[R_ZERO_16_371_update_start__ps] 
          $T[R_ZERO_16_371_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_371_sample_start_] 
          $T[R_ZERO_16_371_sample_completed_] 
          R_ZERO_16_371_sample_completed_ <-& (R_ZERO_16_371_sample_start_)
          $T[R_ZERO_16_371_update_start_] 
          $T [R_ZERO_16_371_update_completed_] $delay 
          R_ZERO_16_371_update_completed_ <-& (R_ZERO_16_371_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_371_sample_start_ <-& (R_ZERO_16_371_sample_start__ps)
          R_ZERO_16_371_update_start_ <-& (R_ZERO_16_371_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_371_sample_completed__ps <-& (R_ZERO_16_371_sample_completed_)
          R_ZERO_16_371_update_completed__ps <-& (R_ZERO_16_371_update_completed_)
          $T[R_next_count_down_372_sample_start__ps] 
          $T[R_next_count_down_372_sample_completed__ps] 
          $T[R_next_count_down_372_update_start__ps] 
          $T[R_next_count_down_372_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_372_sample_start_] 
          $T[R_next_count_down_372_sample_completed_] 
          $T[R_next_count_down_372_update_start_] 
          $T[R_next_count_down_372_update_completed_] 
          ;;[R_next_count_down_372_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_372_sample_start_ &-> (R_next_count_down_372_Sample)
          R_next_count_down_372_sample_completed_ <-& (R_next_count_down_372_Sample)
          ;;[R_next_count_down_372_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_372_update_start_ &-> (R_next_count_down_372_Update)
          R_next_count_down_372_update_completed_ <-& (R_next_count_down_372_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_372_sample_start_ <-& (R_next_count_down_372_sample_start__ps)
          R_next_count_down_372_update_start_ <-& (R_next_count_down_372_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_372_sample_completed__ps <-& (R_next_count_down_372_sample_completed_)
          R_next_count_down_372_update_completed__ps <-& (R_next_count_down_372_update_completed_)
          $phisequencer [ phi_stmt_369_phi_seq] : 
          phi_stmt_369_entry_trigger R_ZERO_16_371_sample_start__ps R_ZERO_16_371_sample_completed__ps R_ZERO_16_371_update_start__ps R_ZERO_16_371_update_completed__ps phi_stmt_369_loopback_trigger R_next_count_down_372_sample_start__ps R_next_count_down_372_sample_completed__ps R_next_count_down_372_update_start__ps R_next_count_down_372_update_completed__ps :
          phi_stmt_369_sample_start__ps phi_stmt_369_sample_completed__ps phi_stmt_369_update_start__ps phi_stmt_369_update_completed__ps :
          phi_stmt_369_entry_sample_req_ps phi_stmt_369_loopback_sample_req_ps : 
          phi_stmt_369_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_369
          // start:  single source PHI statement phi_stmt_373
          // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_373_sample_start_] 
          $T[phi_stmt_373_sample_completed_] 
          $T[phi_stmt_373_update_start_] 
          $T[phi_stmt_373_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_373_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_373_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_373_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_2
          $T[RPIPE_in_data_2_375_sample_start_] 
          $T[RPIPE_in_data_2_375_sample_completed_] 
          $T[RPIPE_in_data_2_375_update_start_] 
          $T[RPIPE_in_data_2_375_update_completed_] 
          ;;[RPIPE_in_data_2_375_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_2_375_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_2_375_sample_start_ &-> (RPIPE_in_data_2_375_Sample)
          RPIPE_in_data_2_375_sample_completed_ <-& (RPIPE_in_data_2_375_Sample)
          RPIPE_in_data_2_375_update_start_ <-& (RPIPE_in_data_2_375_sample_completed_)
          RPIPE_in_data_2_375_update_start_ &-> (RPIPE_in_data_2_375_Update)
          RPIPE_in_data_2_375_update_completed_ <-& (RPIPE_in_data_2_375_Update)
          RPIPE_in_data_2_375_sample_start_ o<-& (RPIPE_in_data_2_375_update_completed_ 0)
          // RAW reenables for in_data_2
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_2_375_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_2_375_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_2_375_update_start_)
          phi_stmt_373_update_completed_ <-& (RPIPE_in_data_2_375_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_373_update_completed_)
          // done: PHI Statement phi_stmt_373
          // start:  multi-source PHI statement phi_stmt_376
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_376_sample_start_] 
          $T[phi_stmt_376_sample_completed_] 
          $T[phi_stmt_376_update_start_] 
          $T[phi_stmt_376_update_completed_] 
          $T[phi_stmt_376_sample_start__ps] 
          phi_stmt_376_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_376_sample_completed__ps] 
          phi_stmt_376_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_376_update_start__ps] 
          phi_stmt_376_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_376_update_completed__ps] 
          phi_stmt_376_update_completed_ <-& (phi_stmt_376_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_376_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_376_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_376_update_start_)
          $T[phi_stmt_376_loopback_trigger] 
          phi_stmt_376_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_376_loopback_sample_req] 
          $T[phi_stmt_376_loopback_sample_req_ps] 
          phi_stmt_376_loopback_sample_req <-& (phi_stmt_376_loopback_sample_req_ps)
          phi_stmt_376_loopback_sample_req &-> ($null)
          $T[phi_stmt_376_entry_trigger] 
          phi_stmt_376_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_376_entry_sample_req] 
          $T[phi_stmt_376_entry_sample_req_ps] 
          phi_stmt_376_entry_sample_req <-& (phi_stmt_376_entry_sample_req_ps)
          phi_stmt_376_entry_sample_req &-> ($null)
          phi_stmt_376_update_start_ o<-& (phi_stmt_376_update_completed_ 0)
          phi_stmt_376_sample_start_ o<-& (phi_stmt_376_sample_completed_ 1)
          $T[phi_stmt_376_merged_reqs] 
          $T[phi_stmt_376_phi_mux_ack] 
          $T[phi_stmt_376_phi_mux_ack_ps] 
          phi_stmt_376_phi_mux_ack_ps <-& (phi_stmt_376_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_376_update_completed_)
          $T[konst_378_sample_start__ps] 
          $T[konst_378_sample_completed__ps] 
          $T[konst_378_update_start__ps] 
          $T[konst_378_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_378_sample_start_] 
          $T[konst_378_sample_completed_] 
          konst_378_sample_completed_ <-& (konst_378_sample_start_)
          $T[konst_378_update_start_] 
          $T [konst_378_update_completed_] $delay 
          konst_378_update_completed_ <-& (konst_378_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_378_sample_start_ <-& (konst_378_sample_start__ps)
          konst_378_update_start_ <-& (konst_378_update_start__ps)
          // Phi complete dependency.
          konst_378_sample_completed__ps <-& (konst_378_sample_completed_)
          konst_378_update_completed__ps <-& (konst_378_update_completed_)
          $T[R_next_last_dest_id_379_sample_start__ps] 
          $T[R_next_last_dest_id_379_sample_completed__ps] 
          $T[R_next_last_dest_id_379_update_start__ps] 
          $T[R_next_last_dest_id_379_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_379_sample_start_] 
          $T[R_next_last_dest_id_379_sample_completed_] 
          $T[R_next_last_dest_id_379_update_start_] 
          $T[R_next_last_dest_id_379_update_completed_] 
          ;;[R_next_last_dest_id_379_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_379_sample_start_ &-> (R_next_last_dest_id_379_Sample)
          R_next_last_dest_id_379_sample_completed_ <-& (R_next_last_dest_id_379_Sample)
          ;;[R_next_last_dest_id_379_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_379_update_start_ &-> (R_next_last_dest_id_379_Update)
          R_next_last_dest_id_379_update_completed_ <-& (R_next_last_dest_id_379_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_379_sample_start_ <-& (R_next_last_dest_id_379_sample_start__ps)
          R_next_last_dest_id_379_update_start_ <-& (R_next_last_dest_id_379_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_379_sample_completed__ps <-& (R_next_last_dest_id_379_sample_completed_)
          R_next_last_dest_id_379_update_completed__ps <-& (R_next_last_dest_id_379_update_completed_)
          $phisequencer [ phi_stmt_376_phi_seq] : 
          phi_stmt_376_entry_trigger konst_378_sample_start__ps konst_378_sample_completed__ps konst_378_update_start__ps konst_378_update_completed__ps phi_stmt_376_loopback_trigger R_next_last_dest_id_379_sample_start__ps R_next_last_dest_id_379_sample_completed__ps R_next_last_dest_id_379_update_start__ps R_next_last_dest_id_379_update_completed__ps :
          phi_stmt_376_sample_start__ps phi_stmt_376_sample_completed__ps phi_stmt_376_update_start__ps phi_stmt_376_update_completed__ps :
          phi_stmt_376_entry_sample_req_ps phi_stmt_376_loopback_sample_req_ps : 
          phi_stmt_376_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_376
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 171
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 172
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 173
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // start:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 174
          // volatile! 
          // Source expression
          // ( $slice input_word 7 0 ) 
          // input_word
          // Target expression
          // (as target) seq_id
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // end:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 176
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 177
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 178
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for continue
          // ignored out-of-scope w_root ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          // done: WAR dependencies for continue
          // start:  			$volatile continue := ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 179
          // volatile! 
          // Source expression
          // ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          $T[call_updateCounter_expr_433_sample_start_] 
          $T[call_updateCounter_expr_433_sample_completed_] 
          $T[call_updateCounter_expr_433_update_start_] 
          $T[call_updateCounter_expr_433_update_completed_] 
          // (next_last_dest_id - 1 )
          // next_last_dest_id
          // start: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_433_sample_start_
          call_updateCounter_expr_433_sample_start_ <-& (phi_stmt_369_update_completed_)
          call_updateCounter_expr_433_sample_start_ <-& (phi_stmt_373_update_completed_)
          call_updateCounter_expr_433_sample_start_ <-& (phi_stmt_376_update_completed_)
          // done: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_433_sample_start_
          // RAW reenables for (next_last_dest_id - 1 )
          phi_stmt_369_update_start_ o<-& (call_updateCounter_expr_433_sample_completed_ 0)
          phi_stmt_373_update_start_ o<-& (call_updateCounter_expr_433_sample_completed_ 0)
          phi_stmt_376_update_start_ o<-& (call_updateCounter_expr_433_sample_completed_ 0)
          ;;[call_updateCounter_expr_433_Sample] 
          {
            // fn-call expression 
            $T [req] $T [ack]  // (split) fn-call binary operation 
          }
          ;;[call_updateCounter_expr_433_Update] 
          {
            // fn-call binary expression 
            $T [req] $T [ack] // (split) fn-call binary operation 
          }
          call_updateCounter_expr_433_sample_start_ &-> (call_updateCounter_expr_433_Sample)
          call_updateCounter_expr_433_sample_completed_ <-& (call_updateCounter_expr_433_Sample)
          call_updateCounter_expr_433_sample_completed_ &-> ($null)
          call_updateCounter_expr_433_update_start_ &-> (call_updateCounter_expr_433_Update)
          call_updateCounter_expr_433_update_completed_ <-& (call_updateCounter_expr_433_Update)
          // self-release: 
          call_updateCounter_expr_433_sample_start_ o<-& (call_updateCounter_expr_433_sample_completed_ 1)
          $null &-> (call_updateCounter_expr_433_update_start_)
          call_updateCounter_expr_433_update_start_ o<-& (call_updateCounter_expr_433_update_completed_ 0)
          // Target expression
          // (as target) continue
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end:  			$volatile continue := ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          // start:  			EQ_u8_u1_414_414_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 180
          // Source expression
          // (next_last_dest_id == 1 )
          $T[EQ_u8_u1_438_sample_start_] 
          $T[EQ_u8_u1_438_sample_completed_] 
          $T[EQ_u8_u1_438_update_start_] 
          $T[EQ_u8_u1_438_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_438_sample_start_
          EQ_u8_u1_438_sample_start_ <-& (phi_stmt_369_update_completed_)
          EQ_u8_u1_438_sample_start_ <-& (phi_stmt_373_update_completed_)
          EQ_u8_u1_438_sample_start_ <-& (phi_stmt_376_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_438_sample_start_
          ;;[EQ_u8_u1_438_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_438_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_438_sample_start_ &-> (EQ_u8_u1_438_Sample)
          EQ_u8_u1_438_sample_completed_ <-& (EQ_u8_u1_438_Sample)
          EQ_u8_u1_438_sample_completed_ &-> ($null)
          EQ_u8_u1_438_update_start_ &-> (EQ_u8_u1_438_Update)
          EQ_u8_u1_438_update_completed_ <-& (EQ_u8_u1_438_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_369_update_start_ o<-& (EQ_u8_u1_438_sample_completed_ 0)
          phi_stmt_373_update_start_ o<-& (EQ_u8_u1_438_sample_completed_ 0)
          phi_stmt_376_update_start_ o<-& (EQ_u8_u1_438_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_438_sample_start_ o<-& (EQ_u8_u1_438_sample_completed_ 1)
          $null &-> (EQ_u8_u1_438_update_start_)
          EQ_u8_u1_438_update_start_ o<-& (EQ_u8_u1_438_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_414_414_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_414_414_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_414_414_delayed_4_0
          // end:  			EQ_u8_u1_414_414_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (EQ_u8_u1_414_414_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 181
          // volatile! 
          // Source expression
          // (EQ_u8_u1_414_414_delayed_4_0 & continue)
          // EQ_u8_u1_414_414_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (EQ_u8_u1_414_414_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_421_421_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 182
          // Source expression
          // (next_last_dest_id == 2 )
          $T[EQ_u8_u1_448_sample_start_] 
          $T[EQ_u8_u1_448_sample_completed_] 
          $T[EQ_u8_u1_448_update_start_] 
          $T[EQ_u8_u1_448_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_448_sample_start_
          EQ_u8_u1_448_sample_start_ <-& (phi_stmt_369_update_completed_)
          EQ_u8_u1_448_sample_start_ <-& (phi_stmt_373_update_completed_)
          EQ_u8_u1_448_sample_start_ <-& (phi_stmt_376_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_448_sample_start_
          ;;[EQ_u8_u1_448_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_448_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_448_sample_start_ &-> (EQ_u8_u1_448_Sample)
          EQ_u8_u1_448_sample_completed_ <-& (EQ_u8_u1_448_Sample)
          EQ_u8_u1_448_sample_completed_ &-> ($null)
          EQ_u8_u1_448_update_start_ &-> (EQ_u8_u1_448_Update)
          EQ_u8_u1_448_update_completed_ <-& (EQ_u8_u1_448_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_369_update_start_ o<-& (EQ_u8_u1_448_sample_completed_ 0)
          phi_stmt_373_update_start_ o<-& (EQ_u8_u1_448_sample_completed_ 0)
          phi_stmt_376_update_start_ o<-& (EQ_u8_u1_448_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_448_sample_start_ o<-& (EQ_u8_u1_448_sample_completed_ 1)
          $null &-> (EQ_u8_u1_448_update_start_)
          EQ_u8_u1_448_update_start_ o<-& (EQ_u8_u1_448_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_421_421_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_421_421_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_421_421_delayed_4_0
          // end:  			EQ_u8_u1_421_421_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (EQ_u8_u1_421_421_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 183
          // volatile! 
          // Source expression
          // (EQ_u8_u1_421_421_delayed_4_0 & continue)
          // EQ_u8_u1_421_421_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (EQ_u8_u1_421_421_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_428_428_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 184
          // Source expression
          // (next_last_dest_id == 3 )
          $T[EQ_u8_u1_458_sample_start_] 
          $T[EQ_u8_u1_458_sample_completed_] 
          $T[EQ_u8_u1_458_update_start_] 
          $T[EQ_u8_u1_458_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_458_sample_start_
          EQ_u8_u1_458_sample_start_ <-& (phi_stmt_369_update_completed_)
          EQ_u8_u1_458_sample_start_ <-& (phi_stmt_373_update_completed_)
          EQ_u8_u1_458_sample_start_ <-& (phi_stmt_376_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_458_sample_start_
          ;;[EQ_u8_u1_458_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_458_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_458_sample_start_ &-> (EQ_u8_u1_458_Sample)
          EQ_u8_u1_458_sample_completed_ <-& (EQ_u8_u1_458_Sample)
          EQ_u8_u1_458_sample_completed_ &-> ($null)
          EQ_u8_u1_458_update_start_ &-> (EQ_u8_u1_458_Update)
          EQ_u8_u1_458_update_completed_ <-& (EQ_u8_u1_458_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_369_update_start_ o<-& (EQ_u8_u1_458_sample_completed_ 0)
          phi_stmt_373_update_start_ o<-& (EQ_u8_u1_458_sample_completed_ 0)
          phi_stmt_376_update_start_ o<-& (EQ_u8_u1_458_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_458_sample_start_ o<-& (EQ_u8_u1_458_sample_completed_ 1)
          $null &-> (EQ_u8_u1_458_update_start_)
          EQ_u8_u1_458_update_start_ o<-& (EQ_u8_u1_458_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_428_428_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_428_428_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_428_428_delayed_4_0
          // end:  			EQ_u8_u1_428_428_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (EQ_u8_u1_428_428_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 185
          // volatile! 
          // Source expression
          // (EQ_u8_u1_428_428_delayed_4_0 & continue)
          // EQ_u8_u1_428_428_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (EQ_u8_u1_428_428_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_435_435_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 186
          // Source expression
          // (next_last_dest_id == 4 )
          $T[EQ_u8_u1_468_sample_start_] 
          $T[EQ_u8_u1_468_sample_completed_] 
          $T[EQ_u8_u1_468_update_start_] 
          $T[EQ_u8_u1_468_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_468_sample_start_
          EQ_u8_u1_468_sample_start_ <-& (phi_stmt_369_update_completed_)
          EQ_u8_u1_468_sample_start_ <-& (phi_stmt_373_update_completed_)
          EQ_u8_u1_468_sample_start_ <-& (phi_stmt_376_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_468_sample_start_
          ;;[EQ_u8_u1_468_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_468_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_468_sample_start_ &-> (EQ_u8_u1_468_Sample)
          EQ_u8_u1_468_sample_completed_ <-& (EQ_u8_u1_468_Sample)
          EQ_u8_u1_468_sample_completed_ &-> ($null)
          EQ_u8_u1_468_update_start_ &-> (EQ_u8_u1_468_Update)
          EQ_u8_u1_468_update_completed_ <-& (EQ_u8_u1_468_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_369_update_start_ o<-& (EQ_u8_u1_468_sample_completed_ 0)
          phi_stmt_373_update_start_ o<-& (EQ_u8_u1_468_sample_completed_ 0)
          phi_stmt_376_update_start_ o<-& (EQ_u8_u1_468_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_468_sample_start_ o<-& (EQ_u8_u1_468_sample_completed_ 1)
          $null &-> (EQ_u8_u1_468_update_start_)
          EQ_u8_u1_468_update_start_ o<-& (EQ_u8_u1_468_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_435_435_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_435_435_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_435_435_delayed_4_0
          // end:  			EQ_u8_u1_435_435_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (EQ_u8_u1_435_435_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 187
          // volatile! 
          // Source expression
          // (EQ_u8_u1_435_435_delayed_4_0 & continue)
          // EQ_u8_u1_435_435_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (EQ_u8_u1_435_435_delayed_4_0 & continue) $buffering 1
          // start:  			data_to_outport_441_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 188
          $T[assign_stmt_477_sample_start_] 
          $T[assign_stmt_477_sample_completed_] 
          $T[assign_stmt_477_update_start_] 
          $T[assign_stmt_477_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_441_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_477_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_477_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_477_sample_start_ &-> (assign_stmt_477_Sample)
          assign_stmt_477_sample_completed_ <-& (assign_stmt_477_Sample)
          assign_stmt_477_sample_completed_ &-> ($null)
          assign_stmt_477_update_start_ &-> (assign_stmt_477_Update)
          assign_stmt_477_update_completed_ <-& (assign_stmt_477_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_477_sample_start_
          assign_stmt_477_sample_start_ <-& (phi_stmt_373_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_477_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_373_update_start_ o<-& (assign_stmt_477_sample_completed_ 0)
          // self-release: 
          assign_stmt_477_sample_start_ o<-& (assign_stmt_477_sample_completed_ 1)
          $null &-> (assign_stmt_477_update_start_)
          assign_stmt_477_update_start_ o<-& (assign_stmt_477_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_441_delayed_4_0
          // done: WAR dependencies for data_to_outport_441_delayed_4_0
          // end:  			data_to_outport_441_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport_441_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 189
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport_441_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_2_1
          $T[WPIPE_noblock_obuf_2_1_479_sample_start_] 
          $T[WPIPE_noblock_obuf_2_1_479_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_1_479_update_start_] 
          $T[WPIPE_noblock_obuf_2_1_479_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_1_479 with guard R_send_to_1_478
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_1_479_sample_start_ <-& (call_updateCounter_expr_433_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_1_479_sample_start_ <-& (EQ_u8_u1_438_update_completed_)
          // RAW reenables for send_to_1
          call_updateCounter_expr_433_update_start_ o<-& (WPIPE_noblock_obuf_2_1_479_sample_completed_ 0)
          EQ_u8_u1_438_update_start_ o<-& (WPIPE_noblock_obuf_2_1_479_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_1_479_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_1_479_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_1_479_sample_start_ &-> (WPIPE_noblock_obuf_2_1_479_Sample)
          WPIPE_noblock_obuf_2_1_479_sample_completed_ <-& (WPIPE_noblock_obuf_2_1_479_Sample)
          WPIPE_noblock_obuf_2_1_479_update_start_ <-& (WPIPE_noblock_obuf_2_1_479_sample_completed_)
          WPIPE_noblock_obuf_2_1_479_update_start_ &-> (WPIPE_noblock_obuf_2_1_479_Update)
          WPIPE_noblock_obuf_2_1_479_update_completed_ <-& (WPIPE_noblock_obuf_2_1_479_Update)
          WPIPE_noblock_obuf_2_1_479_sample_start_ o<-& (WPIPE_noblock_obuf_2_1_479_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_441_delayed_4_0 to transition WPIPE_noblock_obuf_2_1_479_sample_start_
          WPIPE_noblock_obuf_2_1_479_sample_start_ <-& (assign_stmt_477_update_completed_)
          // done: Forward dependencies from data_to_outport_441_delayed_4_0 to transition WPIPE_noblock_obuf_2_1_479_sample_start_
          // RAW reenables for data_to_outport_441_delayed_4_0
          assign_stmt_477_update_start_ o<-& (WPIPE_noblock_obuf_2_1_479_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport_441_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_445_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 190
          $T[assign_stmt_484_sample_start_] 
          $T[assign_stmt_484_sample_completed_] 
          $T[assign_stmt_484_update_start_] 
          $T[assign_stmt_484_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_445_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_484_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_484_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_484_sample_start_ &-> (assign_stmt_484_Sample)
          assign_stmt_484_sample_completed_ <-& (assign_stmt_484_Sample)
          assign_stmt_484_sample_completed_ &-> ($null)
          assign_stmt_484_update_start_ &-> (assign_stmt_484_Update)
          assign_stmt_484_update_completed_ <-& (assign_stmt_484_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_484_sample_start_
          assign_stmt_484_sample_start_ <-& (phi_stmt_373_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_484_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_373_update_start_ o<-& (assign_stmt_484_sample_completed_ 0)
          // self-release: 
          assign_stmt_484_sample_start_ o<-& (assign_stmt_484_sample_completed_ 1)
          $null &-> (assign_stmt_484_update_start_)
          assign_stmt_484_update_start_ o<-& (assign_stmt_484_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_445_delayed_4_0
          // done: WAR dependencies for data_to_outport_445_delayed_4_0
          // end:  			data_to_outport_445_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport_445_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 191
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport_445_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_2_2
          $T[WPIPE_noblock_obuf_2_2_486_sample_start_] 
          $T[WPIPE_noblock_obuf_2_2_486_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_2_486_update_start_] 
          $T[WPIPE_noblock_obuf_2_2_486_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_2_486 with guard R_send_to_2_485
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_2_486_sample_start_ <-& (call_updateCounter_expr_433_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_2_486_sample_start_ <-& (EQ_u8_u1_448_update_completed_)
          // RAW reenables for send_to_2
          call_updateCounter_expr_433_update_start_ o<-& (WPIPE_noblock_obuf_2_2_486_sample_completed_ 0)
          EQ_u8_u1_448_update_start_ o<-& (WPIPE_noblock_obuf_2_2_486_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_2_486_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_2_486_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_2_486_sample_start_ &-> (WPIPE_noblock_obuf_2_2_486_Sample)
          WPIPE_noblock_obuf_2_2_486_sample_completed_ <-& (WPIPE_noblock_obuf_2_2_486_Sample)
          WPIPE_noblock_obuf_2_2_486_update_start_ <-& (WPIPE_noblock_obuf_2_2_486_sample_completed_)
          WPIPE_noblock_obuf_2_2_486_update_start_ &-> (WPIPE_noblock_obuf_2_2_486_Update)
          WPIPE_noblock_obuf_2_2_486_update_completed_ <-& (WPIPE_noblock_obuf_2_2_486_Update)
          WPIPE_noblock_obuf_2_2_486_sample_start_ o<-& (WPIPE_noblock_obuf_2_2_486_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_445_delayed_4_0 to transition WPIPE_noblock_obuf_2_2_486_sample_start_
          WPIPE_noblock_obuf_2_2_486_sample_start_ <-& (assign_stmt_484_update_completed_)
          // done: Forward dependencies from data_to_outport_445_delayed_4_0 to transition WPIPE_noblock_obuf_2_2_486_sample_start_
          // RAW reenables for data_to_outport_445_delayed_4_0
          assign_stmt_484_update_start_ o<-& (WPIPE_noblock_obuf_2_2_486_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport_445_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_449_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 192
          $T[assign_stmt_491_sample_start_] 
          $T[assign_stmt_491_sample_completed_] 
          $T[assign_stmt_491_update_start_] 
          $T[assign_stmt_491_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_449_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_491_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_491_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_491_sample_start_ &-> (assign_stmt_491_Sample)
          assign_stmt_491_sample_completed_ <-& (assign_stmt_491_Sample)
          assign_stmt_491_sample_completed_ &-> ($null)
          assign_stmt_491_update_start_ &-> (assign_stmt_491_Update)
          assign_stmt_491_update_completed_ <-& (assign_stmt_491_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_491_sample_start_
          assign_stmt_491_sample_start_ <-& (phi_stmt_373_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_491_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_373_update_start_ o<-& (assign_stmt_491_sample_completed_ 0)
          // self-release: 
          assign_stmt_491_sample_start_ o<-& (assign_stmt_491_sample_completed_ 1)
          $null &-> (assign_stmt_491_update_start_)
          assign_stmt_491_update_start_ o<-& (assign_stmt_491_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_449_delayed_4_0
          // done: WAR dependencies for data_to_outport_449_delayed_4_0
          // end:  			data_to_outport_449_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport_449_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 193
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport_449_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_2_3
          $T[WPIPE_noblock_obuf_2_3_493_sample_start_] 
          $T[WPIPE_noblock_obuf_2_3_493_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_3_493_update_start_] 
          $T[WPIPE_noblock_obuf_2_3_493_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_3_493 with guard R_send_to_3_492
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_3_493_sample_start_ <-& (call_updateCounter_expr_433_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_3_493_sample_start_ <-& (EQ_u8_u1_458_update_completed_)
          // RAW reenables for send_to_3
          call_updateCounter_expr_433_update_start_ o<-& (WPIPE_noblock_obuf_2_3_493_sample_completed_ 0)
          EQ_u8_u1_458_update_start_ o<-& (WPIPE_noblock_obuf_2_3_493_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_3_493_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_3_493_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_3_493_sample_start_ &-> (WPIPE_noblock_obuf_2_3_493_Sample)
          WPIPE_noblock_obuf_2_3_493_sample_completed_ <-& (WPIPE_noblock_obuf_2_3_493_Sample)
          WPIPE_noblock_obuf_2_3_493_update_start_ <-& (WPIPE_noblock_obuf_2_3_493_sample_completed_)
          WPIPE_noblock_obuf_2_3_493_update_start_ &-> (WPIPE_noblock_obuf_2_3_493_Update)
          WPIPE_noblock_obuf_2_3_493_update_completed_ <-& (WPIPE_noblock_obuf_2_3_493_Update)
          WPIPE_noblock_obuf_2_3_493_sample_start_ o<-& (WPIPE_noblock_obuf_2_3_493_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_449_delayed_4_0 to transition WPIPE_noblock_obuf_2_3_493_sample_start_
          WPIPE_noblock_obuf_2_3_493_sample_start_ <-& (assign_stmt_491_update_completed_)
          // done: Forward dependencies from data_to_outport_449_delayed_4_0 to transition WPIPE_noblock_obuf_2_3_493_sample_start_
          // RAW reenables for data_to_outport_449_delayed_4_0
          assign_stmt_491_update_start_ o<-& (WPIPE_noblock_obuf_2_3_493_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport_449_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_453_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 194
          $T[assign_stmt_498_sample_start_] 
          $T[assign_stmt_498_sample_completed_] 
          $T[assign_stmt_498_update_start_] 
          $T[assign_stmt_498_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_453_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_498_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_498_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_498_sample_start_ &-> (assign_stmt_498_Sample)
          assign_stmt_498_sample_completed_ <-& (assign_stmt_498_Sample)
          assign_stmt_498_sample_completed_ &-> ($null)
          assign_stmt_498_update_start_ &-> (assign_stmt_498_Update)
          assign_stmt_498_update_completed_ <-& (assign_stmt_498_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_498_sample_start_
          assign_stmt_498_sample_start_ <-& (phi_stmt_373_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_498_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_373_update_start_ o<-& (assign_stmt_498_sample_completed_ 0)
          // self-release: 
          assign_stmt_498_sample_start_ o<-& (assign_stmt_498_sample_completed_ 1)
          $null &-> (assign_stmt_498_update_start_)
          assign_stmt_498_update_start_ o<-& (assign_stmt_498_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_453_delayed_4_0
          // done: WAR dependencies for data_to_outport_453_delayed_4_0
          // end:  			data_to_outport_453_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport_453_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 195
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport_453_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_2_4
          $T[WPIPE_noblock_obuf_2_4_500_sample_start_] 
          $T[WPIPE_noblock_obuf_2_4_500_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_4_500_update_start_] 
          $T[WPIPE_noblock_obuf_2_4_500_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_4_500 with guard R_send_to_4_499
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_4_500_sample_start_ <-& (call_updateCounter_expr_433_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_2_4_500_sample_start_ <-& (EQ_u8_u1_468_update_completed_)
          // RAW reenables for send_to_4
          call_updateCounter_expr_433_update_start_ o<-& (WPIPE_noblock_obuf_2_4_500_sample_completed_ 0)
          EQ_u8_u1_468_update_start_ o<-& (WPIPE_noblock_obuf_2_4_500_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_4_500_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_4_500_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_4_500_sample_start_ &-> (WPIPE_noblock_obuf_2_4_500_Sample)
          WPIPE_noblock_obuf_2_4_500_sample_completed_ <-& (WPIPE_noblock_obuf_2_4_500_Sample)
          WPIPE_noblock_obuf_2_4_500_update_start_ <-& (WPIPE_noblock_obuf_2_4_500_sample_completed_)
          WPIPE_noblock_obuf_2_4_500_update_start_ &-> (WPIPE_noblock_obuf_2_4_500_Update)
          WPIPE_noblock_obuf_2_4_500_update_completed_ <-& (WPIPE_noblock_obuf_2_4_500_Update)
          WPIPE_noblock_obuf_2_4_500_sample_start_ o<-& (WPIPE_noblock_obuf_2_4_500_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_453_delayed_4_0 to transition WPIPE_noblock_obuf_2_4_500_sample_start_
          WPIPE_noblock_obuf_2_4_500_sample_start_ <-& (assign_stmt_498_update_completed_)
          // done: Forward dependencies from data_to_outport_453_delayed_4_0 to transition WPIPE_noblock_obuf_2_4_500_sample_start_
          // RAW reenables for data_to_outport_453_delayed_4_0
          assign_stmt_498_update_start_ o<-& (WPIPE_noblock_obuf_2_4_500_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport_453_delayed_4_0 $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_updateCounter_expr_433 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data_2
          // read-dependencies for pipe in_data_2
          // write-dependencies for pipe in_data_2
          // signal write dependencies for in_data_2
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_367__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_367_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_367__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_367_loop_body : condition_evaluated
        $bind do_while_stmt_367__entry__  => do_while_stmt_367_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_367_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_367__exit__)
      }
      do_while_stmt_367__entry__ |-> (do_while_stmt_367)
      do_while_stmt_367__exit__ <-| (do_while_stmt_367)
      do_while_stmt_367__entry__ <-| (branch_block_stmt_366__entry__)
      do_while_stmt_367__exit__ |-> (branch_block_stmt_366__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 162
    // constant-object-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 158
    // constant-object-declarations for block %inputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 153
    // constant-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 158
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 160
    // 1 
    $constant $W[konst_514_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 162
    // constant-declarations for phi:  			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 163
    // ZERO_16
    $constant $W[R_ZERO_16_371_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 165
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 167
    // 0 
    $constant $W[konst_378_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_385_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_408_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_411_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_422_wire_constant] : $int<1> := _b1// 1
    // ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    // 1 
    $constant $W[konst_427_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_429_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_432_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_437_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_447_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_457_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_467_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 158
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 160
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 162
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 163
    $W[next_count_down_414_372_buffered] : $int<16>
    // count_down
    $W[count_down_369] : $int<16>
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 165
    // in_data_2
    $W[RPIPE_in_data_2_375_wire] : $int<32>
    // input_word
    $W[input_word_373] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 167
    $W[next_last_dest_id_420_379_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_376] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 171
    // new_packet
    $W[new_packet_387] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 172
    // dest_id
    $W[dest_id_391] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 173
    // pkt_length
    $W[pkt_length_395] : $int<16>
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 174
    // seq_id
    $W[seq_id_399] : $int<8>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 176
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_409_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_412_wire] : $int<16>
    // next_count_down
    $W[next_count_down_414] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 177
    // next_last_dest_id
    $W[next_last_dest_id_420] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 178
    // data_to_outport
    $W[data_to_outport_425] : $int<33>
    // 			$volatile continue := ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 179
    // (next_last_dest_id - 1 )
    $intermediate $W[SUB_u8_u8_430_wire] : $int<8>
    // continue
    $W[continue_434] : $int<1>
    // 			EQ_u8_u1_414_414_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 180
    // EQ_u8_u1_414_414_delayed_4_0
    $W[EQ_u8_u1_414_414_delayed_4_0_439] : $int<1>
    // 			$volatile send_to_1 := (EQ_u8_u1_414_414_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 181
    // send_to_1
    $W[send_to_1_444] : $int<1>
    // 			EQ_u8_u1_421_421_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 182
    // EQ_u8_u1_421_421_delayed_4_0
    $W[EQ_u8_u1_421_421_delayed_4_0_449] : $int<1>
    // 			$volatile send_to_2 := (EQ_u8_u1_421_421_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 183
    // send_to_2
    $W[send_to_2_454] : $int<1>
    // 			EQ_u8_u1_428_428_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 184
    // EQ_u8_u1_428_428_delayed_4_0
    $W[EQ_u8_u1_428_428_delayed_4_0_459] : $int<1>
    // 			$volatile send_to_3 := (EQ_u8_u1_428_428_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // send_to_3
    $W[send_to_3_464] : $int<1>
    // 			EQ_u8_u1_435_435_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 186
    // EQ_u8_u1_435_435_delayed_4_0
    $W[EQ_u8_u1_435_435_delayed_4_0_469] : $int<1>
    // 			$volatile send_to_4 := (EQ_u8_u1_435_435_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // send_to_4
    $W[send_to_4_474] : $int<1>
    // 			data_to_outport_441_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 188
    // data_to_outport_441_delayed_4_0
    $W[data_to_outport_441_delayed_4_0_477] : $int<33>
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport_441_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 189
    // noblock_obuf_2_1
    // 			data_to_outport_445_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 190
    // data_to_outport_445_delayed_4_0
    $W[data_to_outport_445_delayed_4_0_484] : $int<33>
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport_445_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 191
    // noblock_obuf_2_2
    // 			data_to_outport_449_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 192
    // data_to_outport_449_delayed_4_0
    $W[data_to_outport_449_delayed_4_0_491] : $int<33>
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport_449_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 193
    // noblock_obuf_2_3
    // 			data_to_outport_453_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 194
    // data_to_outport_453_delayed_4_0
    $W[data_to_outport_453_delayed_4_0_498] : $int<33>
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport_453_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 195
    // noblock_obuf_2_4
    // datapath-instances for block %inputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 158
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 160
    ==0? [do_while_stmt_367_branch] (konst_514_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 162
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 163
    # := [next_count_down_414_372_buf] (next_count_down_414) (next_count_down_414_372_buffered)   $in_phi    $fullrate
    $buffering $out next_count_down_414_372_buf next_count_down_414_372_buffered  1
    # $phi [phi_stmt_369] (R_ZERO_16_371_wire_constant next_count_down_414_372_buffered) ( count_down_369 ) $fullrate
    // $buffering  $out phi_stmt_369 count_down_369 2
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 165
    // in_data_2
    $ioport $in [RPIPE_in_data_2_375_inst] (in_data_2) (RPIPE_in_data_2_375_wire)  $fullrate 
    $buffering $out RPIPE_in_data_2_375_inst RPIPE_in_data_2_375_wire 1
    # := [ssrc_phi_stmt_373] (RPIPE_in_data_2_375_wire) (input_word_373)     $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 167
    # := [next_last_dest_id_420_379_buf] (next_last_dest_id_420) (next_last_dest_id_420_379_buffered)   $in_phi    $fullrate
    $buffering $out next_last_dest_id_420_379_buf next_last_dest_id_420_379_buffered  1
    # $phi [phi_stmt_376] (konst_378_wire_constant next_last_dest_id_420_379_buffered) ( last_dest_id_376 ) $fullrate
    // $buffering  $out phi_stmt_376 last_dest_id_376 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 171
    // (count_down == 0 )
    ==[EQ_u16_u1_386_inst] (count_down_369 konst_385_wire_constant) (new_packet_387)   $flowthrough 
    $delay EQ_u16_u1_386_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 172
    // ( $slice input_word 31 24 ) 
    [:] [slice_390_inst] (input_word_373 31 24) (dest_id_391)  $flowthrough
    $delay slice_390_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 173
    // ( $slice input_word 23 8 ) 
    [:] [slice_394_inst] (input_word_373 23 8) (pkt_length_395)  $flowthrough
    $delay slice_394_inst 0
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 174
    // ( $slice input_word 7 0 ) 
    [:] [slice_398_inst] (input_word_373 7 0) (seq_id_399)  $flowthrough
    $delay slice_398_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 176
    // (pkt_length - 1 )
    -[SUB_u16_u16_409_inst] (pkt_length_395 konst_408_wire_constant) (SUB_u16_u16_409_wire)   $flowthrough 
    $delay SUB_u16_u16_409_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_412_inst] (count_down_369 konst_411_wire_constant) (SUB_u16_u16_412_wire)   $flowthrough 
    $delay SUB_u16_u16_412_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_413_inst] (new_packet_387 SUB_u16_u16_409_wire SUB_u16_u16_412_wire) (next_count_down_414)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 177
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_419_inst] (new_packet_387 dest_id_391 last_dest_id_376) (next_last_dest_id_420)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 178
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_424_inst] (R_ONE_1_422_wire_constant input_word_373) (data_to_outport_425)   $flowthrough 
    $delay CONCAT_u1_u33_424_inst 0
    // 			$volatile continue := ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 179
    // ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    //  file .Aa/switch2x2.opt.aa, line 179
    // (next_last_dest_id - 1 )
    -[SUB_u8_u8_430_inst] (next_last_dest_id_420 konst_429_wire_constant) (SUB_u8_u8_430_wire)   $flowthrough 
    $delay SUB_u8_u8_430_inst 0
    $call [call_updateCounter_expr_433_inst] $module updateCounter(konst_427_wire_constant SUB_u8_u8_430_wire type_cast_432_wire_constant) (continue_434)   $fullrate
    $delay call_updateCounter_expr_433_inst 4
    $buffering  $in call_updateCounter_expr_433_inst konst_427_wire_constant 1
    $buffering  $in call_updateCounter_expr_433_inst SUB_u8_u8_430_wire 1
    $buffering  $in call_updateCounter_expr_433_inst type_cast_432_wire_constant 1
    $buffering  $out call_updateCounter_expr_433_inst continue_434 1
    // 			EQ_u8_u1_414_414_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 180
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_438_inst] (next_last_dest_id_420 konst_437_wire_constant) (EQ_u8_u1_414_414_delayed_4_0_439)    $fullrate
    $buffering  $out EQ_u8_u1_438_inst EQ_u8_u1_414_414_delayed_4_0_439 4
    $delay EQ_u8_u1_438_inst 1
    // 			$volatile send_to_1 := (EQ_u8_u1_414_414_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 181
    // (EQ_u8_u1_414_414_delayed_4_0 & continue)
    &[AND_u1_u1_443_inst] (EQ_u8_u1_414_414_delayed_4_0_439 continue_434) (send_to_1_444)   $flowthrough 
    $delay AND_u1_u1_443_inst 0
    // 			EQ_u8_u1_421_421_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 182
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_448_inst] (next_last_dest_id_420 konst_447_wire_constant) (EQ_u8_u1_421_421_delayed_4_0_449)    $fullrate
    $buffering  $out EQ_u8_u1_448_inst EQ_u8_u1_421_421_delayed_4_0_449 4
    $delay EQ_u8_u1_448_inst 1
    // 			$volatile send_to_2 := (EQ_u8_u1_421_421_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 183
    // (EQ_u8_u1_421_421_delayed_4_0 & continue)
    &[AND_u1_u1_453_inst] (EQ_u8_u1_421_421_delayed_4_0_449 continue_434) (send_to_2_454)   $flowthrough 
    $delay AND_u1_u1_453_inst 0
    // 			EQ_u8_u1_428_428_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 184
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_458_inst] (next_last_dest_id_420 konst_457_wire_constant) (EQ_u8_u1_428_428_delayed_4_0_459)    $fullrate
    $buffering  $out EQ_u8_u1_458_inst EQ_u8_u1_428_428_delayed_4_0_459 4
    $delay EQ_u8_u1_458_inst 1
    // 			$volatile send_to_3 := (EQ_u8_u1_428_428_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 185
    // (EQ_u8_u1_428_428_delayed_4_0 & continue)
    &[AND_u1_u1_463_inst] (EQ_u8_u1_428_428_delayed_4_0_459 continue_434) (send_to_3_464)   $flowthrough 
    $delay AND_u1_u1_463_inst 0
    // 			EQ_u8_u1_435_435_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 186
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_468_inst] (next_last_dest_id_420 konst_467_wire_constant) (EQ_u8_u1_435_435_delayed_4_0_469)    $fullrate
    $buffering  $out EQ_u8_u1_468_inst EQ_u8_u1_435_435_delayed_4_0_469 4
    $delay EQ_u8_u1_468_inst 1
    // 			$volatile send_to_4 := (EQ_u8_u1_435_435_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 187
    // (EQ_u8_u1_435_435_delayed_4_0 & continue)
    &[AND_u1_u1_473_inst] (EQ_u8_u1_435_435_delayed_4_0_469 continue_434) (send_to_4_474)   $flowthrough 
    $delay AND_u1_u1_473_inst 0
    // 			data_to_outport_441_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 188
    # := [W_data_to_outport_441_delayed_4_0_475_inst] (data_to_outport_425) (data_to_outport_441_delayed_4_0_477)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_441_delayed_4_0_475_inst data_to_outport_441_delayed_4_0_477 4
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport_441_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 189
    // noblock_obuf_2_1
    $ioport $out [WPIPE_noblock_obuf_2_1_479_inst]  (data_to_outport_441_delayed_4_0_477) (noblock_obuf_2_1) $guard ( send_to_1_444 )  $fullrate 
    // 			data_to_outport_445_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 190
    # := [W_data_to_outport_445_delayed_4_0_482_inst] (data_to_outport_425) (data_to_outport_445_delayed_4_0_484)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_445_delayed_4_0_482_inst data_to_outport_445_delayed_4_0_484 4
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport_445_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 191
    // noblock_obuf_2_2
    $ioport $out [WPIPE_noblock_obuf_2_2_486_inst]  (data_to_outport_445_delayed_4_0_484) (noblock_obuf_2_2) $guard ( send_to_2_454 )  $fullrate 
    // 			data_to_outport_449_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 192
    # := [W_data_to_outport_449_delayed_4_0_489_inst] (data_to_outport_425) (data_to_outport_449_delayed_4_0_491)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_449_delayed_4_0_489_inst data_to_outport_449_delayed_4_0_491 4
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport_449_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 193
    // noblock_obuf_2_3
    $ioport $out [WPIPE_noblock_obuf_2_3_493_inst]  (data_to_outport_449_delayed_4_0_491) (noblock_obuf_2_3) $guard ( send_to_3_464 )  $fullrate 
    // 			data_to_outport_453_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 194
    # := [W_data_to_outport_453_delayed_4_0_496_inst] (data_to_outport_425) (data_to_outport_453_delayed_4_0_498)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_453_delayed_4_0_496_inst data_to_outport_453_delayed_4_0_498 4
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport_453_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 195
    // noblock_obuf_2_4
    $ioport $out [WPIPE_noblock_obuf_2_4_500_inst]  (data_to_outport_453_delayed_4_0_498) (noblock_obuf_2_4) $guard ( send_to_4_474 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_367
  //  file .Aa/switch2x2.opt.aa, line 160
  phi_stmt_369 <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_369_entry_sample_req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_369_loopback_sample_req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_369_phi_mux_ack)
  next_count_down_414_372_buf <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_count_down_372_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_count_down_372_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_count_down_372_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_count_down_372_Update/ack)
  // in_data_2
  RPIPE_in_data_2_375_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/RPIPE_in_data_2_375_Sample/rr branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/RPIPE_in_data_2_375_Update/cr) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/RPIPE_in_data_2_375_Sample/ra branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/RPIPE_in_data_2_375_Update/ca)
  phi_stmt_376 <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_376_entry_sample_req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_376_loopback_sample_req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/phi_stmt_376_phi_mux_ack)
  next_last_dest_id_420_379_buf <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_last_dest_id_379_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_last_dest_id_379_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_last_dest_id_379_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/R_next_last_dest_id_379_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 171
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 172
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 173
  // input_word
  // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 174
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 176
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 177
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 178
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile continue := ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 179
  // (next_last_dest_id - 1 )
  // next_last_dest_id
  // ( $call updateCounter (1  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
  call_updateCounter_expr_433_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/call_updateCounter_expr_433_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/call_updateCounter_expr_433_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/call_updateCounter_expr_433_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/call_updateCounter_expr_433_Update/ack)
  // 			EQ_u8_u1_414_414_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 180
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  EQ_u8_u1_438_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_438_Sample/rr branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_438_Update/cr) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_438_Sample/ra branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_438_Update/ca)
  // 			$volatile send_to_1 := (EQ_u8_u1_414_414_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 181
  // (EQ_u8_u1_414_414_delayed_4_0 & continue)
  // EQ_u8_u1_414_414_delayed_4_0
  // continue
  // 			EQ_u8_u1_421_421_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 182
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  EQ_u8_u1_448_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_448_Sample/rr branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_448_Update/cr) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_448_Sample/ra branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_448_Update/ca)
  // 			$volatile send_to_2 := (EQ_u8_u1_421_421_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 183
  // (EQ_u8_u1_421_421_delayed_4_0 & continue)
  // EQ_u8_u1_421_421_delayed_4_0
  // continue
  // 			EQ_u8_u1_428_428_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 184
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  EQ_u8_u1_458_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_458_Sample/rr branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_458_Update/cr) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_458_Sample/ra branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_458_Update/ca)
  // 			$volatile send_to_3 := (EQ_u8_u1_428_428_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 185
  // (EQ_u8_u1_428_428_delayed_4_0 & continue)
  // EQ_u8_u1_428_428_delayed_4_0
  // continue
  // 			EQ_u8_u1_435_435_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 186
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  EQ_u8_u1_468_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_468_Sample/rr branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_468_Update/cr) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_468_Sample/ra branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/EQ_u8_u1_468_Update/ca)
  // 			$volatile send_to_4 := (EQ_u8_u1_435_435_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 187
  // (EQ_u8_u1_435_435_delayed_4_0 & continue)
  // EQ_u8_u1_435_435_delayed_4_0
  // continue
  // 			data_to_outport_441_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 188
  // data_to_outport
  W_data_to_outport_441_delayed_4_0_475_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_477_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_477_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_477_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_477_Update/ack)
  // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport_441_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 189
  // data_to_outport_441_delayed_4_0
  // noblock_obuf_2_1
  WPIPE_noblock_obuf_2_1_479_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_1_479_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_1_479_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_1_479_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_1_479_Update/ack)
  // 			data_to_outport_445_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 190
  // data_to_outport
  W_data_to_outport_445_delayed_4_0_482_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_484_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_484_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_484_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_484_Update/ack)
  // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport_445_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 191
  // data_to_outport_445_delayed_4_0
  // noblock_obuf_2_2
  WPIPE_noblock_obuf_2_2_486_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_2_486_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_2_486_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_2_486_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_2_486_Update/ack)
  // 			data_to_outport_449_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 192
  // data_to_outport
  W_data_to_outport_449_delayed_4_0_489_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_491_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_491_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_491_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_491_Update/ack)
  // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport_449_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 193
  // data_to_outport_449_delayed_4_0
  // noblock_obuf_2_3
  WPIPE_noblock_obuf_2_3_493_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_3_493_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_3_493_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_3_493_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_3_493_Update/ack)
  // 			data_to_outport_453_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 194
  // data_to_outport
  W_data_to_outport_453_delayed_4_0_496_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_498_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_498_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_498_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/assign_stmt_498_Update/ack)
  // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport_453_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 195
  // data_to_outport_453_delayed_4_0
  // noblock_obuf_2_4
  WPIPE_noblock_obuf_2_4_500_inst <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_4_500_Sample/req branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_4_500_Update/req) (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_4_500_Sample/ack branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/WPIPE_noblock_obuf_2_4_500_Update/ack)
  do_while_stmt_367_branch <=> (branch_block_stmt_366/do_while_stmt_367/do_while_stmt_367_loop_body/condition_evaluated) (branch_block_stmt_366/do_while_stmt_367/loop_exit/ack branch_block_stmt_366/do_while_stmt_367/loop_taken/ack)
}
$module [inputPort_3_Daemon] 
{
  // pipe-declarations for block %inputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 200
  // pipe-declarations for block %inputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 205
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_518] // Branch Block  file .Aa/switch2x2.opt.aa, line 205
    {
      $P [branch_block_stmt_518__entry__]
      branch_block_stmt_518__entry__ <-| ($entry)
      $P [branch_block_stmt_518__exit__]
      branch_block_stmt_518__exit__ |-> ($exit)
      $P [do_while_stmt_519__entry__] 
      $P [do_while_stmt_519__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 207
      <o> [do_while_stmt_519]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_519__entry__] 
        $P[do_while_stmt_519__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_519_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_521
          // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_521_sample_start_] 
          $T[phi_stmt_521_sample_completed_] 
          $T[phi_stmt_521_update_start_] 
          $T[phi_stmt_521_update_completed_] 
          $T[phi_stmt_521_sample_start__ps] 
          phi_stmt_521_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_521_sample_completed__ps] 
          phi_stmt_521_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_521_update_start__ps] 
          phi_stmt_521_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_521_update_completed__ps] 
          phi_stmt_521_update_completed_ <-& (phi_stmt_521_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_521_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_521_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_521_update_start_)
          $T[phi_stmt_521_loopback_trigger] 
          phi_stmt_521_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_521_loopback_sample_req] 
          $T[phi_stmt_521_loopback_sample_req_ps] 
          phi_stmt_521_loopback_sample_req <-& (phi_stmt_521_loopback_sample_req_ps)
          phi_stmt_521_loopback_sample_req &-> ($null)
          $T[phi_stmt_521_entry_trigger] 
          phi_stmt_521_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_521_entry_sample_req] 
          $T[phi_stmt_521_entry_sample_req_ps] 
          phi_stmt_521_entry_sample_req <-& (phi_stmt_521_entry_sample_req_ps)
          phi_stmt_521_entry_sample_req &-> ($null)
          phi_stmt_521_update_start_ o<-& (phi_stmt_521_update_completed_ 0)
          phi_stmt_521_sample_start_ o<-& (phi_stmt_521_sample_completed_ 1)
          $T[phi_stmt_521_merged_reqs] 
          $T[phi_stmt_521_phi_mux_ack] 
          $T[phi_stmt_521_phi_mux_ack_ps] 
          phi_stmt_521_phi_mux_ack_ps <-& (phi_stmt_521_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_521_update_completed_)
          $T[R_ZERO_16_523_sample_start__ps] 
          $T[R_ZERO_16_523_sample_completed__ps] 
          $T[R_ZERO_16_523_update_start__ps] 
          $T[R_ZERO_16_523_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_523_sample_start_] 
          $T[R_ZERO_16_523_sample_completed_] 
          R_ZERO_16_523_sample_completed_ <-& (R_ZERO_16_523_sample_start_)
          $T[R_ZERO_16_523_update_start_] 
          $T [R_ZERO_16_523_update_completed_] $delay 
          R_ZERO_16_523_update_completed_ <-& (R_ZERO_16_523_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_523_sample_start_ <-& (R_ZERO_16_523_sample_start__ps)
          R_ZERO_16_523_update_start_ <-& (R_ZERO_16_523_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_523_sample_completed__ps <-& (R_ZERO_16_523_sample_completed_)
          R_ZERO_16_523_update_completed__ps <-& (R_ZERO_16_523_update_completed_)
          $T[R_next_count_down_524_sample_start__ps] 
          $T[R_next_count_down_524_sample_completed__ps] 
          $T[R_next_count_down_524_update_start__ps] 
          $T[R_next_count_down_524_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_524_sample_start_] 
          $T[R_next_count_down_524_sample_completed_] 
          $T[R_next_count_down_524_update_start_] 
          $T[R_next_count_down_524_update_completed_] 
          ;;[R_next_count_down_524_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_524_sample_start_ &-> (R_next_count_down_524_Sample)
          R_next_count_down_524_sample_completed_ <-& (R_next_count_down_524_Sample)
          ;;[R_next_count_down_524_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_524_update_start_ &-> (R_next_count_down_524_Update)
          R_next_count_down_524_update_completed_ <-& (R_next_count_down_524_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_524_sample_start_ <-& (R_next_count_down_524_sample_start__ps)
          R_next_count_down_524_update_start_ <-& (R_next_count_down_524_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_524_sample_completed__ps <-& (R_next_count_down_524_sample_completed_)
          R_next_count_down_524_update_completed__ps <-& (R_next_count_down_524_update_completed_)
          $phisequencer [ phi_stmt_521_phi_seq] : 
          phi_stmt_521_entry_trigger R_ZERO_16_523_sample_start__ps R_ZERO_16_523_sample_completed__ps R_ZERO_16_523_update_start__ps R_ZERO_16_523_update_completed__ps phi_stmt_521_loopback_trigger R_next_count_down_524_sample_start__ps R_next_count_down_524_sample_completed__ps R_next_count_down_524_update_start__ps R_next_count_down_524_update_completed__ps :
          phi_stmt_521_sample_start__ps phi_stmt_521_sample_completed__ps phi_stmt_521_update_start__ps phi_stmt_521_update_completed__ps :
          phi_stmt_521_entry_sample_req_ps phi_stmt_521_loopback_sample_req_ps : 
          phi_stmt_521_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_521
          // start:  single source PHI statement phi_stmt_525
          // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_525_sample_start_] 
          $T[phi_stmt_525_sample_completed_] 
          $T[phi_stmt_525_update_start_] 
          $T[phi_stmt_525_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_525_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_525_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_525_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_3
          $T[RPIPE_in_data_3_527_sample_start_] 
          $T[RPIPE_in_data_3_527_sample_completed_] 
          $T[RPIPE_in_data_3_527_update_start_] 
          $T[RPIPE_in_data_3_527_update_completed_] 
          ;;[RPIPE_in_data_3_527_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_3_527_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_3_527_sample_start_ &-> (RPIPE_in_data_3_527_Sample)
          RPIPE_in_data_3_527_sample_completed_ <-& (RPIPE_in_data_3_527_Sample)
          RPIPE_in_data_3_527_update_start_ <-& (RPIPE_in_data_3_527_sample_completed_)
          RPIPE_in_data_3_527_update_start_ &-> (RPIPE_in_data_3_527_Update)
          RPIPE_in_data_3_527_update_completed_ <-& (RPIPE_in_data_3_527_Update)
          RPIPE_in_data_3_527_sample_start_ o<-& (RPIPE_in_data_3_527_update_completed_ 0)
          // RAW reenables for in_data_3
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_3_527_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_3_527_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_3_527_update_start_)
          phi_stmt_525_update_completed_ <-& (RPIPE_in_data_3_527_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_525_update_completed_)
          // done: PHI Statement phi_stmt_525
          // start:  multi-source PHI statement phi_stmt_528
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_528_sample_start_] 
          $T[phi_stmt_528_sample_completed_] 
          $T[phi_stmt_528_update_start_] 
          $T[phi_stmt_528_update_completed_] 
          $T[phi_stmt_528_sample_start__ps] 
          phi_stmt_528_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_528_sample_completed__ps] 
          phi_stmt_528_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_528_update_start__ps] 
          phi_stmt_528_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_528_update_completed__ps] 
          phi_stmt_528_update_completed_ <-& (phi_stmt_528_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_528_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_528_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_528_update_start_)
          $T[phi_stmt_528_loopback_trigger] 
          phi_stmt_528_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_528_loopback_sample_req] 
          $T[phi_stmt_528_loopback_sample_req_ps] 
          phi_stmt_528_loopback_sample_req <-& (phi_stmt_528_loopback_sample_req_ps)
          phi_stmt_528_loopback_sample_req &-> ($null)
          $T[phi_stmt_528_entry_trigger] 
          phi_stmt_528_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_528_entry_sample_req] 
          $T[phi_stmt_528_entry_sample_req_ps] 
          phi_stmt_528_entry_sample_req <-& (phi_stmt_528_entry_sample_req_ps)
          phi_stmt_528_entry_sample_req &-> ($null)
          phi_stmt_528_update_start_ o<-& (phi_stmt_528_update_completed_ 0)
          phi_stmt_528_sample_start_ o<-& (phi_stmt_528_sample_completed_ 1)
          $T[phi_stmt_528_merged_reqs] 
          $T[phi_stmt_528_phi_mux_ack] 
          $T[phi_stmt_528_phi_mux_ack_ps] 
          phi_stmt_528_phi_mux_ack_ps <-& (phi_stmt_528_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_528_update_completed_)
          $T[konst_530_sample_start__ps] 
          $T[konst_530_sample_completed__ps] 
          $T[konst_530_update_start__ps] 
          $T[konst_530_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_530_sample_start_] 
          $T[konst_530_sample_completed_] 
          konst_530_sample_completed_ <-& (konst_530_sample_start_)
          $T[konst_530_update_start_] 
          $T [konst_530_update_completed_] $delay 
          konst_530_update_completed_ <-& (konst_530_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_530_sample_start_ <-& (konst_530_sample_start__ps)
          konst_530_update_start_ <-& (konst_530_update_start__ps)
          // Phi complete dependency.
          konst_530_sample_completed__ps <-& (konst_530_sample_completed_)
          konst_530_update_completed__ps <-& (konst_530_update_completed_)
          $T[R_next_last_dest_id_531_sample_start__ps] 
          $T[R_next_last_dest_id_531_sample_completed__ps] 
          $T[R_next_last_dest_id_531_update_start__ps] 
          $T[R_next_last_dest_id_531_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_531_sample_start_] 
          $T[R_next_last_dest_id_531_sample_completed_] 
          $T[R_next_last_dest_id_531_update_start_] 
          $T[R_next_last_dest_id_531_update_completed_] 
          ;;[R_next_last_dest_id_531_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_531_sample_start_ &-> (R_next_last_dest_id_531_Sample)
          R_next_last_dest_id_531_sample_completed_ <-& (R_next_last_dest_id_531_Sample)
          ;;[R_next_last_dest_id_531_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_531_update_start_ &-> (R_next_last_dest_id_531_Update)
          R_next_last_dest_id_531_update_completed_ <-& (R_next_last_dest_id_531_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_531_sample_start_ <-& (R_next_last_dest_id_531_sample_start__ps)
          R_next_last_dest_id_531_update_start_ <-& (R_next_last_dest_id_531_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_531_sample_completed__ps <-& (R_next_last_dest_id_531_sample_completed_)
          R_next_last_dest_id_531_update_completed__ps <-& (R_next_last_dest_id_531_update_completed_)
          $phisequencer [ phi_stmt_528_phi_seq] : 
          phi_stmt_528_entry_trigger konst_530_sample_start__ps konst_530_sample_completed__ps konst_530_update_start__ps konst_530_update_completed__ps phi_stmt_528_loopback_trigger R_next_last_dest_id_531_sample_start__ps R_next_last_dest_id_531_sample_completed__ps R_next_last_dest_id_531_update_start__ps R_next_last_dest_id_531_update_completed__ps :
          phi_stmt_528_sample_start__ps phi_stmt_528_sample_completed__ps phi_stmt_528_update_start__ps phi_stmt_528_update_completed__ps :
          phi_stmt_528_entry_sample_req_ps phi_stmt_528_loopback_sample_req_ps : 
          phi_stmt_528_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_528
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 218
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 219
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 220
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // start:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 221
          // volatile! 
          // Source expression
          // ( $slice input_word 7 0 ) 
          // input_word
          // Target expression
          // (as target) seq_id
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // end:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 223
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 224
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 225
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for continue
          // ignored out-of-scope w_root ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          // done: WAR dependencies for continue
          // start:  			$volatile continue := ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 226
          // volatile! 
          // Source expression
          // ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          $T[call_updateCounter_expr_585_sample_start_] 
          $T[call_updateCounter_expr_585_sample_completed_] 
          $T[call_updateCounter_expr_585_update_start_] 
          $T[call_updateCounter_expr_585_update_completed_] 
          // (next_last_dest_id - 1 )
          // next_last_dest_id
          // start: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_585_sample_start_
          call_updateCounter_expr_585_sample_start_ <-& (phi_stmt_521_update_completed_)
          call_updateCounter_expr_585_sample_start_ <-& (phi_stmt_525_update_completed_)
          call_updateCounter_expr_585_sample_start_ <-& (phi_stmt_528_update_completed_)
          // done: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_585_sample_start_
          // RAW reenables for (next_last_dest_id - 1 )
          phi_stmt_521_update_start_ o<-& (call_updateCounter_expr_585_sample_completed_ 0)
          phi_stmt_525_update_start_ o<-& (call_updateCounter_expr_585_sample_completed_ 0)
          phi_stmt_528_update_start_ o<-& (call_updateCounter_expr_585_sample_completed_ 0)
          ;;[call_updateCounter_expr_585_Sample] 
          {
            // fn-call expression 
            $T [req] $T [ack]  // (split) fn-call binary operation 
          }
          ;;[call_updateCounter_expr_585_Update] 
          {
            // fn-call binary expression 
            $T [req] $T [ack] // (split) fn-call binary operation 
          }
          call_updateCounter_expr_585_sample_start_ &-> (call_updateCounter_expr_585_Sample)
          call_updateCounter_expr_585_sample_completed_ <-& (call_updateCounter_expr_585_Sample)
          call_updateCounter_expr_585_sample_completed_ &-> ($null)
          call_updateCounter_expr_585_update_start_ &-> (call_updateCounter_expr_585_Update)
          call_updateCounter_expr_585_update_completed_ <-& (call_updateCounter_expr_585_Update)
          // self-release: 
          call_updateCounter_expr_585_sample_start_ o<-& (call_updateCounter_expr_585_sample_completed_ 1)
          $null &-> (call_updateCounter_expr_585_update_start_)
          call_updateCounter_expr_585_update_start_ o<-& (call_updateCounter_expr_585_update_completed_ 0)
          // Target expression
          // (as target) continue
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end:  			$volatile continue := ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          // start:  			EQ_u8_u1_542_542_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 227
          // Source expression
          // (next_last_dest_id == 1 )
          $T[EQ_u8_u1_590_sample_start_] 
          $T[EQ_u8_u1_590_sample_completed_] 
          $T[EQ_u8_u1_590_update_start_] 
          $T[EQ_u8_u1_590_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_590_sample_start_
          EQ_u8_u1_590_sample_start_ <-& (phi_stmt_521_update_completed_)
          EQ_u8_u1_590_sample_start_ <-& (phi_stmt_525_update_completed_)
          EQ_u8_u1_590_sample_start_ <-& (phi_stmt_528_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_590_sample_start_
          ;;[EQ_u8_u1_590_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_590_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_590_sample_start_ &-> (EQ_u8_u1_590_Sample)
          EQ_u8_u1_590_sample_completed_ <-& (EQ_u8_u1_590_Sample)
          EQ_u8_u1_590_sample_completed_ &-> ($null)
          EQ_u8_u1_590_update_start_ &-> (EQ_u8_u1_590_Update)
          EQ_u8_u1_590_update_completed_ <-& (EQ_u8_u1_590_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_521_update_start_ o<-& (EQ_u8_u1_590_sample_completed_ 0)
          phi_stmt_525_update_start_ o<-& (EQ_u8_u1_590_sample_completed_ 0)
          phi_stmt_528_update_start_ o<-& (EQ_u8_u1_590_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_590_sample_start_ o<-& (EQ_u8_u1_590_sample_completed_ 1)
          $null &-> (EQ_u8_u1_590_update_start_)
          EQ_u8_u1_590_update_start_ o<-& (EQ_u8_u1_590_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_542_542_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_542_542_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_542_542_delayed_4_0
          // end:  			EQ_u8_u1_542_542_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (EQ_u8_u1_542_542_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 228
          // volatile! 
          // Source expression
          // (EQ_u8_u1_542_542_delayed_4_0 & continue)
          // EQ_u8_u1_542_542_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (EQ_u8_u1_542_542_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_549_549_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 229
          // Source expression
          // (next_last_dest_id == 2 )
          $T[EQ_u8_u1_600_sample_start_] 
          $T[EQ_u8_u1_600_sample_completed_] 
          $T[EQ_u8_u1_600_update_start_] 
          $T[EQ_u8_u1_600_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_600_sample_start_
          EQ_u8_u1_600_sample_start_ <-& (phi_stmt_521_update_completed_)
          EQ_u8_u1_600_sample_start_ <-& (phi_stmt_525_update_completed_)
          EQ_u8_u1_600_sample_start_ <-& (phi_stmt_528_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_600_sample_start_
          ;;[EQ_u8_u1_600_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_600_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_600_sample_start_ &-> (EQ_u8_u1_600_Sample)
          EQ_u8_u1_600_sample_completed_ <-& (EQ_u8_u1_600_Sample)
          EQ_u8_u1_600_sample_completed_ &-> ($null)
          EQ_u8_u1_600_update_start_ &-> (EQ_u8_u1_600_Update)
          EQ_u8_u1_600_update_completed_ <-& (EQ_u8_u1_600_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_521_update_start_ o<-& (EQ_u8_u1_600_sample_completed_ 0)
          phi_stmt_525_update_start_ o<-& (EQ_u8_u1_600_sample_completed_ 0)
          phi_stmt_528_update_start_ o<-& (EQ_u8_u1_600_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_600_sample_start_ o<-& (EQ_u8_u1_600_sample_completed_ 1)
          $null &-> (EQ_u8_u1_600_update_start_)
          EQ_u8_u1_600_update_start_ o<-& (EQ_u8_u1_600_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_549_549_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_549_549_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_549_549_delayed_4_0
          // end:  			EQ_u8_u1_549_549_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (EQ_u8_u1_549_549_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 230
          // volatile! 
          // Source expression
          // (EQ_u8_u1_549_549_delayed_4_0 & continue)
          // EQ_u8_u1_549_549_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (EQ_u8_u1_549_549_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_556_556_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 231
          // Source expression
          // (next_last_dest_id == 3 )
          $T[EQ_u8_u1_610_sample_start_] 
          $T[EQ_u8_u1_610_sample_completed_] 
          $T[EQ_u8_u1_610_update_start_] 
          $T[EQ_u8_u1_610_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_610_sample_start_
          EQ_u8_u1_610_sample_start_ <-& (phi_stmt_521_update_completed_)
          EQ_u8_u1_610_sample_start_ <-& (phi_stmt_525_update_completed_)
          EQ_u8_u1_610_sample_start_ <-& (phi_stmt_528_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_610_sample_start_
          ;;[EQ_u8_u1_610_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_610_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_610_sample_start_ &-> (EQ_u8_u1_610_Sample)
          EQ_u8_u1_610_sample_completed_ <-& (EQ_u8_u1_610_Sample)
          EQ_u8_u1_610_sample_completed_ &-> ($null)
          EQ_u8_u1_610_update_start_ &-> (EQ_u8_u1_610_Update)
          EQ_u8_u1_610_update_completed_ <-& (EQ_u8_u1_610_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_521_update_start_ o<-& (EQ_u8_u1_610_sample_completed_ 0)
          phi_stmt_525_update_start_ o<-& (EQ_u8_u1_610_sample_completed_ 0)
          phi_stmt_528_update_start_ o<-& (EQ_u8_u1_610_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_610_sample_start_ o<-& (EQ_u8_u1_610_sample_completed_ 1)
          $null &-> (EQ_u8_u1_610_update_start_)
          EQ_u8_u1_610_update_start_ o<-& (EQ_u8_u1_610_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_556_556_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_556_556_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_556_556_delayed_4_0
          // end:  			EQ_u8_u1_556_556_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (EQ_u8_u1_556_556_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 232
          // volatile! 
          // Source expression
          // (EQ_u8_u1_556_556_delayed_4_0 & continue)
          // EQ_u8_u1_556_556_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (EQ_u8_u1_556_556_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_563_563_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 233
          // Source expression
          // (next_last_dest_id == 4 )
          $T[EQ_u8_u1_620_sample_start_] 
          $T[EQ_u8_u1_620_sample_completed_] 
          $T[EQ_u8_u1_620_update_start_] 
          $T[EQ_u8_u1_620_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_620_sample_start_
          EQ_u8_u1_620_sample_start_ <-& (phi_stmt_521_update_completed_)
          EQ_u8_u1_620_sample_start_ <-& (phi_stmt_525_update_completed_)
          EQ_u8_u1_620_sample_start_ <-& (phi_stmt_528_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_620_sample_start_
          ;;[EQ_u8_u1_620_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_620_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_620_sample_start_ &-> (EQ_u8_u1_620_Sample)
          EQ_u8_u1_620_sample_completed_ <-& (EQ_u8_u1_620_Sample)
          EQ_u8_u1_620_sample_completed_ &-> ($null)
          EQ_u8_u1_620_update_start_ &-> (EQ_u8_u1_620_Update)
          EQ_u8_u1_620_update_completed_ <-& (EQ_u8_u1_620_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_521_update_start_ o<-& (EQ_u8_u1_620_sample_completed_ 0)
          phi_stmt_525_update_start_ o<-& (EQ_u8_u1_620_sample_completed_ 0)
          phi_stmt_528_update_start_ o<-& (EQ_u8_u1_620_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_620_sample_start_ o<-& (EQ_u8_u1_620_sample_completed_ 1)
          $null &-> (EQ_u8_u1_620_update_start_)
          EQ_u8_u1_620_update_start_ o<-& (EQ_u8_u1_620_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_563_563_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_563_563_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_563_563_delayed_4_0
          // end:  			EQ_u8_u1_563_563_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (EQ_u8_u1_563_563_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 234
          // volatile! 
          // Source expression
          // (EQ_u8_u1_563_563_delayed_4_0 & continue)
          // EQ_u8_u1_563_563_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (EQ_u8_u1_563_563_delayed_4_0 & continue) $buffering 1
          // start:  			data_to_outport_569_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 235
          $T[assign_stmt_629_sample_start_] 
          $T[assign_stmt_629_sample_completed_] 
          $T[assign_stmt_629_update_start_] 
          $T[assign_stmt_629_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_569_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_629_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_629_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_629_sample_start_ &-> (assign_stmt_629_Sample)
          assign_stmt_629_sample_completed_ <-& (assign_stmt_629_Sample)
          assign_stmt_629_sample_completed_ &-> ($null)
          assign_stmt_629_update_start_ &-> (assign_stmt_629_Update)
          assign_stmt_629_update_completed_ <-& (assign_stmt_629_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_629_sample_start_
          assign_stmt_629_sample_start_ <-& (phi_stmt_525_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_629_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_525_update_start_ o<-& (assign_stmt_629_sample_completed_ 0)
          // self-release: 
          assign_stmt_629_sample_start_ o<-& (assign_stmt_629_sample_completed_ 1)
          $null &-> (assign_stmt_629_update_start_)
          assign_stmt_629_update_start_ o<-& (assign_stmt_629_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_569_delayed_4_0
          // done: WAR dependencies for data_to_outport_569_delayed_4_0
          // end:  			data_to_outport_569_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport_569_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 236
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport_569_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_3_1
          $T[WPIPE_noblock_obuf_3_1_631_sample_start_] 
          $T[WPIPE_noblock_obuf_3_1_631_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_1_631_update_start_] 
          $T[WPIPE_noblock_obuf_3_1_631_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_1_631 with guard R_send_to_1_630
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_1_631_sample_start_ <-& (call_updateCounter_expr_585_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_1_631_sample_start_ <-& (EQ_u8_u1_590_update_completed_)
          // RAW reenables for send_to_1
          call_updateCounter_expr_585_update_start_ o<-& (WPIPE_noblock_obuf_3_1_631_sample_completed_ 0)
          EQ_u8_u1_590_update_start_ o<-& (WPIPE_noblock_obuf_3_1_631_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_1_631_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_1_631_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_1_631_sample_start_ &-> (WPIPE_noblock_obuf_3_1_631_Sample)
          WPIPE_noblock_obuf_3_1_631_sample_completed_ <-& (WPIPE_noblock_obuf_3_1_631_Sample)
          WPIPE_noblock_obuf_3_1_631_update_start_ <-& (WPIPE_noblock_obuf_3_1_631_sample_completed_)
          WPIPE_noblock_obuf_3_1_631_update_start_ &-> (WPIPE_noblock_obuf_3_1_631_Update)
          WPIPE_noblock_obuf_3_1_631_update_completed_ <-& (WPIPE_noblock_obuf_3_1_631_Update)
          WPIPE_noblock_obuf_3_1_631_sample_start_ o<-& (WPIPE_noblock_obuf_3_1_631_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_569_delayed_4_0 to transition WPIPE_noblock_obuf_3_1_631_sample_start_
          WPIPE_noblock_obuf_3_1_631_sample_start_ <-& (assign_stmt_629_update_completed_)
          // done: Forward dependencies from data_to_outport_569_delayed_4_0 to transition WPIPE_noblock_obuf_3_1_631_sample_start_
          // RAW reenables for data_to_outport_569_delayed_4_0
          assign_stmt_629_update_start_ o<-& (WPIPE_noblock_obuf_3_1_631_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport_569_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_573_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 237
          $T[assign_stmt_636_sample_start_] 
          $T[assign_stmt_636_sample_completed_] 
          $T[assign_stmt_636_update_start_] 
          $T[assign_stmt_636_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_573_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_636_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_636_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_636_sample_start_ &-> (assign_stmt_636_Sample)
          assign_stmt_636_sample_completed_ <-& (assign_stmt_636_Sample)
          assign_stmt_636_sample_completed_ &-> ($null)
          assign_stmt_636_update_start_ &-> (assign_stmt_636_Update)
          assign_stmt_636_update_completed_ <-& (assign_stmt_636_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_636_sample_start_
          assign_stmt_636_sample_start_ <-& (phi_stmt_525_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_636_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_525_update_start_ o<-& (assign_stmt_636_sample_completed_ 0)
          // self-release: 
          assign_stmt_636_sample_start_ o<-& (assign_stmt_636_sample_completed_ 1)
          $null &-> (assign_stmt_636_update_start_)
          assign_stmt_636_update_start_ o<-& (assign_stmt_636_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_573_delayed_4_0
          // done: WAR dependencies for data_to_outport_573_delayed_4_0
          // end:  			data_to_outport_573_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport_573_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 238
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport_573_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_3_2
          $T[WPIPE_noblock_obuf_3_2_638_sample_start_] 
          $T[WPIPE_noblock_obuf_3_2_638_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_2_638_update_start_] 
          $T[WPIPE_noblock_obuf_3_2_638_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_2_638 with guard R_send_to_2_637
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_2_638_sample_start_ <-& (call_updateCounter_expr_585_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_2_638_sample_start_ <-& (EQ_u8_u1_600_update_completed_)
          // RAW reenables for send_to_2
          call_updateCounter_expr_585_update_start_ o<-& (WPIPE_noblock_obuf_3_2_638_sample_completed_ 0)
          EQ_u8_u1_600_update_start_ o<-& (WPIPE_noblock_obuf_3_2_638_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_2_638_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_2_638_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_2_638_sample_start_ &-> (WPIPE_noblock_obuf_3_2_638_Sample)
          WPIPE_noblock_obuf_3_2_638_sample_completed_ <-& (WPIPE_noblock_obuf_3_2_638_Sample)
          WPIPE_noblock_obuf_3_2_638_update_start_ <-& (WPIPE_noblock_obuf_3_2_638_sample_completed_)
          WPIPE_noblock_obuf_3_2_638_update_start_ &-> (WPIPE_noblock_obuf_3_2_638_Update)
          WPIPE_noblock_obuf_3_2_638_update_completed_ <-& (WPIPE_noblock_obuf_3_2_638_Update)
          WPIPE_noblock_obuf_3_2_638_sample_start_ o<-& (WPIPE_noblock_obuf_3_2_638_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_573_delayed_4_0 to transition WPIPE_noblock_obuf_3_2_638_sample_start_
          WPIPE_noblock_obuf_3_2_638_sample_start_ <-& (assign_stmt_636_update_completed_)
          // done: Forward dependencies from data_to_outport_573_delayed_4_0 to transition WPIPE_noblock_obuf_3_2_638_sample_start_
          // RAW reenables for data_to_outport_573_delayed_4_0
          assign_stmt_636_update_start_ o<-& (WPIPE_noblock_obuf_3_2_638_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport_573_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_577_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 239
          $T[assign_stmt_643_sample_start_] 
          $T[assign_stmt_643_sample_completed_] 
          $T[assign_stmt_643_update_start_] 
          $T[assign_stmt_643_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_577_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_643_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_643_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_643_sample_start_ &-> (assign_stmt_643_Sample)
          assign_stmt_643_sample_completed_ <-& (assign_stmt_643_Sample)
          assign_stmt_643_sample_completed_ &-> ($null)
          assign_stmt_643_update_start_ &-> (assign_stmt_643_Update)
          assign_stmt_643_update_completed_ <-& (assign_stmt_643_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_643_sample_start_
          assign_stmt_643_sample_start_ <-& (phi_stmt_525_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_643_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_525_update_start_ o<-& (assign_stmt_643_sample_completed_ 0)
          // self-release: 
          assign_stmt_643_sample_start_ o<-& (assign_stmt_643_sample_completed_ 1)
          $null &-> (assign_stmt_643_update_start_)
          assign_stmt_643_update_start_ o<-& (assign_stmt_643_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_577_delayed_4_0
          // done: WAR dependencies for data_to_outport_577_delayed_4_0
          // end:  			data_to_outport_577_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport_577_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 240
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport_577_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_3_3
          $T[WPIPE_noblock_obuf_3_3_645_sample_start_] 
          $T[WPIPE_noblock_obuf_3_3_645_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_3_645_update_start_] 
          $T[WPIPE_noblock_obuf_3_3_645_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_3_645 with guard R_send_to_3_644
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_3_645_sample_start_ <-& (call_updateCounter_expr_585_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_3_645_sample_start_ <-& (EQ_u8_u1_610_update_completed_)
          // RAW reenables for send_to_3
          call_updateCounter_expr_585_update_start_ o<-& (WPIPE_noblock_obuf_3_3_645_sample_completed_ 0)
          EQ_u8_u1_610_update_start_ o<-& (WPIPE_noblock_obuf_3_3_645_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_3_645_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_3_645_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_3_645_sample_start_ &-> (WPIPE_noblock_obuf_3_3_645_Sample)
          WPIPE_noblock_obuf_3_3_645_sample_completed_ <-& (WPIPE_noblock_obuf_3_3_645_Sample)
          WPIPE_noblock_obuf_3_3_645_update_start_ <-& (WPIPE_noblock_obuf_3_3_645_sample_completed_)
          WPIPE_noblock_obuf_3_3_645_update_start_ &-> (WPIPE_noblock_obuf_3_3_645_Update)
          WPIPE_noblock_obuf_3_3_645_update_completed_ <-& (WPIPE_noblock_obuf_3_3_645_Update)
          WPIPE_noblock_obuf_3_3_645_sample_start_ o<-& (WPIPE_noblock_obuf_3_3_645_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_577_delayed_4_0 to transition WPIPE_noblock_obuf_3_3_645_sample_start_
          WPIPE_noblock_obuf_3_3_645_sample_start_ <-& (assign_stmt_643_update_completed_)
          // done: Forward dependencies from data_to_outport_577_delayed_4_0 to transition WPIPE_noblock_obuf_3_3_645_sample_start_
          // RAW reenables for data_to_outport_577_delayed_4_0
          assign_stmt_643_update_start_ o<-& (WPIPE_noblock_obuf_3_3_645_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport_577_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_581_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 241
          $T[assign_stmt_650_sample_start_] 
          $T[assign_stmt_650_sample_completed_] 
          $T[assign_stmt_650_update_start_] 
          $T[assign_stmt_650_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_581_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_650_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_650_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_650_sample_start_ &-> (assign_stmt_650_Sample)
          assign_stmt_650_sample_completed_ <-& (assign_stmt_650_Sample)
          assign_stmt_650_sample_completed_ &-> ($null)
          assign_stmt_650_update_start_ &-> (assign_stmt_650_Update)
          assign_stmt_650_update_completed_ <-& (assign_stmt_650_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_650_sample_start_
          assign_stmt_650_sample_start_ <-& (phi_stmt_525_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_650_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_525_update_start_ o<-& (assign_stmt_650_sample_completed_ 0)
          // self-release: 
          assign_stmt_650_sample_start_ o<-& (assign_stmt_650_sample_completed_ 1)
          $null &-> (assign_stmt_650_update_start_)
          assign_stmt_650_update_start_ o<-& (assign_stmt_650_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_581_delayed_4_0
          // done: WAR dependencies for data_to_outport_581_delayed_4_0
          // end:  			data_to_outport_581_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport_581_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 242
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport_581_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_3_4
          $T[WPIPE_noblock_obuf_3_4_652_sample_start_] 
          $T[WPIPE_noblock_obuf_3_4_652_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_4_652_update_start_] 
          $T[WPIPE_noblock_obuf_3_4_652_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_4_652 with guard R_send_to_4_651
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_4_652_sample_start_ <-& (call_updateCounter_expr_585_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_3_4_652_sample_start_ <-& (EQ_u8_u1_620_update_completed_)
          // RAW reenables for send_to_4
          call_updateCounter_expr_585_update_start_ o<-& (WPIPE_noblock_obuf_3_4_652_sample_completed_ 0)
          EQ_u8_u1_620_update_start_ o<-& (WPIPE_noblock_obuf_3_4_652_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_4_652_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_4_652_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_4_652_sample_start_ &-> (WPIPE_noblock_obuf_3_4_652_Sample)
          WPIPE_noblock_obuf_3_4_652_sample_completed_ <-& (WPIPE_noblock_obuf_3_4_652_Sample)
          WPIPE_noblock_obuf_3_4_652_update_start_ <-& (WPIPE_noblock_obuf_3_4_652_sample_completed_)
          WPIPE_noblock_obuf_3_4_652_update_start_ &-> (WPIPE_noblock_obuf_3_4_652_Update)
          WPIPE_noblock_obuf_3_4_652_update_completed_ <-& (WPIPE_noblock_obuf_3_4_652_Update)
          WPIPE_noblock_obuf_3_4_652_sample_start_ o<-& (WPIPE_noblock_obuf_3_4_652_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_581_delayed_4_0 to transition WPIPE_noblock_obuf_3_4_652_sample_start_
          WPIPE_noblock_obuf_3_4_652_sample_start_ <-& (assign_stmt_650_update_completed_)
          // done: Forward dependencies from data_to_outport_581_delayed_4_0 to transition WPIPE_noblock_obuf_3_4_652_sample_start_
          // RAW reenables for data_to_outport_581_delayed_4_0
          assign_stmt_650_update_start_ o<-& (WPIPE_noblock_obuf_3_4_652_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport_581_delayed_4_0 $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_updateCounter_expr_585 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data_3
          // read-dependencies for pipe in_data_3
          // write-dependencies for pipe in_data_3
          // signal write dependencies for in_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_519__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_519_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_519__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_519_loop_body : condition_evaluated
        $bind do_while_stmt_519__entry__  => do_while_stmt_519_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_519_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_519__exit__)
      }
      do_while_stmt_519__entry__ |-> (do_while_stmt_519)
      do_while_stmt_519__exit__ <-| (do_while_stmt_519)
      do_while_stmt_519__entry__ <-| (branch_block_stmt_518__entry__)
      do_while_stmt_519__exit__ |-> (branch_block_stmt_518__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 209
    // constant-object-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 205
    // constant-object-declarations for block %inputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 200
    // constant-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 205
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 207
    // 1 
    $constant $W[konst_666_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 209
    // constant-declarations for phi:  			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 210
    // ZERO_16
    $constant $W[R_ZERO_16_523_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 212
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 214
    // 0 
    $constant $W[konst_530_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_537_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_560_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_563_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_574_wire_constant] : $int<1> := _b1// 1
    // ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    // 2 
    $constant $W[konst_579_wire_constant] : $int<8> := _b00000010// 2
    // 1 
    $constant $W[konst_581_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_584_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_589_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_599_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_609_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_619_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 205
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 207
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 209
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 210
    $W[next_count_down_566_524_buffered] : $int<16>
    // count_down
    $W[count_down_521] : $int<16>
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 212
    // in_data_3
    $W[RPIPE_in_data_3_527_wire] : $int<32>
    // input_word
    $W[input_word_525] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 214
    $W[next_last_dest_id_572_531_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_528] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 218
    // new_packet
    $W[new_packet_539] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 219
    // dest_id
    $W[dest_id_543] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 220
    // pkt_length
    $W[pkt_length_547] : $int<16>
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 221
    // seq_id
    $W[seq_id_551] : $int<8>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 223
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_561_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_564_wire] : $int<16>
    // next_count_down
    $W[next_count_down_566] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 224
    // next_last_dest_id
    $W[next_last_dest_id_572] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 225
    // data_to_outport
    $W[data_to_outport_577] : $int<33>
    // 			$volatile continue := ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 226
    // (next_last_dest_id - 1 )
    $intermediate $W[SUB_u8_u8_582_wire] : $int<8>
    // continue
    $W[continue_586] : $int<1>
    // 			EQ_u8_u1_542_542_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 227
    // EQ_u8_u1_542_542_delayed_4_0
    $W[EQ_u8_u1_542_542_delayed_4_0_591] : $int<1>
    // 			$volatile send_to_1 := (EQ_u8_u1_542_542_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 228
    // send_to_1
    $W[send_to_1_596] : $int<1>
    // 			EQ_u8_u1_549_549_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 229
    // EQ_u8_u1_549_549_delayed_4_0
    $W[EQ_u8_u1_549_549_delayed_4_0_601] : $int<1>
    // 			$volatile send_to_2 := (EQ_u8_u1_549_549_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 230
    // send_to_2
    $W[send_to_2_606] : $int<1>
    // 			EQ_u8_u1_556_556_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 231
    // EQ_u8_u1_556_556_delayed_4_0
    $W[EQ_u8_u1_556_556_delayed_4_0_611] : $int<1>
    // 			$volatile send_to_3 := (EQ_u8_u1_556_556_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 232
    // send_to_3
    $W[send_to_3_616] : $int<1>
    // 			EQ_u8_u1_563_563_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 233
    // EQ_u8_u1_563_563_delayed_4_0
    $W[EQ_u8_u1_563_563_delayed_4_0_621] : $int<1>
    // 			$volatile send_to_4 := (EQ_u8_u1_563_563_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 234
    // send_to_4
    $W[send_to_4_626] : $int<1>
    // 			data_to_outport_569_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 235
    // data_to_outport_569_delayed_4_0
    $W[data_to_outport_569_delayed_4_0_629] : $int<33>
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport_569_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 236
    // noblock_obuf_3_1
    // 			data_to_outport_573_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 237
    // data_to_outport_573_delayed_4_0
    $W[data_to_outport_573_delayed_4_0_636] : $int<33>
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport_573_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 238
    // noblock_obuf_3_2
    // 			data_to_outport_577_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 239
    // data_to_outport_577_delayed_4_0
    $W[data_to_outport_577_delayed_4_0_643] : $int<33>
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport_577_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 240
    // noblock_obuf_3_3
    // 			data_to_outport_581_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 241
    // data_to_outport_581_delayed_4_0
    $W[data_to_outport_581_delayed_4_0_650] : $int<33>
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport_581_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 242
    // noblock_obuf_3_4
    // datapath-instances for block %inputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 205
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 207
    ==0? [do_while_stmt_519_branch] (konst_666_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 209
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 210
    # := [next_count_down_566_524_buf] (next_count_down_566) (next_count_down_566_524_buffered)   $in_phi    $fullrate
    $buffering $out next_count_down_566_524_buf next_count_down_566_524_buffered  1
    # $phi [phi_stmt_521] (R_ZERO_16_523_wire_constant next_count_down_566_524_buffered) ( count_down_521 ) $fullrate
    // $buffering  $out phi_stmt_521 count_down_521 2
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 212
    // in_data_3
    $ioport $in [RPIPE_in_data_3_527_inst] (in_data_3) (RPIPE_in_data_3_527_wire)  $fullrate 
    $buffering $out RPIPE_in_data_3_527_inst RPIPE_in_data_3_527_wire 1
    # := [ssrc_phi_stmt_525] (RPIPE_in_data_3_527_wire) (input_word_525)     $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 214
    # := [next_last_dest_id_572_531_buf] (next_last_dest_id_572) (next_last_dest_id_572_531_buffered)   $in_phi    $fullrate
    $buffering $out next_last_dest_id_572_531_buf next_last_dest_id_572_531_buffered  1
    # $phi [phi_stmt_528] (konst_530_wire_constant next_last_dest_id_572_531_buffered) ( last_dest_id_528 ) $fullrate
    // $buffering  $out phi_stmt_528 last_dest_id_528 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 218
    // (count_down == 0 )
    ==[EQ_u16_u1_538_inst] (count_down_521 konst_537_wire_constant) (new_packet_539)   $flowthrough 
    $delay EQ_u16_u1_538_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 219
    // ( $slice input_word 31 24 ) 
    [:] [slice_542_inst] (input_word_525 31 24) (dest_id_543)  $flowthrough
    $delay slice_542_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 220
    // ( $slice input_word 23 8 ) 
    [:] [slice_546_inst] (input_word_525 23 8) (pkt_length_547)  $flowthrough
    $delay slice_546_inst 0
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 221
    // ( $slice input_word 7 0 ) 
    [:] [slice_550_inst] (input_word_525 7 0) (seq_id_551)  $flowthrough
    $delay slice_550_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 223
    // (pkt_length - 1 )
    -[SUB_u16_u16_561_inst] (pkt_length_547 konst_560_wire_constant) (SUB_u16_u16_561_wire)   $flowthrough 
    $delay SUB_u16_u16_561_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_564_inst] (count_down_521 konst_563_wire_constant) (SUB_u16_u16_564_wire)   $flowthrough 
    $delay SUB_u16_u16_564_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_565_inst] (new_packet_539 SUB_u16_u16_561_wire SUB_u16_u16_564_wire) (next_count_down_566)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 224
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_571_inst] (new_packet_539 dest_id_543 last_dest_id_528) (next_last_dest_id_572)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 225
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_576_inst] (R_ONE_1_574_wire_constant input_word_525) (data_to_outport_577)   $flowthrough 
    $delay CONCAT_u1_u33_576_inst 0
    // 			$volatile continue := ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 226
    // ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    //  file .Aa/switch2x2.opt.aa, line 226
    // (next_last_dest_id - 1 )
    -[SUB_u8_u8_582_inst] (next_last_dest_id_572 konst_581_wire_constant) (SUB_u8_u8_582_wire)   $flowthrough 
    $delay SUB_u8_u8_582_inst 0
    $call [call_updateCounter_expr_585_inst] $module updateCounter(konst_579_wire_constant SUB_u8_u8_582_wire type_cast_584_wire_constant) (continue_586)   $fullrate
    $delay call_updateCounter_expr_585_inst 4
    $buffering  $in call_updateCounter_expr_585_inst konst_579_wire_constant 1
    $buffering  $in call_updateCounter_expr_585_inst SUB_u8_u8_582_wire 1
    $buffering  $in call_updateCounter_expr_585_inst type_cast_584_wire_constant 1
    $buffering  $out call_updateCounter_expr_585_inst continue_586 1
    // 			EQ_u8_u1_542_542_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 227
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_590_inst] (next_last_dest_id_572 konst_589_wire_constant) (EQ_u8_u1_542_542_delayed_4_0_591)    $fullrate
    $buffering  $out EQ_u8_u1_590_inst EQ_u8_u1_542_542_delayed_4_0_591 4
    $delay EQ_u8_u1_590_inst 1
    // 			$volatile send_to_1 := (EQ_u8_u1_542_542_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 228
    // (EQ_u8_u1_542_542_delayed_4_0 & continue)
    &[AND_u1_u1_595_inst] (EQ_u8_u1_542_542_delayed_4_0_591 continue_586) (send_to_1_596)   $flowthrough 
    $delay AND_u1_u1_595_inst 0
    // 			EQ_u8_u1_549_549_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 229
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_600_inst] (next_last_dest_id_572 konst_599_wire_constant) (EQ_u8_u1_549_549_delayed_4_0_601)    $fullrate
    $buffering  $out EQ_u8_u1_600_inst EQ_u8_u1_549_549_delayed_4_0_601 4
    $delay EQ_u8_u1_600_inst 1
    // 			$volatile send_to_2 := (EQ_u8_u1_549_549_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 230
    // (EQ_u8_u1_549_549_delayed_4_0 & continue)
    &[AND_u1_u1_605_inst] (EQ_u8_u1_549_549_delayed_4_0_601 continue_586) (send_to_2_606)   $flowthrough 
    $delay AND_u1_u1_605_inst 0
    // 			EQ_u8_u1_556_556_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 231
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_610_inst] (next_last_dest_id_572 konst_609_wire_constant) (EQ_u8_u1_556_556_delayed_4_0_611)    $fullrate
    $buffering  $out EQ_u8_u1_610_inst EQ_u8_u1_556_556_delayed_4_0_611 4
    $delay EQ_u8_u1_610_inst 1
    // 			$volatile send_to_3 := (EQ_u8_u1_556_556_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 232
    // (EQ_u8_u1_556_556_delayed_4_0 & continue)
    &[AND_u1_u1_615_inst] (EQ_u8_u1_556_556_delayed_4_0_611 continue_586) (send_to_3_616)   $flowthrough 
    $delay AND_u1_u1_615_inst 0
    // 			EQ_u8_u1_563_563_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 233
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_620_inst] (next_last_dest_id_572 konst_619_wire_constant) (EQ_u8_u1_563_563_delayed_4_0_621)    $fullrate
    $buffering  $out EQ_u8_u1_620_inst EQ_u8_u1_563_563_delayed_4_0_621 4
    $delay EQ_u8_u1_620_inst 1
    // 			$volatile send_to_4 := (EQ_u8_u1_563_563_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 234
    // (EQ_u8_u1_563_563_delayed_4_0 & continue)
    &[AND_u1_u1_625_inst] (EQ_u8_u1_563_563_delayed_4_0_621 continue_586) (send_to_4_626)   $flowthrough 
    $delay AND_u1_u1_625_inst 0
    // 			data_to_outport_569_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 235
    # := [W_data_to_outport_569_delayed_4_0_627_inst] (data_to_outport_577) (data_to_outport_569_delayed_4_0_629)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_569_delayed_4_0_627_inst data_to_outport_569_delayed_4_0_629 4
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport_569_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 236
    // noblock_obuf_3_1
    $ioport $out [WPIPE_noblock_obuf_3_1_631_inst]  (data_to_outport_569_delayed_4_0_629) (noblock_obuf_3_1) $guard ( send_to_1_596 )  $fullrate 
    // 			data_to_outport_573_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 237
    # := [W_data_to_outport_573_delayed_4_0_634_inst] (data_to_outport_577) (data_to_outport_573_delayed_4_0_636)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_573_delayed_4_0_634_inst data_to_outport_573_delayed_4_0_636 4
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport_573_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 238
    // noblock_obuf_3_2
    $ioport $out [WPIPE_noblock_obuf_3_2_638_inst]  (data_to_outport_573_delayed_4_0_636) (noblock_obuf_3_2) $guard ( send_to_2_606 )  $fullrate 
    // 			data_to_outport_577_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 239
    # := [W_data_to_outport_577_delayed_4_0_641_inst] (data_to_outport_577) (data_to_outport_577_delayed_4_0_643)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_577_delayed_4_0_641_inst data_to_outport_577_delayed_4_0_643 4
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport_577_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 240
    // noblock_obuf_3_3
    $ioport $out [WPIPE_noblock_obuf_3_3_645_inst]  (data_to_outport_577_delayed_4_0_643) (noblock_obuf_3_3) $guard ( send_to_3_616 )  $fullrate 
    // 			data_to_outport_581_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 241
    # := [W_data_to_outport_581_delayed_4_0_648_inst] (data_to_outport_577) (data_to_outport_581_delayed_4_0_650)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_581_delayed_4_0_648_inst data_to_outport_581_delayed_4_0_650 4
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport_581_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 242
    // noblock_obuf_3_4
    $ioport $out [WPIPE_noblock_obuf_3_4_652_inst]  (data_to_outport_581_delayed_4_0_650) (noblock_obuf_3_4) $guard ( send_to_4_626 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_519
  //  file .Aa/switch2x2.opt.aa, line 207
  phi_stmt_521 <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_521_entry_sample_req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_521_loopback_sample_req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_521_phi_mux_ack)
  next_count_down_566_524_buf <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_count_down_524_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_count_down_524_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_count_down_524_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_count_down_524_Update/ack)
  // in_data_3
  RPIPE_in_data_3_527_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/RPIPE_in_data_3_527_Sample/rr branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/RPIPE_in_data_3_527_Update/cr) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/RPIPE_in_data_3_527_Sample/ra branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/RPIPE_in_data_3_527_Update/ca)
  phi_stmt_528 <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_528_entry_sample_req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_528_loopback_sample_req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/phi_stmt_528_phi_mux_ack)
  next_last_dest_id_572_531_buf <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_last_dest_id_531_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_last_dest_id_531_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_last_dest_id_531_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/R_next_last_dest_id_531_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 218
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 219
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 220
  // input_word
  // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 221
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 223
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 224
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 225
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile continue := ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 226
  // (next_last_dest_id - 1 )
  // next_last_dest_id
  // ( $call updateCounter (2  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
  call_updateCounter_expr_585_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/call_updateCounter_expr_585_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/call_updateCounter_expr_585_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/call_updateCounter_expr_585_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/call_updateCounter_expr_585_Update/ack)
  // 			EQ_u8_u1_542_542_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 227
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  EQ_u8_u1_590_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_590_Sample/rr branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_590_Update/cr) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_590_Sample/ra branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_590_Update/ca)
  // 			$volatile send_to_1 := (EQ_u8_u1_542_542_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 228
  // (EQ_u8_u1_542_542_delayed_4_0 & continue)
  // EQ_u8_u1_542_542_delayed_4_0
  // continue
  // 			EQ_u8_u1_549_549_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 229
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  EQ_u8_u1_600_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_600_Sample/rr branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_600_Update/cr) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_600_Sample/ra branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_600_Update/ca)
  // 			$volatile send_to_2 := (EQ_u8_u1_549_549_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 230
  // (EQ_u8_u1_549_549_delayed_4_0 & continue)
  // EQ_u8_u1_549_549_delayed_4_0
  // continue
  // 			EQ_u8_u1_556_556_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 231
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  EQ_u8_u1_610_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_610_Sample/rr branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_610_Update/cr) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_610_Sample/ra branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_610_Update/ca)
  // 			$volatile send_to_3 := (EQ_u8_u1_556_556_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 232
  // (EQ_u8_u1_556_556_delayed_4_0 & continue)
  // EQ_u8_u1_556_556_delayed_4_0
  // continue
  // 			EQ_u8_u1_563_563_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 233
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  EQ_u8_u1_620_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_620_Sample/rr branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_620_Update/cr) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_620_Sample/ra branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/EQ_u8_u1_620_Update/ca)
  // 			$volatile send_to_4 := (EQ_u8_u1_563_563_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 234
  // (EQ_u8_u1_563_563_delayed_4_0 & continue)
  // EQ_u8_u1_563_563_delayed_4_0
  // continue
  // 			data_to_outport_569_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 235
  // data_to_outport
  W_data_to_outport_569_delayed_4_0_627_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_629_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_629_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_629_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_629_Update/ack)
  // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport_569_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 236
  // data_to_outport_569_delayed_4_0
  // noblock_obuf_3_1
  WPIPE_noblock_obuf_3_1_631_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_1_631_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_1_631_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_1_631_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_1_631_Update/ack)
  // 			data_to_outport_573_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 237
  // data_to_outport
  W_data_to_outport_573_delayed_4_0_634_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_636_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_636_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_636_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_636_Update/ack)
  // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport_573_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 238
  // data_to_outport_573_delayed_4_0
  // noblock_obuf_3_2
  WPIPE_noblock_obuf_3_2_638_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_2_638_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_2_638_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_2_638_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_2_638_Update/ack)
  // 			data_to_outport_577_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 239
  // data_to_outport
  W_data_to_outport_577_delayed_4_0_641_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_643_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_643_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_643_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_643_Update/ack)
  // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport_577_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 240
  // data_to_outport_577_delayed_4_0
  // noblock_obuf_3_3
  WPIPE_noblock_obuf_3_3_645_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_3_645_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_3_645_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_3_645_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_3_645_Update/ack)
  // 			data_to_outport_581_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 241
  // data_to_outport
  W_data_to_outport_581_delayed_4_0_648_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_650_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_650_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_650_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/assign_stmt_650_Update/ack)
  // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport_581_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 242
  // data_to_outport_581_delayed_4_0
  // noblock_obuf_3_4
  WPIPE_noblock_obuf_3_4_652_inst <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_4_652_Sample/req branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_4_652_Update/req) (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_4_652_Sample/ack branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/WPIPE_noblock_obuf_3_4_652_Update/ack)
  do_while_stmt_519_branch <=> (branch_block_stmt_518/do_while_stmt_519/do_while_stmt_519_loop_body/condition_evaluated) (branch_block_stmt_518/do_while_stmt_519/loop_exit/ack branch_block_stmt_518/do_while_stmt_519/loop_taken/ack)
}
$module [inputPort_4_Daemon] 
{
  // pipe-declarations for block %inputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 247
  // pipe-declarations for block %inputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 252
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_670] // Branch Block  file .Aa/switch2x2.opt.aa, line 252
    {
      $P [branch_block_stmt_670__entry__]
      branch_block_stmt_670__entry__ <-| ($entry)
      $P [branch_block_stmt_670__exit__]
      branch_block_stmt_670__exit__ |-> ($exit)
      $P [do_while_stmt_671__entry__] 
      $P [do_while_stmt_671__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 254
      <o> [do_while_stmt_671]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_671__entry__] 
        $P[do_while_stmt_671__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_671_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_673
          // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_673_sample_start_] 
          $T[phi_stmt_673_sample_completed_] 
          $T[phi_stmt_673_update_start_] 
          $T[phi_stmt_673_update_completed_] 
          $T[phi_stmt_673_sample_start__ps] 
          phi_stmt_673_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_673_sample_completed__ps] 
          phi_stmt_673_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_673_update_start__ps] 
          phi_stmt_673_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_673_update_completed__ps] 
          phi_stmt_673_update_completed_ <-& (phi_stmt_673_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_673_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_673_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_673_update_start_)
          $T[phi_stmt_673_loopback_trigger] 
          phi_stmt_673_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_673_loopback_sample_req] 
          $T[phi_stmt_673_loopback_sample_req_ps] 
          phi_stmt_673_loopback_sample_req <-& (phi_stmt_673_loopback_sample_req_ps)
          phi_stmt_673_loopback_sample_req &-> ($null)
          $T[phi_stmt_673_entry_trigger] 
          phi_stmt_673_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_673_entry_sample_req] 
          $T[phi_stmt_673_entry_sample_req_ps] 
          phi_stmt_673_entry_sample_req <-& (phi_stmt_673_entry_sample_req_ps)
          phi_stmt_673_entry_sample_req &-> ($null)
          phi_stmt_673_update_start_ o<-& (phi_stmt_673_update_completed_ 0)
          phi_stmt_673_sample_start_ o<-& (phi_stmt_673_sample_completed_ 1)
          $T[phi_stmt_673_merged_reqs] 
          $T[phi_stmt_673_phi_mux_ack] 
          $T[phi_stmt_673_phi_mux_ack_ps] 
          phi_stmt_673_phi_mux_ack_ps <-& (phi_stmt_673_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_673_update_completed_)
          $T[R_ZERO_16_675_sample_start__ps] 
          $T[R_ZERO_16_675_sample_completed__ps] 
          $T[R_ZERO_16_675_update_start__ps] 
          $T[R_ZERO_16_675_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_675_sample_start_] 
          $T[R_ZERO_16_675_sample_completed_] 
          R_ZERO_16_675_sample_completed_ <-& (R_ZERO_16_675_sample_start_)
          $T[R_ZERO_16_675_update_start_] 
          $T [R_ZERO_16_675_update_completed_] $delay 
          R_ZERO_16_675_update_completed_ <-& (R_ZERO_16_675_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_675_sample_start_ <-& (R_ZERO_16_675_sample_start__ps)
          R_ZERO_16_675_update_start_ <-& (R_ZERO_16_675_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_675_sample_completed__ps <-& (R_ZERO_16_675_sample_completed_)
          R_ZERO_16_675_update_completed__ps <-& (R_ZERO_16_675_update_completed_)
          $T[R_next_count_down_676_sample_start__ps] 
          $T[R_next_count_down_676_sample_completed__ps] 
          $T[R_next_count_down_676_update_start__ps] 
          $T[R_next_count_down_676_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_676_sample_start_] 
          $T[R_next_count_down_676_sample_completed_] 
          $T[R_next_count_down_676_update_start_] 
          $T[R_next_count_down_676_update_completed_] 
          ;;[R_next_count_down_676_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_676_sample_start_ &-> (R_next_count_down_676_Sample)
          R_next_count_down_676_sample_completed_ <-& (R_next_count_down_676_Sample)
          ;;[R_next_count_down_676_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_676_update_start_ &-> (R_next_count_down_676_Update)
          R_next_count_down_676_update_completed_ <-& (R_next_count_down_676_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_676_sample_start_ <-& (R_next_count_down_676_sample_start__ps)
          R_next_count_down_676_update_start_ <-& (R_next_count_down_676_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_676_sample_completed__ps <-& (R_next_count_down_676_sample_completed_)
          R_next_count_down_676_update_completed__ps <-& (R_next_count_down_676_update_completed_)
          $phisequencer [ phi_stmt_673_phi_seq] : 
          phi_stmt_673_entry_trigger R_ZERO_16_675_sample_start__ps R_ZERO_16_675_sample_completed__ps R_ZERO_16_675_update_start__ps R_ZERO_16_675_update_completed__ps phi_stmt_673_loopback_trigger R_next_count_down_676_sample_start__ps R_next_count_down_676_sample_completed__ps R_next_count_down_676_update_start__ps R_next_count_down_676_update_completed__ps :
          phi_stmt_673_sample_start__ps phi_stmt_673_sample_completed__ps phi_stmt_673_update_start__ps phi_stmt_673_update_completed__ps :
          phi_stmt_673_entry_sample_req_ps phi_stmt_673_loopback_sample_req_ps : 
          phi_stmt_673_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_673
          // start:  single source PHI statement phi_stmt_677
          // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_677_sample_start_] 
          $T[phi_stmt_677_sample_completed_] 
          $T[phi_stmt_677_update_start_] 
          $T[phi_stmt_677_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_677_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_677_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_677_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_4
          $T[RPIPE_in_data_4_679_sample_start_] 
          $T[RPIPE_in_data_4_679_sample_completed_] 
          $T[RPIPE_in_data_4_679_update_start_] 
          $T[RPIPE_in_data_4_679_update_completed_] 
          ;;[RPIPE_in_data_4_679_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_4_679_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_4_679_sample_start_ &-> (RPIPE_in_data_4_679_Sample)
          RPIPE_in_data_4_679_sample_completed_ <-& (RPIPE_in_data_4_679_Sample)
          RPIPE_in_data_4_679_update_start_ <-& (RPIPE_in_data_4_679_sample_completed_)
          RPIPE_in_data_4_679_update_start_ &-> (RPIPE_in_data_4_679_Update)
          RPIPE_in_data_4_679_update_completed_ <-& (RPIPE_in_data_4_679_Update)
          RPIPE_in_data_4_679_sample_start_ o<-& (RPIPE_in_data_4_679_update_completed_ 0)
          // RAW reenables for in_data_4
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_4_679_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_4_679_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_4_679_update_start_)
          phi_stmt_677_update_completed_ <-& (RPIPE_in_data_4_679_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_677_update_completed_)
          // done: PHI Statement phi_stmt_677
          // start:  multi-source PHI statement phi_stmt_680
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_680_sample_start_] 
          $T[phi_stmt_680_sample_completed_] 
          $T[phi_stmt_680_update_start_] 
          $T[phi_stmt_680_update_completed_] 
          $T[phi_stmt_680_sample_start__ps] 
          phi_stmt_680_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_680_sample_completed__ps] 
          phi_stmt_680_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_680_update_start__ps] 
          phi_stmt_680_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_680_update_completed__ps] 
          phi_stmt_680_update_completed_ <-& (phi_stmt_680_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_680_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_680_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_680_update_start_)
          $T[phi_stmt_680_loopback_trigger] 
          phi_stmt_680_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_680_loopback_sample_req] 
          $T[phi_stmt_680_loopback_sample_req_ps] 
          phi_stmt_680_loopback_sample_req <-& (phi_stmt_680_loopback_sample_req_ps)
          phi_stmt_680_loopback_sample_req &-> ($null)
          $T[phi_stmt_680_entry_trigger] 
          phi_stmt_680_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_680_entry_sample_req] 
          $T[phi_stmt_680_entry_sample_req_ps] 
          phi_stmt_680_entry_sample_req <-& (phi_stmt_680_entry_sample_req_ps)
          phi_stmt_680_entry_sample_req &-> ($null)
          phi_stmt_680_update_start_ o<-& (phi_stmt_680_update_completed_ 0)
          phi_stmt_680_sample_start_ o<-& (phi_stmt_680_sample_completed_ 1)
          $T[phi_stmt_680_merged_reqs] 
          $T[phi_stmt_680_phi_mux_ack] 
          $T[phi_stmt_680_phi_mux_ack_ps] 
          phi_stmt_680_phi_mux_ack_ps <-& (phi_stmt_680_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_680_update_completed_)
          $T[konst_682_sample_start__ps] 
          $T[konst_682_sample_completed__ps] 
          $T[konst_682_update_start__ps] 
          $T[konst_682_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_682_sample_start_] 
          $T[konst_682_sample_completed_] 
          konst_682_sample_completed_ <-& (konst_682_sample_start_)
          $T[konst_682_update_start_] 
          $T [konst_682_update_completed_] $delay 
          konst_682_update_completed_ <-& (konst_682_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_682_sample_start_ <-& (konst_682_sample_start__ps)
          konst_682_update_start_ <-& (konst_682_update_start__ps)
          // Phi complete dependency.
          konst_682_sample_completed__ps <-& (konst_682_sample_completed_)
          konst_682_update_completed__ps <-& (konst_682_update_completed_)
          $T[R_next_last_dest_id_683_sample_start__ps] 
          $T[R_next_last_dest_id_683_sample_completed__ps] 
          $T[R_next_last_dest_id_683_update_start__ps] 
          $T[R_next_last_dest_id_683_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_683_sample_start_] 
          $T[R_next_last_dest_id_683_sample_completed_] 
          $T[R_next_last_dest_id_683_update_start_] 
          $T[R_next_last_dest_id_683_update_completed_] 
          ;;[R_next_last_dest_id_683_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_683_sample_start_ &-> (R_next_last_dest_id_683_Sample)
          R_next_last_dest_id_683_sample_completed_ <-& (R_next_last_dest_id_683_Sample)
          ;;[R_next_last_dest_id_683_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_683_update_start_ &-> (R_next_last_dest_id_683_Update)
          R_next_last_dest_id_683_update_completed_ <-& (R_next_last_dest_id_683_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_683_sample_start_ <-& (R_next_last_dest_id_683_sample_start__ps)
          R_next_last_dest_id_683_update_start_ <-& (R_next_last_dest_id_683_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_683_sample_completed__ps <-& (R_next_last_dest_id_683_sample_completed_)
          R_next_last_dest_id_683_update_completed__ps <-& (R_next_last_dest_id_683_update_completed_)
          $phisequencer [ phi_stmt_680_phi_seq] : 
          phi_stmt_680_entry_trigger konst_682_sample_start__ps konst_682_sample_completed__ps konst_682_update_start__ps konst_682_update_completed__ps phi_stmt_680_loopback_trigger R_next_last_dest_id_683_sample_start__ps R_next_last_dest_id_683_sample_completed__ps R_next_last_dest_id_683_update_start__ps R_next_last_dest_id_683_update_completed__ps :
          phi_stmt_680_sample_start__ps phi_stmt_680_sample_completed__ps phi_stmt_680_update_start__ps phi_stmt_680_update_completed__ps :
          phi_stmt_680_entry_sample_req_ps phi_stmt_680_loopback_sample_req_ps : 
          phi_stmt_680_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_680
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 265
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 266
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 267
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // start:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 268
          // volatile! 
          // Source expression
          // ( $slice input_word 7 0 ) 
          // input_word
          // Target expression
          // (as target) seq_id
          // start: WAR dependencies for seq_id
          // done: WAR dependencies for seq_id
          // end:  			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 270
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 271
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 272
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for continue
          // ignored out-of-scope w_root ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          // done: WAR dependencies for continue
          // start:  			$volatile continue := ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 273
          // volatile! 
          // Source expression
          // ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
          $T[call_updateCounter_expr_737_sample_start_] 
          $T[call_updateCounter_expr_737_sample_completed_] 
          $T[call_updateCounter_expr_737_update_start_] 
          $T[call_updateCounter_expr_737_update_completed_] 
          // (next_last_dest_id - 1 )
          // next_last_dest_id
          // start: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_737_sample_start_
          call_updateCounter_expr_737_sample_start_ <-& (phi_stmt_673_update_completed_)
          call_updateCounter_expr_737_sample_start_ <-& (phi_stmt_677_update_completed_)
          call_updateCounter_expr_737_sample_start_ <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from (next_last_dest_id - 1 ) to transition call_updateCounter_expr_737_sample_start_
          // RAW reenables for (next_last_dest_id - 1 )
          phi_stmt_673_update_start_ o<-& (call_updateCounter_expr_737_sample_completed_ 0)
          phi_stmt_677_update_start_ o<-& (call_updateCounter_expr_737_sample_completed_ 0)
          phi_stmt_680_update_start_ o<-& (call_updateCounter_expr_737_sample_completed_ 0)
          ;;[call_updateCounter_expr_737_Sample] 
          {
            // fn-call expression 
            $T [req] $T [ack]  // (split) fn-call binary operation 
          }
          ;;[call_updateCounter_expr_737_Update] 
          {
            // fn-call binary expression 
            $T [req] $T [ack] // (split) fn-call binary operation 
          }
          call_updateCounter_expr_737_sample_start_ &-> (call_updateCounter_expr_737_Sample)
          call_updateCounter_expr_737_sample_completed_ <-& (call_updateCounter_expr_737_Sample)
          call_updateCounter_expr_737_sample_completed_ &-> ($null)
          call_updateCounter_expr_737_update_start_ &-> (call_updateCounter_expr_737_Update)
          call_updateCounter_expr_737_update_completed_ <-& (call_updateCounter_expr_737_Update)
          // self-release: 
          call_updateCounter_expr_737_sample_start_ o<-& (call_updateCounter_expr_737_sample_completed_ 1)
          $null &-> (call_updateCounter_expr_737_update_start_)
          call_updateCounter_expr_737_update_start_ o<-& (call_updateCounter_expr_737_update_completed_ 0)
          // Target expression
          // (as target) continue
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end:  			$volatile continue := ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
          // start:  			EQ_u8_u1_670_670_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 274
          // Source expression
          // (next_last_dest_id == 1 )
          $T[EQ_u8_u1_742_sample_start_] 
          $T[EQ_u8_u1_742_sample_completed_] 
          $T[EQ_u8_u1_742_update_start_] 
          $T[EQ_u8_u1_742_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_742_sample_start_
          EQ_u8_u1_742_sample_start_ <-& (phi_stmt_673_update_completed_)
          EQ_u8_u1_742_sample_start_ <-& (phi_stmt_677_update_completed_)
          EQ_u8_u1_742_sample_start_ <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_742_sample_start_
          ;;[EQ_u8_u1_742_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_742_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_742_sample_start_ &-> (EQ_u8_u1_742_Sample)
          EQ_u8_u1_742_sample_completed_ <-& (EQ_u8_u1_742_Sample)
          EQ_u8_u1_742_sample_completed_ &-> ($null)
          EQ_u8_u1_742_update_start_ &-> (EQ_u8_u1_742_Update)
          EQ_u8_u1_742_update_completed_ <-& (EQ_u8_u1_742_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_673_update_start_ o<-& (EQ_u8_u1_742_sample_completed_ 0)
          phi_stmt_677_update_start_ o<-& (EQ_u8_u1_742_sample_completed_ 0)
          phi_stmt_680_update_start_ o<-& (EQ_u8_u1_742_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_742_sample_start_ o<-& (EQ_u8_u1_742_sample_completed_ 1)
          $null &-> (EQ_u8_u1_742_update_start_)
          EQ_u8_u1_742_update_start_ o<-& (EQ_u8_u1_742_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_670_670_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_670_670_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_670_670_delayed_4_0
          // end:  			EQ_u8_u1_670_670_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (EQ_u8_u1_670_670_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 275
          // volatile! 
          // Source expression
          // (EQ_u8_u1_670_670_delayed_4_0 & continue)
          // EQ_u8_u1_670_670_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (EQ_u8_u1_670_670_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_677_677_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 276
          // Source expression
          // (next_last_dest_id == 2 )
          $T[EQ_u8_u1_752_sample_start_] 
          $T[EQ_u8_u1_752_sample_completed_] 
          $T[EQ_u8_u1_752_update_start_] 
          $T[EQ_u8_u1_752_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_752_sample_start_
          EQ_u8_u1_752_sample_start_ <-& (phi_stmt_673_update_completed_)
          EQ_u8_u1_752_sample_start_ <-& (phi_stmt_677_update_completed_)
          EQ_u8_u1_752_sample_start_ <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_752_sample_start_
          ;;[EQ_u8_u1_752_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_752_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_752_sample_start_ &-> (EQ_u8_u1_752_Sample)
          EQ_u8_u1_752_sample_completed_ <-& (EQ_u8_u1_752_Sample)
          EQ_u8_u1_752_sample_completed_ &-> ($null)
          EQ_u8_u1_752_update_start_ &-> (EQ_u8_u1_752_Update)
          EQ_u8_u1_752_update_completed_ <-& (EQ_u8_u1_752_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_673_update_start_ o<-& (EQ_u8_u1_752_sample_completed_ 0)
          phi_stmt_677_update_start_ o<-& (EQ_u8_u1_752_sample_completed_ 0)
          phi_stmt_680_update_start_ o<-& (EQ_u8_u1_752_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_752_sample_start_ o<-& (EQ_u8_u1_752_sample_completed_ 1)
          $null &-> (EQ_u8_u1_752_update_start_)
          EQ_u8_u1_752_update_start_ o<-& (EQ_u8_u1_752_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_677_677_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_677_677_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_677_677_delayed_4_0
          // end:  			EQ_u8_u1_677_677_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (EQ_u8_u1_677_677_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 277
          // volatile! 
          // Source expression
          // (EQ_u8_u1_677_677_delayed_4_0 & continue)
          // EQ_u8_u1_677_677_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (EQ_u8_u1_677_677_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_684_684_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 278
          // Source expression
          // (next_last_dest_id == 3 )
          $T[EQ_u8_u1_762_sample_start_] 
          $T[EQ_u8_u1_762_sample_completed_] 
          $T[EQ_u8_u1_762_update_start_] 
          $T[EQ_u8_u1_762_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_762_sample_start_
          EQ_u8_u1_762_sample_start_ <-& (phi_stmt_673_update_completed_)
          EQ_u8_u1_762_sample_start_ <-& (phi_stmt_677_update_completed_)
          EQ_u8_u1_762_sample_start_ <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_762_sample_start_
          ;;[EQ_u8_u1_762_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_762_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_762_sample_start_ &-> (EQ_u8_u1_762_Sample)
          EQ_u8_u1_762_sample_completed_ <-& (EQ_u8_u1_762_Sample)
          EQ_u8_u1_762_sample_completed_ &-> ($null)
          EQ_u8_u1_762_update_start_ &-> (EQ_u8_u1_762_Update)
          EQ_u8_u1_762_update_completed_ <-& (EQ_u8_u1_762_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_673_update_start_ o<-& (EQ_u8_u1_762_sample_completed_ 0)
          phi_stmt_677_update_start_ o<-& (EQ_u8_u1_762_sample_completed_ 0)
          phi_stmt_680_update_start_ o<-& (EQ_u8_u1_762_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_762_sample_start_ o<-& (EQ_u8_u1_762_sample_completed_ 1)
          $null &-> (EQ_u8_u1_762_update_start_)
          EQ_u8_u1_762_update_start_ o<-& (EQ_u8_u1_762_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_684_684_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_684_684_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_684_684_delayed_4_0
          // end:  			EQ_u8_u1_684_684_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (EQ_u8_u1_684_684_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 279
          // volatile! 
          // Source expression
          // (EQ_u8_u1_684_684_delayed_4_0 & continue)
          // EQ_u8_u1_684_684_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (EQ_u8_u1_684_684_delayed_4_0 & continue) $buffering 1
          // start:  			EQ_u8_u1_691_691_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file .Aa/switch2x2.opt.aa, line 280
          // Source expression
          // (next_last_dest_id == 4 )
          $T[EQ_u8_u1_772_sample_start_] 
          $T[EQ_u8_u1_772_sample_completed_] 
          $T[EQ_u8_u1_772_update_start_] 
          $T[EQ_u8_u1_772_update_completed_] 
          // next_last_dest_id
          // start: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_772_sample_start_
          EQ_u8_u1_772_sample_start_ <-& (phi_stmt_673_update_completed_)
          EQ_u8_u1_772_sample_start_ <-& (phi_stmt_677_update_completed_)
          EQ_u8_u1_772_sample_start_ <-& (phi_stmt_680_update_completed_)
          // done: Forward dependencies from next_last_dest_id to transition EQ_u8_u1_772_sample_start_
          ;;[EQ_u8_u1_772_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[EQ_u8_u1_772_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          EQ_u8_u1_772_sample_start_ &-> (EQ_u8_u1_772_Sample)
          EQ_u8_u1_772_sample_completed_ <-& (EQ_u8_u1_772_Sample)
          EQ_u8_u1_772_sample_completed_ &-> ($null)
          EQ_u8_u1_772_update_start_ &-> (EQ_u8_u1_772_Update)
          EQ_u8_u1_772_update_completed_ <-& (EQ_u8_u1_772_Update)
          // RAW reenables for next_last_dest_id
          phi_stmt_673_update_start_ o<-& (EQ_u8_u1_772_sample_completed_ 0)
          phi_stmt_677_update_start_ o<-& (EQ_u8_u1_772_sample_completed_ 0)
          phi_stmt_680_update_start_ o<-& (EQ_u8_u1_772_sample_completed_ 0)
          // self-release: 
          EQ_u8_u1_772_sample_start_ o<-& (EQ_u8_u1_772_sample_completed_ 1)
          $null &-> (EQ_u8_u1_772_update_start_)
          EQ_u8_u1_772_update_start_ o<-& (EQ_u8_u1_772_update_completed_ 0)
          // Target expression
          // (as target) EQ_u8_u1_691_691_delayed_4_0
          // start: WAR dependencies for EQ_u8_u1_691_691_delayed_4_0
          // done: WAR dependencies for EQ_u8_u1_691_691_delayed_4_0
          // end:  			EQ_u8_u1_691_691_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (EQ_u8_u1_691_691_delayed_4_0 & continue) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 281
          // volatile! 
          // Source expression
          // (EQ_u8_u1_691_691_delayed_4_0 & continue)
          // EQ_u8_u1_691_691_delayed_4_0
          // continue
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (EQ_u8_u1_691_691_delayed_4_0 & continue) $buffering 1
          // start:  			data_to_outport_697_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 282
          $T[assign_stmt_781_sample_start_] 
          $T[assign_stmt_781_sample_completed_] 
          $T[assign_stmt_781_update_start_] 
          $T[assign_stmt_781_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_697_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_781_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_781_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_781_sample_start_ &-> (assign_stmt_781_Sample)
          assign_stmt_781_sample_completed_ <-& (assign_stmt_781_Sample)
          assign_stmt_781_sample_completed_ &-> ($null)
          assign_stmt_781_update_start_ &-> (assign_stmt_781_Update)
          assign_stmt_781_update_completed_ <-& (assign_stmt_781_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_781_sample_start_
          assign_stmt_781_sample_start_ <-& (phi_stmt_677_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_781_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_677_update_start_ o<-& (assign_stmt_781_sample_completed_ 0)
          // self-release: 
          assign_stmt_781_sample_start_ o<-& (assign_stmt_781_sample_completed_ 1)
          $null &-> (assign_stmt_781_update_start_)
          assign_stmt_781_update_start_ o<-& (assign_stmt_781_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_697_delayed_4_0
          // done: WAR dependencies for data_to_outport_697_delayed_4_0
          // end:  			data_to_outport_697_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport_697_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 283
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport_697_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_4_1
          $T[WPIPE_noblock_obuf_4_1_783_sample_start_] 
          $T[WPIPE_noblock_obuf_4_1_783_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_1_783_update_start_] 
          $T[WPIPE_noblock_obuf_4_1_783_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_1_783 with guard R_send_to_1_782
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_1_783_sample_start_ <-& (call_updateCounter_expr_737_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_1_783_sample_start_ <-& (EQ_u8_u1_742_update_completed_)
          // RAW reenables for send_to_1
          call_updateCounter_expr_737_update_start_ o<-& (WPIPE_noblock_obuf_4_1_783_sample_completed_ 0)
          EQ_u8_u1_742_update_start_ o<-& (WPIPE_noblock_obuf_4_1_783_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_1_783_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_1_783_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_1_783_sample_start_ &-> (WPIPE_noblock_obuf_4_1_783_Sample)
          WPIPE_noblock_obuf_4_1_783_sample_completed_ <-& (WPIPE_noblock_obuf_4_1_783_Sample)
          WPIPE_noblock_obuf_4_1_783_update_start_ <-& (WPIPE_noblock_obuf_4_1_783_sample_completed_)
          WPIPE_noblock_obuf_4_1_783_update_start_ &-> (WPIPE_noblock_obuf_4_1_783_Update)
          WPIPE_noblock_obuf_4_1_783_update_completed_ <-& (WPIPE_noblock_obuf_4_1_783_Update)
          WPIPE_noblock_obuf_4_1_783_sample_start_ o<-& (WPIPE_noblock_obuf_4_1_783_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_697_delayed_4_0 to transition WPIPE_noblock_obuf_4_1_783_sample_start_
          WPIPE_noblock_obuf_4_1_783_sample_start_ <-& (assign_stmt_781_update_completed_)
          // done: Forward dependencies from data_to_outport_697_delayed_4_0 to transition WPIPE_noblock_obuf_4_1_783_sample_start_
          // RAW reenables for data_to_outport_697_delayed_4_0
          assign_stmt_781_update_start_ o<-& (WPIPE_noblock_obuf_4_1_783_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport_697_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_701_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 284
          $T[assign_stmt_788_sample_start_] 
          $T[assign_stmt_788_sample_completed_] 
          $T[assign_stmt_788_update_start_] 
          $T[assign_stmt_788_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_701_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_788_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_788_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_788_sample_start_ &-> (assign_stmt_788_Sample)
          assign_stmt_788_sample_completed_ <-& (assign_stmt_788_Sample)
          assign_stmt_788_sample_completed_ &-> ($null)
          assign_stmt_788_update_start_ &-> (assign_stmt_788_Update)
          assign_stmt_788_update_completed_ <-& (assign_stmt_788_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_788_sample_start_
          assign_stmt_788_sample_start_ <-& (phi_stmt_677_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_788_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_677_update_start_ o<-& (assign_stmt_788_sample_completed_ 0)
          // self-release: 
          assign_stmt_788_sample_start_ o<-& (assign_stmt_788_sample_completed_ 1)
          $null &-> (assign_stmt_788_update_start_)
          assign_stmt_788_update_start_ o<-& (assign_stmt_788_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_701_delayed_4_0
          // done: WAR dependencies for data_to_outport_701_delayed_4_0
          // end:  			data_to_outport_701_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport_701_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 285
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport_701_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_4_2
          $T[WPIPE_noblock_obuf_4_2_790_sample_start_] 
          $T[WPIPE_noblock_obuf_4_2_790_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_2_790_update_start_] 
          $T[WPIPE_noblock_obuf_4_2_790_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_2_790 with guard R_send_to_2_789
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_2_790_sample_start_ <-& (call_updateCounter_expr_737_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_2_790_sample_start_ <-& (EQ_u8_u1_752_update_completed_)
          // RAW reenables for send_to_2
          call_updateCounter_expr_737_update_start_ o<-& (WPIPE_noblock_obuf_4_2_790_sample_completed_ 0)
          EQ_u8_u1_752_update_start_ o<-& (WPIPE_noblock_obuf_4_2_790_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_2_790_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_2_790_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_2_790_sample_start_ &-> (WPIPE_noblock_obuf_4_2_790_Sample)
          WPIPE_noblock_obuf_4_2_790_sample_completed_ <-& (WPIPE_noblock_obuf_4_2_790_Sample)
          WPIPE_noblock_obuf_4_2_790_update_start_ <-& (WPIPE_noblock_obuf_4_2_790_sample_completed_)
          WPIPE_noblock_obuf_4_2_790_update_start_ &-> (WPIPE_noblock_obuf_4_2_790_Update)
          WPIPE_noblock_obuf_4_2_790_update_completed_ <-& (WPIPE_noblock_obuf_4_2_790_Update)
          WPIPE_noblock_obuf_4_2_790_sample_start_ o<-& (WPIPE_noblock_obuf_4_2_790_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_701_delayed_4_0 to transition WPIPE_noblock_obuf_4_2_790_sample_start_
          WPIPE_noblock_obuf_4_2_790_sample_start_ <-& (assign_stmt_788_update_completed_)
          // done: Forward dependencies from data_to_outport_701_delayed_4_0 to transition WPIPE_noblock_obuf_4_2_790_sample_start_
          // RAW reenables for data_to_outport_701_delayed_4_0
          assign_stmt_788_update_start_ o<-& (WPIPE_noblock_obuf_4_2_790_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport_701_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_705_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 286
          $T[assign_stmt_795_sample_start_] 
          $T[assign_stmt_795_sample_completed_] 
          $T[assign_stmt_795_update_start_] 
          $T[assign_stmt_795_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_705_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_795_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_795_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_795_sample_start_ &-> (assign_stmt_795_Sample)
          assign_stmt_795_sample_completed_ <-& (assign_stmt_795_Sample)
          assign_stmt_795_sample_completed_ &-> ($null)
          assign_stmt_795_update_start_ &-> (assign_stmt_795_Update)
          assign_stmt_795_update_completed_ <-& (assign_stmt_795_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_795_sample_start_
          assign_stmt_795_sample_start_ <-& (phi_stmt_677_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_795_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_677_update_start_ o<-& (assign_stmt_795_sample_completed_ 0)
          // self-release: 
          assign_stmt_795_sample_start_ o<-& (assign_stmt_795_sample_completed_ 1)
          $null &-> (assign_stmt_795_update_start_)
          assign_stmt_795_update_start_ o<-& (assign_stmt_795_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_705_delayed_4_0
          // done: WAR dependencies for data_to_outport_705_delayed_4_0
          // end:  			data_to_outport_705_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport_705_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 287
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport_705_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_4_3
          $T[WPIPE_noblock_obuf_4_3_797_sample_start_] 
          $T[WPIPE_noblock_obuf_4_3_797_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_3_797_update_start_] 
          $T[WPIPE_noblock_obuf_4_3_797_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_3_797 with guard R_send_to_3_796
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_3_797_sample_start_ <-& (call_updateCounter_expr_737_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_3_797_sample_start_ <-& (EQ_u8_u1_762_update_completed_)
          // RAW reenables for send_to_3
          call_updateCounter_expr_737_update_start_ o<-& (WPIPE_noblock_obuf_4_3_797_sample_completed_ 0)
          EQ_u8_u1_762_update_start_ o<-& (WPIPE_noblock_obuf_4_3_797_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_3_797_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_3_797_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_3_797_sample_start_ &-> (WPIPE_noblock_obuf_4_3_797_Sample)
          WPIPE_noblock_obuf_4_3_797_sample_completed_ <-& (WPIPE_noblock_obuf_4_3_797_Sample)
          WPIPE_noblock_obuf_4_3_797_update_start_ <-& (WPIPE_noblock_obuf_4_3_797_sample_completed_)
          WPIPE_noblock_obuf_4_3_797_update_start_ &-> (WPIPE_noblock_obuf_4_3_797_Update)
          WPIPE_noblock_obuf_4_3_797_update_completed_ <-& (WPIPE_noblock_obuf_4_3_797_Update)
          WPIPE_noblock_obuf_4_3_797_sample_start_ o<-& (WPIPE_noblock_obuf_4_3_797_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_705_delayed_4_0 to transition WPIPE_noblock_obuf_4_3_797_sample_start_
          WPIPE_noblock_obuf_4_3_797_sample_start_ <-& (assign_stmt_795_update_completed_)
          // done: Forward dependencies from data_to_outport_705_delayed_4_0 to transition WPIPE_noblock_obuf_4_3_797_sample_start_
          // RAW reenables for data_to_outport_705_delayed_4_0
          assign_stmt_795_update_start_ o<-& (WPIPE_noblock_obuf_4_3_797_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport_705_delayed_4_0 $buffering 1// bits of buffering = 33. 
          // start:  			data_to_outport_709_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          //  file .Aa/switch2x2.opt.aa, line 288
          $T[assign_stmt_802_sample_start_] 
          $T[assign_stmt_802_sample_completed_] 
          $T[assign_stmt_802_update_start_] 
          $T[assign_stmt_802_update_completed_] 
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) data_to_outport_709_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_802_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_802_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_802_sample_start_ &-> (assign_stmt_802_Sample)
          assign_stmt_802_sample_completed_ <-& (assign_stmt_802_Sample)
          assign_stmt_802_sample_completed_ &-> ($null)
          assign_stmt_802_update_start_ &-> (assign_stmt_802_Update)
          assign_stmt_802_update_completed_ <-& (assign_stmt_802_Update)
          // start: Forward dependencies from data_to_outport to transition assign_stmt_802_sample_start_
          assign_stmt_802_sample_start_ <-& (phi_stmt_677_update_completed_)
          // done: Forward dependencies from data_to_outport to transition assign_stmt_802_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_677_update_start_ o<-& (assign_stmt_802_sample_completed_ 0)
          // self-release: 
          assign_stmt_802_sample_start_ o<-& (assign_stmt_802_sample_completed_ 1)
          $null &-> (assign_stmt_802_update_start_)
          assign_stmt_802_update_start_ o<-& (assign_stmt_802_update_completed_ 0)
          // start: WAR dependencies for data_to_outport_709_delayed_4_0
          // done: WAR dependencies for data_to_outport_709_delayed_4_0
          // end:  			data_to_outport_709_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
          // start:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport_709_delayed_4_0 $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch2x2.opt.aa, line 289
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport_709_delayed_4_0
          // Target expression
          // (as target) noblock_obuf_4_4
          $T[WPIPE_noblock_obuf_4_4_804_sample_start_] 
          $T[WPIPE_noblock_obuf_4_4_804_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_4_804_update_start_] 
          $T[WPIPE_noblock_obuf_4_4_804_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_4_804 with guard R_send_to_4_803
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_4_804_sample_start_ <-& (call_updateCounter_expr_737_update_completed_)
          // Guard forward dependency 
          WPIPE_noblock_obuf_4_4_804_sample_start_ <-& (EQ_u8_u1_772_update_completed_)
          // RAW reenables for send_to_4
          call_updateCounter_expr_737_update_start_ o<-& (WPIPE_noblock_obuf_4_4_804_sample_completed_ 0)
          EQ_u8_u1_772_update_start_ o<-& (WPIPE_noblock_obuf_4_4_804_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_4_804_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_4_804_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_4_804_sample_start_ &-> (WPIPE_noblock_obuf_4_4_804_Sample)
          WPIPE_noblock_obuf_4_4_804_sample_completed_ <-& (WPIPE_noblock_obuf_4_4_804_Sample)
          WPIPE_noblock_obuf_4_4_804_update_start_ <-& (WPIPE_noblock_obuf_4_4_804_sample_completed_)
          WPIPE_noblock_obuf_4_4_804_update_start_ &-> (WPIPE_noblock_obuf_4_4_804_Update)
          WPIPE_noblock_obuf_4_4_804_update_completed_ <-& (WPIPE_noblock_obuf_4_4_804_Update)
          WPIPE_noblock_obuf_4_4_804_sample_start_ o<-& (WPIPE_noblock_obuf_4_4_804_update_completed_ 0)
          // start: Forward dependencies from data_to_outport_709_delayed_4_0 to transition WPIPE_noblock_obuf_4_4_804_sample_start_
          WPIPE_noblock_obuf_4_4_804_sample_start_ <-& (assign_stmt_802_update_completed_)
          // done: Forward dependencies from data_to_outport_709_delayed_4_0 to transition WPIPE_noblock_obuf_4_4_804_sample_start_
          // RAW reenables for data_to_outport_709_delayed_4_0
          assign_stmt_802_update_start_ o<-& (WPIPE_noblock_obuf_4_4_804_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport_709_delayed_4_0 $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_updateCounter_expr_737 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe in_data_4
          // read-dependencies for pipe in_data_4
          // write-dependencies for pipe in_data_4
          // signal write dependencies for in_data_4
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_671__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_671_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_671__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_671_loop_body : condition_evaluated
        $bind do_while_stmt_671__entry__  => do_while_stmt_671_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_671_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_671__exit__)
      }
      do_while_stmt_671__entry__ |-> (do_while_stmt_671)
      do_while_stmt_671__exit__ <-| (do_while_stmt_671)
      do_while_stmt_671__entry__ <-| (branch_block_stmt_670__entry__)
      do_while_stmt_671__exit__ |-> (branch_block_stmt_670__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 256
    // constant-object-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 252
    // constant-object-declarations for block %inputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 247
    // constant-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 252
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 254
    // 1 
    $constant $W[konst_818_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 256
    // constant-declarations for phi:  			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 257
    // ZERO_16
    $constant $W[R_ZERO_16_675_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 259
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 261
    // 0 
    $constant $W[konst_682_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_689_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_712_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_715_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_726_wire_constant] : $int<1> := _b1// 1
    // ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    // 3 
    $constant $W[konst_731_wire_constant] : $int<8> := _b00000011// 3
    // 1 
    $constant $W[konst_733_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_736_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_741_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_751_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_761_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_771_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 252
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 254
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 256
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 257
    $W[next_count_down_718_676_buffered] : $int<16>
    // count_down
    $W[count_down_673] : $int<16>
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 259
    // in_data_4
    $W[RPIPE_in_data_4_679_wire] : $int<32>
    // input_word
    $W[input_word_677] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 261
    $W[next_last_dest_id_724_683_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_680] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 265
    // new_packet
    $W[new_packet_691] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 266
    // dest_id
    $W[dest_id_695] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 267
    // pkt_length
    $W[pkt_length_699] : $int<16>
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 268
    // seq_id
    $W[seq_id_703] : $int<8>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 270
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_713_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_716_wire] : $int<16>
    // next_count_down
    $W[next_count_down_718] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 271
    // next_last_dest_id
    $W[next_last_dest_id_724] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 272
    // data_to_outport
    $W[data_to_outport_729] : $int<33>
    // 			$volatile continue := ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 273
    // (next_last_dest_id - 1 )
    $intermediate $W[SUB_u8_u8_734_wire] : $int<8>
    // continue
    $W[continue_738] : $int<1>
    // 			EQ_u8_u1_670_670_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 274
    // EQ_u8_u1_670_670_delayed_4_0
    $W[EQ_u8_u1_670_670_delayed_4_0_743] : $int<1>
    // 			$volatile send_to_1 := (EQ_u8_u1_670_670_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 275
    // send_to_1
    $W[send_to_1_748] : $int<1>
    // 			EQ_u8_u1_677_677_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 276
    // EQ_u8_u1_677_677_delayed_4_0
    $W[EQ_u8_u1_677_677_delayed_4_0_753] : $int<1>
    // 			$volatile send_to_2 := (EQ_u8_u1_677_677_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 277
    // send_to_2
    $W[send_to_2_758] : $int<1>
    // 			EQ_u8_u1_684_684_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 278
    // EQ_u8_u1_684_684_delayed_4_0
    $W[EQ_u8_u1_684_684_delayed_4_0_763] : $int<1>
    // 			$volatile send_to_3 := (EQ_u8_u1_684_684_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 279
    // send_to_3
    $W[send_to_3_768] : $int<1>
    // 			EQ_u8_u1_691_691_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 280
    // EQ_u8_u1_691_691_delayed_4_0
    $W[EQ_u8_u1_691_691_delayed_4_0_773] : $int<1>
    // 			$volatile send_to_4 := (EQ_u8_u1_691_691_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 281
    // send_to_4
    $W[send_to_4_778] : $int<1>
    // 			data_to_outport_697_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 282
    // data_to_outport_697_delayed_4_0
    $W[data_to_outport_697_delayed_4_0_781] : $int<33>
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport_697_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 283
    // noblock_obuf_4_1
    // 			data_to_outport_701_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 284
    // data_to_outport_701_delayed_4_0
    $W[data_to_outport_701_delayed_4_0_788] : $int<33>
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport_701_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 285
    // noblock_obuf_4_2
    // 			data_to_outport_705_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 286
    // data_to_outport_705_delayed_4_0
    $W[data_to_outport_705_delayed_4_0_795] : $int<33>
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport_705_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 287
    // noblock_obuf_4_3
    // 			data_to_outport_709_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 288
    // data_to_outport_709_delayed_4_0
    $W[data_to_outport_709_delayed_4_0_802] : $int<33>
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport_709_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 289
    // noblock_obuf_4_4
    // datapath-instances for block %inputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 252
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 254
    ==0? [do_while_stmt_671_branch] (konst_818_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 256
    // 			$phi count_down := 			  ZERO_16 $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch2x2.opt.aa, line 257
    # := [next_count_down_718_676_buf] (next_count_down_718) (next_count_down_718_676_buffered)   $in_phi    $fullrate
    $buffering $out next_count_down_718_676_buf next_count_down_718_676_buffered  1
    # $phi [phi_stmt_673] (R_ZERO_16_675_wire_constant next_count_down_718_676_buffered) ( count_down_673 ) $fullrate
    // $buffering  $out phi_stmt_673 count_down_673 2
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch2x2.opt.aa, line 259
    // in_data_4
    $ioport $in [RPIPE_in_data_4_679_inst] (in_data_4) (RPIPE_in_data_4_679_wire)  $fullrate 
    $buffering $out RPIPE_in_data_4_679_inst RPIPE_in_data_4_679_wire 1
    # := [ssrc_phi_stmt_677] (RPIPE_in_data_4_679_wire) (input_word_677)     $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 261
    # := [next_last_dest_id_724_683_buf] (next_last_dest_id_724) (next_last_dest_id_724_683_buffered)   $in_phi    $fullrate
    $buffering $out next_last_dest_id_724_683_buf next_last_dest_id_724_683_buffered  1
    # $phi [phi_stmt_680] (konst_682_wire_constant next_last_dest_id_724_683_buffered) ( last_dest_id_680 ) $fullrate
    // $buffering  $out phi_stmt_680 last_dest_id_680 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 265
    // (count_down == 0 )
    ==[EQ_u16_u1_690_inst] (count_down_673 konst_689_wire_constant) (new_packet_691)   $flowthrough 
    $delay EQ_u16_u1_690_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 266
    // ( $slice input_word 31 24 ) 
    [:] [slice_694_inst] (input_word_677 31 24) (dest_id_695)  $flowthrough
    $delay slice_694_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 267
    // ( $slice input_word 23 8 ) 
    [:] [slice_698_inst] (input_word_677 23 8) (pkt_length_699)  $flowthrough
    $delay slice_698_inst 0
    // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 268
    // ( $slice input_word 7 0 ) 
    [:] [slice_702_inst] (input_word_677 7 0) (seq_id_703)  $flowthrough
    $delay slice_702_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 270
    // (pkt_length - 1 )
    -[SUB_u16_u16_713_inst] (pkt_length_699 konst_712_wire_constant) (SUB_u16_u16_713_wire)   $flowthrough 
    $delay SUB_u16_u16_713_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_716_inst] (count_down_673 konst_715_wire_constant) (SUB_u16_u16_716_wire)   $flowthrough 
    $delay SUB_u16_u16_716_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_717_inst] (new_packet_691 SUB_u16_u16_713_wire SUB_u16_u16_716_wire) (next_count_down_718)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 271
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_723_inst] (new_packet_691 dest_id_695 last_dest_id_680) (next_last_dest_id_724)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 272
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_728_inst] (R_ONE_1_726_wire_constant input_word_677) (data_to_outport_729)   $flowthrough 
    $delay CONCAT_u1_u33_728_inst 0
    // 			$volatile continue := ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 273
    // ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
    //  file .Aa/switch2x2.opt.aa, line 273
    // (next_last_dest_id - 1 )
    -[SUB_u8_u8_734_inst] (next_last_dest_id_724 konst_733_wire_constant) (SUB_u8_u8_734_wire)   $flowthrough 
    $delay SUB_u8_u8_734_inst 0
    $call [call_updateCounter_expr_737_inst] $module updateCounter(konst_731_wire_constant SUB_u8_u8_734_wire type_cast_736_wire_constant) (continue_738)   $fullrate
    $delay call_updateCounter_expr_737_inst 4
    $buffering  $in call_updateCounter_expr_737_inst konst_731_wire_constant 1
    $buffering  $in call_updateCounter_expr_737_inst SUB_u8_u8_734_wire 1
    $buffering  $in call_updateCounter_expr_737_inst type_cast_736_wire_constant 1
    $buffering  $out call_updateCounter_expr_737_inst continue_738 1
    // 			EQ_u8_u1_670_670_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 274
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_742_inst] (next_last_dest_id_724 konst_741_wire_constant) (EQ_u8_u1_670_670_delayed_4_0_743)    $fullrate
    $buffering  $out EQ_u8_u1_742_inst EQ_u8_u1_670_670_delayed_4_0_743 4
    $delay EQ_u8_u1_742_inst 1
    // 			$volatile send_to_1 := (EQ_u8_u1_670_670_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 275
    // (EQ_u8_u1_670_670_delayed_4_0 & continue)
    &[AND_u1_u1_747_inst] (EQ_u8_u1_670_670_delayed_4_0_743 continue_738) (send_to_1_748)   $flowthrough 
    $delay AND_u1_u1_747_inst 0
    // 			EQ_u8_u1_677_677_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 276
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_752_inst] (next_last_dest_id_724 konst_751_wire_constant) (EQ_u8_u1_677_677_delayed_4_0_753)    $fullrate
    $buffering  $out EQ_u8_u1_752_inst EQ_u8_u1_677_677_delayed_4_0_753 4
    $delay EQ_u8_u1_752_inst 1
    // 			$volatile send_to_2 := (EQ_u8_u1_677_677_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 277
    // (EQ_u8_u1_677_677_delayed_4_0 & continue)
    &[AND_u1_u1_757_inst] (EQ_u8_u1_677_677_delayed_4_0_753 continue_738) (send_to_2_758)   $flowthrough 
    $delay AND_u1_u1_757_inst 0
    // 			EQ_u8_u1_684_684_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 278
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_762_inst] (next_last_dest_id_724 konst_761_wire_constant) (EQ_u8_u1_684_684_delayed_4_0_763)    $fullrate
    $buffering  $out EQ_u8_u1_762_inst EQ_u8_u1_684_684_delayed_4_0_763 4
    $delay EQ_u8_u1_762_inst 1
    // 			$volatile send_to_3 := (EQ_u8_u1_684_684_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 279
    // (EQ_u8_u1_684_684_delayed_4_0 & continue)
    &[AND_u1_u1_767_inst] (EQ_u8_u1_684_684_delayed_4_0_763 continue_738) (send_to_3_768)   $flowthrough 
    $delay AND_u1_u1_767_inst 0
    // 			EQ_u8_u1_691_691_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file .Aa/switch2x2.opt.aa, line 280
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_772_inst] (next_last_dest_id_724 konst_771_wire_constant) (EQ_u8_u1_691_691_delayed_4_0_773)    $fullrate
    $buffering  $out EQ_u8_u1_772_inst EQ_u8_u1_691_691_delayed_4_0_773 4
    $delay EQ_u8_u1_772_inst 1
    // 			$volatile send_to_4 := (EQ_u8_u1_691_691_delayed_4_0 & continue) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 281
    // (EQ_u8_u1_691_691_delayed_4_0 & continue)
    &[AND_u1_u1_777_inst] (EQ_u8_u1_691_691_delayed_4_0_773 continue_738) (send_to_4_778)   $flowthrough 
    $delay AND_u1_u1_777_inst 0
    // 			data_to_outport_697_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 282
    # := [W_data_to_outport_697_delayed_4_0_779_inst] (data_to_outport_729) (data_to_outport_697_delayed_4_0_781)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_697_delayed_4_0_779_inst data_to_outport_697_delayed_4_0_781 4
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport_697_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 283
    // noblock_obuf_4_1
    $ioport $out [WPIPE_noblock_obuf_4_1_783_inst]  (data_to_outport_697_delayed_4_0_781) (noblock_obuf_4_1) $guard ( send_to_1_748 )  $fullrate 
    // 			data_to_outport_701_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 284
    # := [W_data_to_outport_701_delayed_4_0_786_inst] (data_to_outport_729) (data_to_outport_701_delayed_4_0_788)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_701_delayed_4_0_786_inst data_to_outport_701_delayed_4_0_788 4
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport_701_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 285
    // noblock_obuf_4_2
    $ioport $out [WPIPE_noblock_obuf_4_2_790_inst]  (data_to_outport_701_delayed_4_0_788) (noblock_obuf_4_2) $guard ( send_to_2_758 )  $fullrate 
    // 			data_to_outport_705_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 286
    # := [W_data_to_outport_705_delayed_4_0_793_inst] (data_to_outport_729) (data_to_outport_705_delayed_4_0_795)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_705_delayed_4_0_793_inst data_to_outport_705_delayed_4_0_795 4
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport_705_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 287
    // noblock_obuf_4_3
    $ioport $out [WPIPE_noblock_obuf_4_3_797_inst]  (data_to_outport_705_delayed_4_0_795) (noblock_obuf_4_3) $guard ( send_to_3_768 )  $fullrate 
    // 			data_to_outport_709_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
    //  file .Aa/switch2x2.opt.aa, line 288
    # := [W_data_to_outport_709_delayed_4_0_800_inst] (data_to_outport_729) (data_to_outport_709_delayed_4_0_802)  $cut_through     $fullrate
    $buffering  $out W_data_to_outport_709_delayed_4_0_800_inst data_to_outport_709_delayed_4_0_802 4
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport_709_delayed_4_0 $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch2x2.opt.aa, line 289
    // noblock_obuf_4_4
    $ioport $out [WPIPE_noblock_obuf_4_4_804_inst]  (data_to_outport_709_delayed_4_0_802) (noblock_obuf_4_4) $guard ( send_to_4_778 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_671
  //  file .Aa/switch2x2.opt.aa, line 254
  phi_stmt_673 <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_673_entry_sample_req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_673_loopback_sample_req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_673_phi_mux_ack)
  next_count_down_718_676_buf <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_count_down_676_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_count_down_676_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_count_down_676_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_count_down_676_Update/ack)
  // in_data_4
  RPIPE_in_data_4_679_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/RPIPE_in_data_4_679_Sample/rr branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/RPIPE_in_data_4_679_Update/cr) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/RPIPE_in_data_4_679_Sample/ra branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/RPIPE_in_data_4_679_Update/ca)
  phi_stmt_680 <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_680_entry_sample_req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_680_loopback_sample_req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/phi_stmt_680_phi_mux_ack)
  next_last_dest_id_724_683_buf <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_last_dest_id_683_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_last_dest_id_683_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_last_dest_id_683_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/R_next_last_dest_id_683_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 265
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 266
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 267
  // input_word
  // 			$volatile seq_id := ( $slice input_word 7 0 )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 268
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 270
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 271
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 272
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile continue := ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 273
  // (next_last_dest_id - 1 )
  // next_last_dest_id
  // ( $call updateCounter (3  (next_last_dest_id - 1 ) ($bitcast ($uint<1>) _b1  ) ) )
  call_updateCounter_expr_737_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/call_updateCounter_expr_737_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/call_updateCounter_expr_737_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/call_updateCounter_expr_737_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/call_updateCounter_expr_737_Update/ack)
  // 			EQ_u8_u1_670_670_delayed_4_0 := (next_last_dest_id == 1 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 274
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  EQ_u8_u1_742_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_742_Sample/rr branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_742_Update/cr) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_742_Sample/ra branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_742_Update/ca)
  // 			$volatile send_to_1 := (EQ_u8_u1_670_670_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 275
  // (EQ_u8_u1_670_670_delayed_4_0 & continue)
  // EQ_u8_u1_670_670_delayed_4_0
  // continue
  // 			EQ_u8_u1_677_677_delayed_4_0 := (next_last_dest_id == 2 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 276
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  EQ_u8_u1_752_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_752_Sample/rr branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_752_Update/cr) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_752_Sample/ra branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_752_Update/ca)
  // 			$volatile send_to_2 := (EQ_u8_u1_677_677_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 277
  // (EQ_u8_u1_677_677_delayed_4_0 & continue)
  // EQ_u8_u1_677_677_delayed_4_0
  // continue
  // 			EQ_u8_u1_684_684_delayed_4_0 := (next_last_dest_id == 3 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 278
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  EQ_u8_u1_762_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_762_Sample/rr branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_762_Update/cr) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_762_Sample/ra branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_762_Update/ca)
  // 			$volatile send_to_3 := (EQ_u8_u1_684_684_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 279
  // (EQ_u8_u1_684_684_delayed_4_0 & continue)
  // EQ_u8_u1_684_684_delayed_4_0
  // continue
  // 			EQ_u8_u1_691_691_delayed_4_0 := (next_last_dest_id == 4 ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file .Aa/switch2x2.opt.aa, line 280
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  EQ_u8_u1_772_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_772_Sample/rr branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_772_Update/cr) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_772_Sample/ra branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/EQ_u8_u1_772_Update/ca)
  // 			$volatile send_to_4 := (EQ_u8_u1_691_691_delayed_4_0 & continue) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 281
  // (EQ_u8_u1_691_691_delayed_4_0 & continue)
  // EQ_u8_u1_691_691_delayed_4_0
  // continue
  // 			data_to_outport_697_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 282
  // data_to_outport
  W_data_to_outport_697_delayed_4_0_779_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_781_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_781_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_781_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_781_Update/ack)
  // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport_697_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 283
  // data_to_outport_697_delayed_4_0
  // noblock_obuf_4_1
  WPIPE_noblock_obuf_4_1_783_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_1_783_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_1_783_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_1_783_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_1_783_Update/ack)
  // 			data_to_outport_701_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 284
  // data_to_outport
  W_data_to_outport_701_delayed_4_0_786_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_788_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_788_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_788_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_788_Update/ack)
  // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport_701_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 285
  // data_to_outport_701_delayed_4_0
  // noblock_obuf_4_2
  WPIPE_noblock_obuf_4_2_790_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_2_790_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_2_790_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_2_790_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_2_790_Update/ack)
  // 			data_to_outport_705_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 286
  // data_to_outport
  W_data_to_outport_705_delayed_4_0_793_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_795_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_795_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_795_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_795_Update/ack)
  // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport_705_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 287
  // data_to_outport_705_delayed_4_0
  // noblock_obuf_4_3
  WPIPE_noblock_obuf_4_3_797_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_3_797_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_3_797_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_3_797_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_3_797_Update/ack)
  // 			data_to_outport_709_delayed_4_0 := data_to_outport $buffering 4 $cut_through // bits of buffering = 132. 
  //  file .Aa/switch2x2.opt.aa, line 288
  // data_to_outport
  W_data_to_outport_709_delayed_4_0_800_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_802_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_802_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_802_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/assign_stmt_802_Update/ack)
  // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport_709_delayed_4_0 $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch2x2.opt.aa, line 289
  // data_to_outport_709_delayed_4_0
  // noblock_obuf_4_4
  WPIPE_noblock_obuf_4_4_804_inst <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_4_804_Sample/req branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_4_804_Update/req) (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_4_804_Sample/ack branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/WPIPE_noblock_obuf_4_4_804_Update/ack)
  do_while_stmt_671_branch <=> (branch_block_stmt_670/do_while_stmt_671/do_while_stmt_671_loop_body/condition_evaluated) (branch_block_stmt_670/do_while_stmt_671/loop_exit/ack branch_block_stmt_670/do_while_stmt_671/loop_taken/ack)
}
$volatile $module [prioritySelect] 
{
  $in down_counter:$int<8>
  // can point into 
  active_packet:$int<3>
  // can point into 
  priority_index:$int<2>
  // can point into 
  p1_valid:$int<1>
  // can point into 
  p2_valid:$int<1>
  // can point into 
  p3_valid:$int<1>
  // can point into 
  p4_valid:$int<1>
  // can point into 
  $out next_active_packet:$int<3>
  // can point into 
  next_priority_index:$int<2>
  // can point into 
  // pipe-declarations for block %prioritySelect
  //  file .Aa/switch2x2.opt.aa, line 294
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %prioritySelect
    //  file .Aa/switch2x2.opt.aa, line 294
    // 0 
    $constant $W[konst_833_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (priority_index == 0 ) p1_valid  _b0  ) 
    // 0 
    $constant $W[konst_838_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_841_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 1 ) p2_valid  _b0  ) 
    // 1 
    $constant $W[konst_844_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_847_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 2 ) p3_valid  _b0  ) 
    // 2 
    $constant $W[konst_851_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_854_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 3 ) p4_valid  _b0  ) 
    // 3 
    $constant $W[konst_857_wire_constant] : $int<2> := _b11// 3
    // _b0 
    $constant $W[konst_860_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 0 ) p2_valid  _b0  ) 
    // 0 
    $constant $W[konst_867_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_870_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 1 ) p3_valid  _b0  ) 
    // 1 
    $constant $W[konst_873_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_876_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 2 ) p4_valid  _b0  ) 
    // 2 
    $constant $W[konst_880_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_883_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 3 ) p1_valid  _b0  ) 
    // 3 
    $constant $W[konst_886_wire_constant] : $int<2> := _b11// 3
    // _b0 
    $constant $W[konst_889_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 0 ) p3_valid  _b0  ) 
    // 0 
    $constant $W[konst_896_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_899_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 1 ) p4_valid  _b0  ) 
    // 1 
    $constant $W[konst_902_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_905_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 2 ) p1_valid  _b0  ) 
    // 2 
    $constant $W[konst_909_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_912_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 3 ) p2_valid  _b0  ) 
    // 3 
    $constant $W[konst_915_wire_constant] : $int<2> := _b11// 3
    // _b0 
    $constant $W[konst_918_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 0 ) p4_valid  _b0  ) 
    // 0 
    $constant $W[konst_925_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_928_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_931_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_934_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_938_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_941_wire_constant] : $int<1> := _b0// 0
    // ( $mux (priority_index == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_944_wire_constant] : $int<2> := _b11// 3
    // _b0 
    $constant $W[konst_947_wire_constant] : $int<1> := _b0// 0
    // ( $mux ( ~ d0 ) active_packet  ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  )  ) 
    // ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  ) 
    // ZERO_1
    $constant $W[R_ZERO_1_977_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_980_wire_constant] : $int<3> := _b001// 1
    // ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  ) 
    // ZERO_1
    $constant $W[R_ZERO_1_983_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_985_wire_constant] : $int<2> := _b01// 1
    // 1 
    $constant $W[konst_988_wire_constant] : $int<3> := _b001// 1
    // ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  ) 
    // ZERO_1
    $constant $W[R_ZERO_1_991_wire_constant] : $int<1> := _b0// 0
    // 2 
    $constant $W[konst_993_wire_constant] : $int<2> := _b10// 2
    // 1 
    $constant $W[konst_996_wire_constant] : $int<3> := _b001// 1
    // ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  ) 
    // ZERO_1
    $constant $W[R_ZERO_1_999_wire_constant] : $int<1> := _b0// 0
    // 3 
    $constant $W[konst_1001_wire_constant] : $int<2> := _b11// 3
    // 1 
    $constant $W[konst_1004_wire_constant] : $int<3> := _b001// 1
    // 0 
    $constant $W[konst_1006_wire_constant] : $int<3> := _b000// 0
    // ( $mux ( ~ d0 ) priority_index  ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  )  ) 
    // ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  ) 
    // 1 
    $constant $W[konst_1019_wire_constant] : $int<2> := _b01// 1
    // ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  ) 
    // 2 
    $constant $W[konst_1023_wire_constant] : $int<2> := _b10// 2
    // ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  ) 
    // 3 
    $constant $W[konst_1027_wire_constant] : $int<2> := _b11// 3
    // ( $mux select_fourth_priority (priority_index + 4 )  priority_index ) 
    // 4 
    $constant $W[konst_1031_wire_constant] : $int<2> := _b00// 4
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 299
    // d0
    $W[d0_835] : $int<1>
    // 	$volatile priority_1_validity := ((( $mux (priority_index == 0 ) p1_valid  _b0  )  | ( $mux (priority_index == 1 ) p2_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p3_valid  _b0  )  | ( $mux (priority_index == 3 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 300
    // (priority_index == 0 )
    $intermediate $W[EQ_u2_u1_839_wire] : $int<1>
    // ( $mux (priority_index == 0 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_842_wire] : $int<1>
    // (priority_index == 1 )
    $intermediate $W[EQ_u2_u1_845_wire] : $int<1>
    // ( $mux (priority_index == 1 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_848_wire] : $int<1>
    // (( $mux (priority_index == 0 ) p1_valid  _b0  )  | ( $mux (priority_index == 1 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_849_wire] : $int<1>
    // (priority_index == 2 )
    $intermediate $W[EQ_u2_u1_852_wire] : $int<1>
    // ( $mux (priority_index == 2 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_855_wire] : $int<1>
    // (priority_index == 3 )
    $intermediate $W[EQ_u2_u1_858_wire] : $int<1>
    // ( $mux (priority_index == 3 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_861_wire] : $int<1>
    // (( $mux (priority_index == 2 ) p3_valid  _b0  )  | ( $mux (priority_index == 3 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_862_wire] : $int<1>
    // priority_1_validity
    $W[priority_1_validity_864] : $int<1>
    // 	$volatile priority_2_validity := ((( $mux (priority_index == 0 ) p2_valid  _b0  )  | ( $mux (priority_index == 1 ) p3_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p4_valid  _b0  )  | ( $mux (priority_index == 3 ) p1_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 301
    // (priority_index == 0 )
    $intermediate $W[EQ_u2_u1_868_wire] : $int<1>
    // ( $mux (priority_index == 0 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_871_wire] : $int<1>
    // (priority_index == 1 )
    $intermediate $W[EQ_u2_u1_874_wire] : $int<1>
    // ( $mux (priority_index == 1 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_877_wire] : $int<1>
    // (( $mux (priority_index == 0 ) p2_valid  _b0  )  | ( $mux (priority_index == 1 ) p3_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_878_wire] : $int<1>
    // (priority_index == 2 )
    $intermediate $W[EQ_u2_u1_881_wire] : $int<1>
    // ( $mux (priority_index == 2 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_884_wire] : $int<1>
    // (priority_index == 3 )
    $intermediate $W[EQ_u2_u1_887_wire] : $int<1>
    // ( $mux (priority_index == 3 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_890_wire] : $int<1>
    // (( $mux (priority_index == 2 ) p4_valid  _b0  )  | ( $mux (priority_index == 3 ) p1_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_891_wire] : $int<1>
    // priority_2_validity
    $W[priority_2_validity_893] : $int<1>
    // 	$volatile priority_3_validity := ((( $mux (priority_index == 0 ) p3_valid  _b0  )  | ( $mux (priority_index == 1 ) p4_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p1_valid  _b0  )  | ( $mux (priority_index == 3 ) p2_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 302
    // (priority_index == 0 )
    $intermediate $W[EQ_u2_u1_897_wire] : $int<1>
    // ( $mux (priority_index == 0 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_900_wire] : $int<1>
    // (priority_index == 1 )
    $intermediate $W[EQ_u2_u1_903_wire] : $int<1>
    // ( $mux (priority_index == 1 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_906_wire] : $int<1>
    // (( $mux (priority_index == 0 ) p3_valid  _b0  )  | ( $mux (priority_index == 1 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_907_wire] : $int<1>
    // (priority_index == 2 )
    $intermediate $W[EQ_u2_u1_910_wire] : $int<1>
    // ( $mux (priority_index == 2 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_913_wire] : $int<1>
    // (priority_index == 3 )
    $intermediate $W[EQ_u2_u1_916_wire] : $int<1>
    // ( $mux (priority_index == 3 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_919_wire] : $int<1>
    // (( $mux (priority_index == 2 ) p1_valid  _b0  )  | ( $mux (priority_index == 3 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_920_wire] : $int<1>
    // priority_3_validity
    $W[priority_3_validity_922] : $int<1>
    // 	$volatile priority_4_validity := ((( $mux (priority_index == 0 ) p4_valid  _b0  )  | ( $mux (priority_index == 1 ) p1_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p2_valid  _b0  )  | ( $mux (priority_index == 3 ) p3_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 303
    // (priority_index == 0 )
    $intermediate $W[EQ_u2_u1_926_wire] : $int<1>
    // ( $mux (priority_index == 0 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_929_wire] : $int<1>
    // (priority_index == 1 )
    $intermediate $W[EQ_u2_u1_932_wire] : $int<1>
    // ( $mux (priority_index == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_935_wire] : $int<1>
    // (( $mux (priority_index == 0 ) p4_valid  _b0  )  | ( $mux (priority_index == 1 ) p1_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_936_wire] : $int<1>
    // (priority_index == 2 )
    $intermediate $W[EQ_u2_u1_939_wire] : $int<1>
    // ( $mux (priority_index == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_942_wire] : $int<1>
    // (priority_index == 3 )
    $intermediate $W[EQ_u2_u1_945_wire] : $int<1>
    // ( $mux (priority_index == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_948_wire] : $int<1>
    // (( $mux (priority_index == 2 ) p2_valid  _b0  )  | ( $mux (priority_index == 3 ) p3_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_949_wire] : $int<1>
    // priority_4_validity
    $W[priority_4_validity_951] : $int<1>
    // 	select_first_priority := (d0 & priority_1_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 304
    // select_first_priority
    $W[select_first_priority_956] : $int<1>
    // 	select_second_priority := (d0 & priority_2_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 305
    // select_second_priority
    $W[select_second_priority_961] : $int<1>
    // 	select_third_priority := (d0 & priority_3_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 306
    // select_third_priority
    $W[select_third_priority_966] : $int<1>
    // 	select_fourth_priority := (d0 & priority_4_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 307
    // select_fourth_priority
    $W[select_fourth_priority_971] : $int<1>
    // 	next_active_packet := ( $mux ( ~ d0 ) active_packet  ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 308
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_974_wire] : $int<1>
    // (ZERO_1 && priority_index)
    $intermediate $W[CONCAT_u1_u3_979_wire] : $int<3>
    // ((ZERO_1 && priority_index) + 1 )
    $intermediate $W[ADD_u3_u3_981_wire] : $int<3>
    // (priority_index + 1 )
    $intermediate $W[ADD_u2_u2_986_wire] : $int<2>
    // (ZERO_1 && (priority_index + 1 ))
    $intermediate $W[CONCAT_u1_u3_987_wire] : $int<3>
    // ((ZERO_1 && (priority_index + 1 )) + 1 )
    $intermediate $W[ADD_u3_u3_989_wire] : $int<3>
    // (priority_index + 2 )
    $intermediate $W[ADD_u2_u2_994_wire] : $int<2>
    // (ZERO_1 && (priority_index + 2 ))
    $intermediate $W[CONCAT_u1_u3_995_wire] : $int<3>
    // ((ZERO_1 && (priority_index + 2 )) + 1 )
    $intermediate $W[ADD_u3_u3_997_wire] : $int<3>
    // (priority_index + 3 )
    $intermediate $W[ADD_u2_u2_1002_wire] : $int<2>
    // (ZERO_1 && (priority_index + 3 ))
    $intermediate $W[CONCAT_u1_u3_1003_wire] : $int<3>
    // ((ZERO_1 && (priority_index + 3 )) + 1 )
    $intermediate $W[ADD_u3_u3_1005_wire] : $int<3>
    // ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  ) 
    $intermediate $W[MUX_1007_wire] : $int<3>
    // ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  ) 
    $intermediate $W[MUX_1008_wire] : $int<3>
    // ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  ) 
    $intermediate $W[MUX_1009_wire] : $int<3>
    // ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  ) 
    $intermediate $W[MUX_1010_wire] : $int<3>
    // next_active_packet
    // 	next_priority_index := ( $mux ( ~ d0 ) priority_index  ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 309
    // ( ~ d0 )
    $intermediate $W[NOT_u1_u1_1015_wire] : $int<1>
    // (priority_index + 1 )
    $intermediate $W[ADD_u2_u2_1020_wire] : $int<2>
    // (priority_index + 2 )
    $intermediate $W[ADD_u2_u2_1024_wire] : $int<2>
    // (priority_index + 3 )
    $intermediate $W[ADD_u2_u2_1028_wire] : $int<2>
    // (priority_index + 4 )
    $intermediate $W[ADD_u2_u2_1032_wire] : $int<2>
    // ( $mux select_fourth_priority (priority_index + 4 )  priority_index ) 
    $intermediate $W[MUX_1034_wire] : $int<2>
    // ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  ) 
    $intermediate $W[MUX_1035_wire] : $int<2>
    // ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  ) 
    $intermediate $W[MUX_1036_wire] : $int<2>
    // ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  ) 
    $intermediate $W[MUX_1037_wire] : $int<2>
    // next_priority_index
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 299
    // (down_counter == 0 )
    ==[EQ_u8_u1_834_inst] (down_counter konst_833_wire_constant) (d0_835)   
    $buffering  $out EQ_u8_u1_834_inst d0_835 1
    $delay EQ_u8_u1_834_inst 1
    // 	$volatile priority_1_validity := ((( $mux (priority_index == 0 ) p1_valid  _b0  )  | ( $mux (priority_index == 1 ) p2_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p3_valid  _b0  )  | ( $mux (priority_index == 3 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 300
    // (priority_index == 0 )
    ==[EQ_u2_u1_839_inst] (priority_index konst_838_wire_constant) (EQ_u2_u1_839_wire)   $flowthrough 
    $delay EQ_u2_u1_839_inst 0
    // ( $mux (priority_index == 0 ) p1_valid  _b0  ) 
    ? [MUX_842_inst] (EQ_u2_u1_839_wire p1_valid konst_841_wire_constant) (MUX_842_wire)  $flowthrough
    // (priority_index == 1 )
    ==[EQ_u2_u1_845_inst] (priority_index konst_844_wire_constant) (EQ_u2_u1_845_wire)   $flowthrough 
    $delay EQ_u2_u1_845_inst 0
    // ( $mux (priority_index == 1 ) p2_valid  _b0  ) 
    ? [MUX_848_inst] (EQ_u2_u1_845_wire p2_valid konst_847_wire_constant) (MUX_848_wire)  $flowthrough
    // (( $mux (priority_index == 0 ) p1_valid  _b0  )  | ( $mux (priority_index == 1 ) p2_valid  _b0  ) )
    |[OR_u1_u1_849_inst] (MUX_842_wire MUX_848_wire) (OR_u1_u1_849_wire)   $flowthrough 
    $delay OR_u1_u1_849_inst 0
    // (priority_index == 2 )
    ==[EQ_u2_u1_852_inst] (priority_index konst_851_wire_constant) (EQ_u2_u1_852_wire)   $flowthrough 
    $delay EQ_u2_u1_852_inst 0
    // ( $mux (priority_index == 2 ) p3_valid  _b0  ) 
    ? [MUX_855_inst] (EQ_u2_u1_852_wire p3_valid konst_854_wire_constant) (MUX_855_wire)  $flowthrough
    // (priority_index == 3 )
    ==[EQ_u2_u1_858_inst] (priority_index konst_857_wire_constant) (EQ_u2_u1_858_wire)   $flowthrough 
    $delay EQ_u2_u1_858_inst 0
    // ( $mux (priority_index == 3 ) p4_valid  _b0  ) 
    ? [MUX_861_inst] (EQ_u2_u1_858_wire p4_valid konst_860_wire_constant) (MUX_861_wire)  $flowthrough
    // (( $mux (priority_index == 2 ) p3_valid  _b0  )  | ( $mux (priority_index == 3 ) p4_valid  _b0  ) )
    |[OR_u1_u1_862_inst] (MUX_855_wire MUX_861_wire) (OR_u1_u1_862_wire)   $flowthrough 
    $delay OR_u1_u1_862_inst 0
    // ((( $mux (priority_index == 0 ) p1_valid  _b0  )  | ( $mux (priority_index == 1 ) p2_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p3_valid  _b0  )  | ( $mux (priority_index == 3 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_863_inst] (OR_u1_u1_849_wire OR_u1_u1_862_wire) (priority_1_validity_864)   $flowthrough 
    $delay OR_u1_u1_863_inst 0
    // 	$volatile priority_2_validity := ((( $mux (priority_index == 0 ) p2_valid  _b0  )  | ( $mux (priority_index == 1 ) p3_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p4_valid  _b0  )  | ( $mux (priority_index == 3 ) p1_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 301
    // (priority_index == 0 )
    ==[EQ_u2_u1_868_inst] (priority_index konst_867_wire_constant) (EQ_u2_u1_868_wire)   $flowthrough 
    $delay EQ_u2_u1_868_inst 0
    // ( $mux (priority_index == 0 ) p2_valid  _b0  ) 
    ? [MUX_871_inst] (EQ_u2_u1_868_wire p2_valid konst_870_wire_constant) (MUX_871_wire)  $flowthrough
    // (priority_index == 1 )
    ==[EQ_u2_u1_874_inst] (priority_index konst_873_wire_constant) (EQ_u2_u1_874_wire)   $flowthrough 
    $delay EQ_u2_u1_874_inst 0
    // ( $mux (priority_index == 1 ) p3_valid  _b0  ) 
    ? [MUX_877_inst] (EQ_u2_u1_874_wire p3_valid konst_876_wire_constant) (MUX_877_wire)  $flowthrough
    // (( $mux (priority_index == 0 ) p2_valid  _b0  )  | ( $mux (priority_index == 1 ) p3_valid  _b0  ) )
    |[OR_u1_u1_878_inst] (MUX_871_wire MUX_877_wire) (OR_u1_u1_878_wire)   $flowthrough 
    $delay OR_u1_u1_878_inst 0
    // (priority_index == 2 )
    ==[EQ_u2_u1_881_inst] (priority_index konst_880_wire_constant) (EQ_u2_u1_881_wire)   $flowthrough 
    $delay EQ_u2_u1_881_inst 0
    // ( $mux (priority_index == 2 ) p4_valid  _b0  ) 
    ? [MUX_884_inst] (EQ_u2_u1_881_wire p4_valid konst_883_wire_constant) (MUX_884_wire)  $flowthrough
    // (priority_index == 3 )
    ==[EQ_u2_u1_887_inst] (priority_index konst_886_wire_constant) (EQ_u2_u1_887_wire)   $flowthrough 
    $delay EQ_u2_u1_887_inst 0
    // ( $mux (priority_index == 3 ) p1_valid  _b0  ) 
    ? [MUX_890_inst] (EQ_u2_u1_887_wire p1_valid konst_889_wire_constant) (MUX_890_wire)  $flowthrough
    // (( $mux (priority_index == 2 ) p4_valid  _b0  )  | ( $mux (priority_index == 3 ) p1_valid  _b0  ) )
    |[OR_u1_u1_891_inst] (MUX_884_wire MUX_890_wire) (OR_u1_u1_891_wire)   $flowthrough 
    $delay OR_u1_u1_891_inst 0
    // ((( $mux (priority_index == 0 ) p2_valid  _b0  )  | ( $mux (priority_index == 1 ) p3_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p4_valid  _b0  )  | ( $mux (priority_index == 3 ) p1_valid  _b0  ) ))
    |[OR_u1_u1_892_inst] (OR_u1_u1_878_wire OR_u1_u1_891_wire) (priority_2_validity_893)   $flowthrough 
    $delay OR_u1_u1_892_inst 0
    // 	$volatile priority_3_validity := ((( $mux (priority_index == 0 ) p3_valid  _b0  )  | ( $mux (priority_index == 1 ) p4_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p1_valid  _b0  )  | ( $mux (priority_index == 3 ) p2_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 302
    // (priority_index == 0 )
    ==[EQ_u2_u1_897_inst] (priority_index konst_896_wire_constant) (EQ_u2_u1_897_wire)   $flowthrough 
    $delay EQ_u2_u1_897_inst 0
    // ( $mux (priority_index == 0 ) p3_valid  _b0  ) 
    ? [MUX_900_inst] (EQ_u2_u1_897_wire p3_valid konst_899_wire_constant) (MUX_900_wire)  $flowthrough
    // (priority_index == 1 )
    ==[EQ_u2_u1_903_inst] (priority_index konst_902_wire_constant) (EQ_u2_u1_903_wire)   $flowthrough 
    $delay EQ_u2_u1_903_inst 0
    // ( $mux (priority_index == 1 ) p4_valid  _b0  ) 
    ? [MUX_906_inst] (EQ_u2_u1_903_wire p4_valid konst_905_wire_constant) (MUX_906_wire)  $flowthrough
    // (( $mux (priority_index == 0 ) p3_valid  _b0  )  | ( $mux (priority_index == 1 ) p4_valid  _b0  ) )
    |[OR_u1_u1_907_inst] (MUX_900_wire MUX_906_wire) (OR_u1_u1_907_wire)   $flowthrough 
    $delay OR_u1_u1_907_inst 0
    // (priority_index == 2 )
    ==[EQ_u2_u1_910_inst] (priority_index konst_909_wire_constant) (EQ_u2_u1_910_wire)   $flowthrough 
    $delay EQ_u2_u1_910_inst 0
    // ( $mux (priority_index == 2 ) p1_valid  _b0  ) 
    ? [MUX_913_inst] (EQ_u2_u1_910_wire p1_valid konst_912_wire_constant) (MUX_913_wire)  $flowthrough
    // (priority_index == 3 )
    ==[EQ_u2_u1_916_inst] (priority_index konst_915_wire_constant) (EQ_u2_u1_916_wire)   $flowthrough 
    $delay EQ_u2_u1_916_inst 0
    // ( $mux (priority_index == 3 ) p2_valid  _b0  ) 
    ? [MUX_919_inst] (EQ_u2_u1_916_wire p2_valid konst_918_wire_constant) (MUX_919_wire)  $flowthrough
    // (( $mux (priority_index == 2 ) p1_valid  _b0  )  | ( $mux (priority_index == 3 ) p2_valid  _b0  ) )
    |[OR_u1_u1_920_inst] (MUX_913_wire MUX_919_wire) (OR_u1_u1_920_wire)   $flowthrough 
    $delay OR_u1_u1_920_inst 0
    // ((( $mux (priority_index == 0 ) p3_valid  _b0  )  | ( $mux (priority_index == 1 ) p4_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p1_valid  _b0  )  | ( $mux (priority_index == 3 ) p2_valid  _b0  ) ))
    |[OR_u1_u1_921_inst] (OR_u1_u1_907_wire OR_u1_u1_920_wire) (priority_3_validity_922)   $flowthrough 
    $delay OR_u1_u1_921_inst 0
    // 	$volatile priority_4_validity := ((( $mux (priority_index == 0 ) p4_valid  _b0  )  | ( $mux (priority_index == 1 ) p1_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p2_valid  _b0  )  | ( $mux (priority_index == 3 ) p3_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 303
    // (priority_index == 0 )
    ==[EQ_u2_u1_926_inst] (priority_index konst_925_wire_constant) (EQ_u2_u1_926_wire)   $flowthrough 
    $delay EQ_u2_u1_926_inst 0
    // ( $mux (priority_index == 0 ) p4_valid  _b0  ) 
    ? [MUX_929_inst] (EQ_u2_u1_926_wire p4_valid konst_928_wire_constant) (MUX_929_wire)  $flowthrough
    // (priority_index == 1 )
    ==[EQ_u2_u1_932_inst] (priority_index konst_931_wire_constant) (EQ_u2_u1_932_wire)   $flowthrough 
    $delay EQ_u2_u1_932_inst 0
    // ( $mux (priority_index == 1 ) p1_valid  _b0  ) 
    ? [MUX_935_inst] (EQ_u2_u1_932_wire p1_valid konst_934_wire_constant) (MUX_935_wire)  $flowthrough
    // (( $mux (priority_index == 0 ) p4_valid  _b0  )  | ( $mux (priority_index == 1 ) p1_valid  _b0  ) )
    |[OR_u1_u1_936_inst] (MUX_929_wire MUX_935_wire) (OR_u1_u1_936_wire)   $flowthrough 
    $delay OR_u1_u1_936_inst 0
    // (priority_index == 2 )
    ==[EQ_u2_u1_939_inst] (priority_index konst_938_wire_constant) (EQ_u2_u1_939_wire)   $flowthrough 
    $delay EQ_u2_u1_939_inst 0
    // ( $mux (priority_index == 2 ) p2_valid  _b0  ) 
    ? [MUX_942_inst] (EQ_u2_u1_939_wire p2_valid konst_941_wire_constant) (MUX_942_wire)  $flowthrough
    // (priority_index == 3 )
    ==[EQ_u2_u1_945_inst] (priority_index konst_944_wire_constant) (EQ_u2_u1_945_wire)   $flowthrough 
    $delay EQ_u2_u1_945_inst 0
    // ( $mux (priority_index == 3 ) p3_valid  _b0  ) 
    ? [MUX_948_inst] (EQ_u2_u1_945_wire p3_valid konst_947_wire_constant) (MUX_948_wire)  $flowthrough
    // (( $mux (priority_index == 2 ) p2_valid  _b0  )  | ( $mux (priority_index == 3 ) p3_valid  _b0  ) )
    |[OR_u1_u1_949_inst] (MUX_942_wire MUX_948_wire) (OR_u1_u1_949_wire)   $flowthrough 
    $delay OR_u1_u1_949_inst 0
    // ((( $mux (priority_index == 0 ) p4_valid  _b0  )  | ( $mux (priority_index == 1 ) p1_valid  _b0  ) ) | (( $mux (priority_index == 2 ) p2_valid  _b0  )  | ( $mux (priority_index == 3 ) p3_valid  _b0  ) ))
    |[OR_u1_u1_950_inst] (OR_u1_u1_936_wire OR_u1_u1_949_wire) (priority_4_validity_951)   $flowthrough 
    $delay OR_u1_u1_950_inst 0
    // 	select_first_priority := (d0 & priority_1_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 304
    // (d0 & priority_1_validity)
    &[AND_u1_u1_955_inst] (d0_835 priority_1_validity_864) (select_first_priority_956)   
    $buffering  $out AND_u1_u1_955_inst select_first_priority_956 1
    $delay AND_u1_u1_955_inst 1
    // 	select_second_priority := (d0 & priority_2_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 305
    // (d0 & priority_2_validity)
    &[AND_u1_u1_960_inst] (d0_835 priority_2_validity_893) (select_second_priority_961)   
    $buffering  $out AND_u1_u1_960_inst select_second_priority_961 1
    $delay AND_u1_u1_960_inst 1
    // 	select_third_priority := (d0 & priority_3_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 306
    // (d0 & priority_3_validity)
    &[AND_u1_u1_965_inst] (d0_835 priority_3_validity_922) (select_third_priority_966)   
    $buffering  $out AND_u1_u1_965_inst select_third_priority_966 1
    $delay AND_u1_u1_965_inst 1
    // 	select_fourth_priority := (d0 & priority_4_validity) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 307
    // (d0 & priority_4_validity)
    &[AND_u1_u1_970_inst] (d0_835 priority_4_validity_951) (select_fourth_priority_971)   
    $buffering  $out AND_u1_u1_970_inst select_fourth_priority_971 1
    $delay AND_u1_u1_970_inst 1
    // 	next_active_packet := ( $mux ( ~ d0 ) active_packet  ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 308
    // ( ~ d0 )
    ~ [NOT_u1_u1_974_inst] (d0_835) (NOT_u1_u1_974_wire)   $flowthrough
    $delay NOT_u1_u1_974_inst 0
    // (ZERO_1 && priority_index)
    &&[CONCAT_u1_u3_979_inst] (R_ZERO_1_977_wire_constant priority_index) (CONCAT_u1_u3_979_wire)   $flowthrough 
    $delay CONCAT_u1_u3_979_inst 0
    // ((ZERO_1 && priority_index) + 1 )
    +[ADD_u3_u3_981_inst] (CONCAT_u1_u3_979_wire konst_980_wire_constant) (ADD_u3_u3_981_wire)   $flowthrough 
    $delay ADD_u3_u3_981_inst 0
    // (priority_index + 1 )
    +[ADD_u2_u2_986_inst] (priority_index konst_985_wire_constant) (ADD_u2_u2_986_wire)   $flowthrough 
    $delay ADD_u2_u2_986_inst 0
    // (ZERO_1 && (priority_index + 1 ))
    &&[CONCAT_u1_u3_987_inst] (R_ZERO_1_983_wire_constant ADD_u2_u2_986_wire) (CONCAT_u1_u3_987_wire)   $flowthrough 
    $delay CONCAT_u1_u3_987_inst 0
    // ((ZERO_1 && (priority_index + 1 )) + 1 )
    +[ADD_u3_u3_989_inst] (CONCAT_u1_u3_987_wire konst_988_wire_constant) (ADD_u3_u3_989_wire)   $flowthrough 
    $delay ADD_u3_u3_989_inst 0
    // (priority_index + 2 )
    +[ADD_u2_u2_994_inst] (priority_index konst_993_wire_constant) (ADD_u2_u2_994_wire)   $flowthrough 
    $delay ADD_u2_u2_994_inst 0
    // (ZERO_1 && (priority_index + 2 ))
    &&[CONCAT_u1_u3_995_inst] (R_ZERO_1_991_wire_constant ADD_u2_u2_994_wire) (CONCAT_u1_u3_995_wire)   $flowthrough 
    $delay CONCAT_u1_u3_995_inst 0
    // ((ZERO_1 && (priority_index + 2 )) + 1 )
    +[ADD_u3_u3_997_inst] (CONCAT_u1_u3_995_wire konst_996_wire_constant) (ADD_u3_u3_997_wire)   $flowthrough 
    $delay ADD_u3_u3_997_inst 0
    // (priority_index + 3 )
    +[ADD_u2_u2_1002_inst] (priority_index konst_1001_wire_constant) (ADD_u2_u2_1002_wire)   $flowthrough 
    $delay ADD_u2_u2_1002_inst 0
    // (ZERO_1 && (priority_index + 3 ))
    &&[CONCAT_u1_u3_1003_inst] (R_ZERO_1_999_wire_constant ADD_u2_u2_1002_wire) (CONCAT_u1_u3_1003_wire)   $flowthrough 
    $delay CONCAT_u1_u3_1003_inst 0
    // ((ZERO_1 && (priority_index + 3 )) + 1 )
    +[ADD_u3_u3_1005_inst] (CONCAT_u1_u3_1003_wire konst_1004_wire_constant) (ADD_u3_u3_1005_wire)   $flowthrough 
    $delay ADD_u3_u3_1005_inst 0
    // ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  ) 
    ? [MUX_1007_inst] (select_fourth_priority_971 ADD_u3_u3_1005_wire konst_1006_wire_constant) (MUX_1007_wire)  $flowthrough
    // ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  ) 
    ? [MUX_1008_inst] (select_third_priority_966 ADD_u3_u3_997_wire MUX_1007_wire) (MUX_1008_wire)  $flowthrough
    // ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  ) 
    ? [MUX_1009_inst] (select_second_priority_961 ADD_u3_u3_989_wire MUX_1008_wire) (MUX_1009_wire)  $flowthrough
    // ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  ) 
    ? [MUX_1010_inst] (select_first_priority_956 ADD_u3_u3_981_wire MUX_1009_wire) (MUX_1010_wire)  $flowthrough
    // ( $mux ( ~ d0 ) active_packet  ( $mux select_first_priority ((ZERO_1 && priority_index) + 1 )  ( $mux select_second_priority ((ZERO_1 && (priority_index + 1 )) + 1 )  ( $mux select_third_priority ((ZERO_1 && (priority_index + 2 )) + 1 )  ( $mux select_fourth_priority ((ZERO_1 && (priority_index + 3 )) + 1 )  0  )  )  )  )  ) 
    ? [MUX_1011_inst] (NOT_u1_u1_974_wire active_packet MUX_1010_wire) (next_active_packet) 
    $buffering  $out MUX_1011_inst next_active_packet 1
    // 	next_priority_index := ( $mux ( ~ d0 ) priority_index  ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 309
    // ( ~ d0 )
    ~ [NOT_u1_u1_1015_inst] (d0_835) (NOT_u1_u1_1015_wire)   $flowthrough
    $delay NOT_u1_u1_1015_inst 0
    // (priority_index + 1 )
    +[ADD_u2_u2_1020_inst] (priority_index konst_1019_wire_constant) (ADD_u2_u2_1020_wire)   $flowthrough 
    $delay ADD_u2_u2_1020_inst 0
    // (priority_index + 2 )
    +[ADD_u2_u2_1024_inst] (priority_index konst_1023_wire_constant) (ADD_u2_u2_1024_wire)   $flowthrough 
    $delay ADD_u2_u2_1024_inst 0
    // (priority_index + 3 )
    +[ADD_u2_u2_1028_inst] (priority_index konst_1027_wire_constant) (ADD_u2_u2_1028_wire)   $flowthrough 
    $delay ADD_u2_u2_1028_inst 0
    // (priority_index + 4 )
    +[ADD_u2_u2_1032_inst] (priority_index konst_1031_wire_constant) (ADD_u2_u2_1032_wire)   $flowthrough 
    $delay ADD_u2_u2_1032_inst 0
    // ( $mux select_fourth_priority (priority_index + 4 )  priority_index ) 
    ? [MUX_1034_inst] (select_fourth_priority_971 ADD_u2_u2_1032_wire priority_index) (MUX_1034_wire)  $flowthrough
    // ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  ) 
    ? [MUX_1035_inst] (select_third_priority_966 ADD_u2_u2_1028_wire MUX_1034_wire) (MUX_1035_wire)  $flowthrough
    // ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  ) 
    ? [MUX_1036_inst] (select_second_priority_961 ADD_u2_u2_1024_wire MUX_1035_wire) (MUX_1036_wire)  $flowthrough
    // ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  ) 
    ? [MUX_1037_inst] (select_first_priority_956 ADD_u2_u2_1020_wire MUX_1036_wire) (MUX_1037_wire)  $flowthrough
    // ( $mux ( ~ d0 ) priority_index  ( $mux select_first_priority (priority_index + 1 )  ( $mux select_second_priority (priority_index + 2 )  ( $mux select_third_priority (priority_index + 3 )  ( $mux select_fourth_priority (priority_index + 4 )  priority_index )  )  )  )  ) 
    ? [MUX_1038_inst] (NOT_u1_u1_1015_wire priority_index MUX_1037_wire) (next_priority_index) 
    $buffering  $out MUX_1038_inst next_priority_index 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [outputPort_1_Daemon] 
{
  // pipe-declarations for block %outputPort_1_Daemon
  //  file .Aa/switch2x2.opt.aa, line 311
  // pipe-declarations for block %outputPort_1_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 316
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1042] // Branch Block  file .Aa/switch2x2.opt.aa, line 316
    {
      $P [branch_block_stmt_1042__entry__]
      branch_block_stmt_1042__entry__ <-| ($entry)
      $P [branch_block_stmt_1042__exit__]
      branch_block_stmt_1042__exit__ |-> ($exit)
      $P [do_while_stmt_1043__entry__] 
      $P [do_while_stmt_1043__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 318
      <o> [do_while_stmt_1043]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1043__entry__] 
        $P[do_while_stmt_1043__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1043_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_1045
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1045_sample_start_] 
          $T[phi_stmt_1045_sample_completed_] 
          $T[phi_stmt_1045_update_start_] 
          $T[phi_stmt_1045_update_completed_] 
          $T[phi_stmt_1045_sample_start__ps] 
          phi_stmt_1045_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1045_sample_completed__ps] 
          phi_stmt_1045_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1045_update_start__ps] 
          phi_stmt_1045_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1045_update_completed__ps] 
          phi_stmt_1045_update_completed_ <-& (phi_stmt_1045_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1045_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1045_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1045_update_start_)
          $T[phi_stmt_1045_loopback_trigger] 
          phi_stmt_1045_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1045_loopback_sample_req] 
          $T[phi_stmt_1045_loopback_sample_req_ps] 
          phi_stmt_1045_loopback_sample_req <-& (phi_stmt_1045_loopback_sample_req_ps)
          phi_stmt_1045_loopback_sample_req &-> ($null)
          $T[phi_stmt_1045_entry_trigger] 
          phi_stmt_1045_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1045_entry_sample_req] 
          $T[phi_stmt_1045_entry_sample_req_ps] 
          phi_stmt_1045_entry_sample_req <-& (phi_stmt_1045_entry_sample_req_ps)
          phi_stmt_1045_entry_sample_req &-> ($null)
          phi_stmt_1045_update_start_ o<-& (phi_stmt_1045_update_completed_ 0)
          phi_stmt_1045_sample_start_ o<-& (phi_stmt_1045_sample_completed_ 1)
          $T[phi_stmt_1045_merged_reqs] 
          $T[phi_stmt_1045_phi_mux_ack] 
          $T[phi_stmt_1045_phi_mux_ack_ps] 
          phi_stmt_1045_phi_mux_ack_ps <-& (phi_stmt_1045_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1045_update_completed_)
          $T[R_ZERO_8_1047_sample_start__ps] 
          $T[R_ZERO_8_1047_sample_completed__ps] 
          $T[R_ZERO_8_1047_update_start__ps] 
          $T[R_ZERO_8_1047_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1047_sample_start_] 
          $T[R_ZERO_8_1047_sample_completed_] 
          R_ZERO_8_1047_sample_completed_ <-& (R_ZERO_8_1047_sample_start_)
          $T[R_ZERO_8_1047_update_start_] 
          $T [R_ZERO_8_1047_update_completed_] $delay 
          R_ZERO_8_1047_update_completed_ <-& (R_ZERO_8_1047_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1047_sample_start_ <-& (R_ZERO_8_1047_sample_start__ps)
          R_ZERO_8_1047_update_start_ <-& (R_ZERO_8_1047_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1047_sample_completed__ps <-& (R_ZERO_8_1047_sample_completed_)
          R_ZERO_8_1047_update_completed__ps <-& (R_ZERO_8_1047_update_completed_)
          $T[R_next_down_counter_1048_sample_start__ps] 
          $T[R_next_down_counter_1048_sample_completed__ps] 
          $T[R_next_down_counter_1048_update_start__ps] 
          $T[R_next_down_counter_1048_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1048_sample_start_] 
          $T[R_next_down_counter_1048_sample_completed_] 
          $T[R_next_down_counter_1048_update_start_] 
          $T[R_next_down_counter_1048_update_completed_] 
          ;;[R_next_down_counter_1048_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1048_sample_start_ &-> (R_next_down_counter_1048_Sample)
          R_next_down_counter_1048_sample_completed_ <-& (R_next_down_counter_1048_Sample)
          ;;[R_next_down_counter_1048_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1048_update_start_ &-> (R_next_down_counter_1048_Update)
          R_next_down_counter_1048_update_completed_ <-& (R_next_down_counter_1048_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1048_sample_start_ <-& (R_next_down_counter_1048_sample_start__ps)
          R_next_down_counter_1048_update_start_ <-& (R_next_down_counter_1048_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1048_sample_completed__ps <-& (R_next_down_counter_1048_sample_completed_)
          R_next_down_counter_1048_update_completed__ps <-& (R_next_down_counter_1048_update_completed_)
          $phisequencer [ phi_stmt_1045_phi_seq] : 
          phi_stmt_1045_entry_trigger R_ZERO_8_1047_sample_start__ps R_ZERO_8_1047_sample_completed__ps R_ZERO_8_1047_update_start__ps R_ZERO_8_1047_update_completed__ps phi_stmt_1045_loopback_trigger R_next_down_counter_1048_sample_start__ps R_next_down_counter_1048_sample_completed__ps R_next_down_counter_1048_update_start__ps R_next_down_counter_1048_update_completed__ps :
          phi_stmt_1045_sample_start__ps phi_stmt_1045_sample_completed__ps phi_stmt_1045_update_start__ps phi_stmt_1045_update_completed__ps :
          phi_stmt_1045_entry_sample_req_ps phi_stmt_1045_loopback_sample_req_ps : 
          phi_stmt_1045_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1045
          // start:  multi-source PHI statement phi_stmt_1049
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1049_sample_start_] 
          $T[phi_stmt_1049_sample_completed_] 
          $T[phi_stmt_1049_update_start_] 
          $T[phi_stmt_1049_update_completed_] 
          $T[phi_stmt_1049_sample_start__ps] 
          phi_stmt_1049_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1049_sample_completed__ps] 
          phi_stmt_1049_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1049_update_start__ps] 
          phi_stmt_1049_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1049_update_completed__ps] 
          phi_stmt_1049_update_completed_ <-& (phi_stmt_1049_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1049_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1049_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1049_update_start_)
          $T[phi_stmt_1049_loopback_trigger] 
          phi_stmt_1049_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1049_loopback_sample_req] 
          $T[phi_stmt_1049_loopback_sample_req_ps] 
          phi_stmt_1049_loopback_sample_req <-& (phi_stmt_1049_loopback_sample_req_ps)
          phi_stmt_1049_loopback_sample_req &-> ($null)
          $T[phi_stmt_1049_entry_trigger] 
          phi_stmt_1049_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1049_entry_sample_req] 
          $T[phi_stmt_1049_entry_sample_req_ps] 
          phi_stmt_1049_entry_sample_req <-& (phi_stmt_1049_entry_sample_req_ps)
          phi_stmt_1049_entry_sample_req &-> ($null)
          phi_stmt_1049_update_start_ o<-& (phi_stmt_1049_update_completed_ 0)
          phi_stmt_1049_sample_start_ o<-& (phi_stmt_1049_sample_completed_ 1)
          $T[phi_stmt_1049_merged_reqs] 
          $T[phi_stmt_1049_phi_mux_ack] 
          $T[phi_stmt_1049_phi_mux_ack_ps] 
          phi_stmt_1049_phi_mux_ack_ps <-& (phi_stmt_1049_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1049_update_completed_)
          $T[R_ZERO_33_1051_sample_start__ps] 
          $T[R_ZERO_33_1051_sample_completed__ps] 
          $T[R_ZERO_33_1051_update_start__ps] 
          $T[R_ZERO_33_1051_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1051_sample_start_] 
          $T[R_ZERO_33_1051_sample_completed_] 
          R_ZERO_33_1051_sample_completed_ <-& (R_ZERO_33_1051_sample_start_)
          $T[R_ZERO_33_1051_update_start_] 
          $T [R_ZERO_33_1051_update_completed_] $delay 
          R_ZERO_33_1051_update_completed_ <-& (R_ZERO_33_1051_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1051_sample_start_ <-& (R_ZERO_33_1051_sample_start__ps)
          R_ZERO_33_1051_update_start_ <-& (R_ZERO_33_1051_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1051_sample_completed__ps <-& (R_ZERO_33_1051_sample_completed_)
          R_ZERO_33_1051_update_completed__ps <-& (R_ZERO_33_1051_update_completed_)
          $T[RPIPE_noblock_obuf_1_1_1053_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_1053_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_1_1053_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_1053_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_1
          $T[RPIPE_noblock_obuf_1_1_1053_sample_start_] 
          $T[RPIPE_noblock_obuf_1_1_1053_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_1_1053_update_start_] 
          $T[RPIPE_noblock_obuf_1_1_1053_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_1_1053 with guard R_read_from_1_1052
          // root phi_stmt_1049 not in visited_elements
          // root phi_stmt_1054 not in visited_elements
          // root phi_stmt_1059 not in visited_elements
          // root phi_stmt_1064 not in visited_elements
          // root phi_stmt_1069 not in visited_elements
          // root phi_stmt_1077 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_1_1053_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_1_1053_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_1_1053_sample_start_ &-> (RPIPE_noblock_obuf_1_1_1053_Sample)
          RPIPE_noblock_obuf_1_1_1053_sample_completed_ <-& (RPIPE_noblock_obuf_1_1_1053_Sample)
          RPIPE_noblock_obuf_1_1_1053_update_start_ <-& (RPIPE_noblock_obuf_1_1_1053_sample_completed_)
          RPIPE_noblock_obuf_1_1_1053_update_start_ &-> (RPIPE_noblock_obuf_1_1_1053_Update)
          RPIPE_noblock_obuf_1_1_1053_update_completed_ <-& (RPIPE_noblock_obuf_1_1_1053_Update)
          RPIPE_noblock_obuf_1_1_1053_sample_start_ o<-& (RPIPE_noblock_obuf_1_1_1053_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_1_1053_sample_start_ <-& (RPIPE_noblock_obuf_1_1_1053_sample_start__ps)
          RPIPE_noblock_obuf_1_1_1053_update_start_ <-& (RPIPE_noblock_obuf_1_1_1053_update_start__ps)
          // RAW reenables for noblock_obuf_1_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_1_1053_sample_completed__ps <-& (RPIPE_noblock_obuf_1_1_1053_sample_completed_)
          RPIPE_noblock_obuf_1_1_1053_update_completed__ps <-& (RPIPE_noblock_obuf_1_1_1053_update_completed_)
          $phisequencer [ phi_stmt_1049_phi_seq] : 
          phi_stmt_1049_entry_trigger R_ZERO_33_1051_sample_start__ps R_ZERO_33_1051_sample_completed__ps R_ZERO_33_1051_update_start__ps R_ZERO_33_1051_update_completed__ps phi_stmt_1049_loopback_trigger RPIPE_noblock_obuf_1_1_1053_sample_start__ps RPIPE_noblock_obuf_1_1_1053_sample_completed__ps RPIPE_noblock_obuf_1_1_1053_update_start__ps RPIPE_noblock_obuf_1_1_1053_update_completed__ps :
          phi_stmt_1049_sample_start__ps phi_stmt_1049_sample_completed__ps phi_stmt_1049_update_start__ps phi_stmt_1049_update_completed__ps :
          phi_stmt_1049_entry_sample_req_ps phi_stmt_1049_loopback_sample_req_ps : 
          phi_stmt_1049_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1049
          // start:  multi-source PHI statement phi_stmt_1054
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1054_sample_start_] 
          $T[phi_stmt_1054_sample_completed_] 
          $T[phi_stmt_1054_update_start_] 
          $T[phi_stmt_1054_update_completed_] 
          $T[phi_stmt_1054_sample_start__ps] 
          phi_stmt_1054_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1054_sample_completed__ps] 
          phi_stmt_1054_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1054_update_start__ps] 
          phi_stmt_1054_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1054_update_completed__ps] 
          phi_stmt_1054_update_completed_ <-& (phi_stmt_1054_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1054_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1054_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1054_update_start_)
          $T[phi_stmt_1054_loopback_trigger] 
          phi_stmt_1054_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1054_loopback_sample_req] 
          $T[phi_stmt_1054_loopback_sample_req_ps] 
          phi_stmt_1054_loopback_sample_req <-& (phi_stmt_1054_loopback_sample_req_ps)
          phi_stmt_1054_loopback_sample_req &-> ($null)
          $T[phi_stmt_1054_entry_trigger] 
          phi_stmt_1054_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1054_entry_sample_req] 
          $T[phi_stmt_1054_entry_sample_req_ps] 
          phi_stmt_1054_entry_sample_req <-& (phi_stmt_1054_entry_sample_req_ps)
          phi_stmt_1054_entry_sample_req &-> ($null)
          phi_stmt_1054_update_start_ o<-& (phi_stmt_1054_update_completed_ 0)
          phi_stmt_1054_sample_start_ o<-& (phi_stmt_1054_sample_completed_ 1)
          $T[phi_stmt_1054_merged_reqs] 
          $T[phi_stmt_1054_phi_mux_ack] 
          $T[phi_stmt_1054_phi_mux_ack_ps] 
          phi_stmt_1054_phi_mux_ack_ps <-& (phi_stmt_1054_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1054_update_completed_)
          $T[R_ZERO_33_1056_sample_start__ps] 
          $T[R_ZERO_33_1056_sample_completed__ps] 
          $T[R_ZERO_33_1056_update_start__ps] 
          $T[R_ZERO_33_1056_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1056_sample_start_] 
          $T[R_ZERO_33_1056_sample_completed_] 
          R_ZERO_33_1056_sample_completed_ <-& (R_ZERO_33_1056_sample_start_)
          $T[R_ZERO_33_1056_update_start_] 
          $T [R_ZERO_33_1056_update_completed_] $delay 
          R_ZERO_33_1056_update_completed_ <-& (R_ZERO_33_1056_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1056_sample_start_ <-& (R_ZERO_33_1056_sample_start__ps)
          R_ZERO_33_1056_update_start_ <-& (R_ZERO_33_1056_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1056_sample_completed__ps <-& (R_ZERO_33_1056_sample_completed_)
          R_ZERO_33_1056_update_completed__ps <-& (R_ZERO_33_1056_update_completed_)
          $T[RPIPE_noblock_obuf_2_1_1058_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_1058_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_1_1058_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_1058_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_1
          $T[RPIPE_noblock_obuf_2_1_1058_sample_start_] 
          $T[RPIPE_noblock_obuf_2_1_1058_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_1_1058_update_start_] 
          $T[RPIPE_noblock_obuf_2_1_1058_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_1_1058 with guard R_read_from_2_1057
          // root phi_stmt_1054 not in visited_elements
          // root phi_stmt_1059 not in visited_elements
          // root phi_stmt_1064 not in visited_elements
          // root phi_stmt_1069 not in visited_elements
          // root phi_stmt_1077 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_1_1058_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_1_1058_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_1_1058_sample_start_ &-> (RPIPE_noblock_obuf_2_1_1058_Sample)
          RPIPE_noblock_obuf_2_1_1058_sample_completed_ <-& (RPIPE_noblock_obuf_2_1_1058_Sample)
          RPIPE_noblock_obuf_2_1_1058_update_start_ <-& (RPIPE_noblock_obuf_2_1_1058_sample_completed_)
          RPIPE_noblock_obuf_2_1_1058_update_start_ &-> (RPIPE_noblock_obuf_2_1_1058_Update)
          RPIPE_noblock_obuf_2_1_1058_update_completed_ <-& (RPIPE_noblock_obuf_2_1_1058_Update)
          RPIPE_noblock_obuf_2_1_1058_sample_start_ o<-& (RPIPE_noblock_obuf_2_1_1058_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_1_1058_sample_start_ <-& (RPIPE_noblock_obuf_2_1_1058_sample_start__ps)
          RPIPE_noblock_obuf_2_1_1058_update_start_ <-& (RPIPE_noblock_obuf_2_1_1058_update_start__ps)
          // RAW reenables for noblock_obuf_2_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_1_1058_sample_completed__ps <-& (RPIPE_noblock_obuf_2_1_1058_sample_completed_)
          RPIPE_noblock_obuf_2_1_1058_update_completed__ps <-& (RPIPE_noblock_obuf_2_1_1058_update_completed_)
          $phisequencer [ phi_stmt_1054_phi_seq] : 
          phi_stmt_1054_entry_trigger R_ZERO_33_1056_sample_start__ps R_ZERO_33_1056_sample_completed__ps R_ZERO_33_1056_update_start__ps R_ZERO_33_1056_update_completed__ps phi_stmt_1054_loopback_trigger RPIPE_noblock_obuf_2_1_1058_sample_start__ps RPIPE_noblock_obuf_2_1_1058_sample_completed__ps RPIPE_noblock_obuf_2_1_1058_update_start__ps RPIPE_noblock_obuf_2_1_1058_update_completed__ps :
          phi_stmt_1054_sample_start__ps phi_stmt_1054_sample_completed__ps phi_stmt_1054_update_start__ps phi_stmt_1054_update_completed__ps :
          phi_stmt_1054_entry_sample_req_ps phi_stmt_1054_loopback_sample_req_ps : 
          phi_stmt_1054_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1054
          // start:  multi-source PHI statement phi_stmt_1059
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1059_sample_start_] 
          $T[phi_stmt_1059_sample_completed_] 
          $T[phi_stmt_1059_update_start_] 
          $T[phi_stmt_1059_update_completed_] 
          $T[phi_stmt_1059_sample_start__ps] 
          phi_stmt_1059_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1059_sample_completed__ps] 
          phi_stmt_1059_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1059_update_start__ps] 
          phi_stmt_1059_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1059_update_completed__ps] 
          phi_stmt_1059_update_completed_ <-& (phi_stmt_1059_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1059_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1059_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1059_update_start_)
          $T[phi_stmt_1059_loopback_trigger] 
          phi_stmt_1059_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1059_loopback_sample_req] 
          $T[phi_stmt_1059_loopback_sample_req_ps] 
          phi_stmt_1059_loopback_sample_req <-& (phi_stmt_1059_loopback_sample_req_ps)
          phi_stmt_1059_loopback_sample_req &-> ($null)
          $T[phi_stmt_1059_entry_trigger] 
          phi_stmt_1059_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1059_entry_sample_req] 
          $T[phi_stmt_1059_entry_sample_req_ps] 
          phi_stmt_1059_entry_sample_req <-& (phi_stmt_1059_entry_sample_req_ps)
          phi_stmt_1059_entry_sample_req &-> ($null)
          phi_stmt_1059_update_start_ o<-& (phi_stmt_1059_update_completed_ 0)
          phi_stmt_1059_sample_start_ o<-& (phi_stmt_1059_sample_completed_ 1)
          $T[phi_stmt_1059_merged_reqs] 
          $T[phi_stmt_1059_phi_mux_ack] 
          $T[phi_stmt_1059_phi_mux_ack_ps] 
          phi_stmt_1059_phi_mux_ack_ps <-& (phi_stmt_1059_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1059_update_completed_)
          $T[R_ZERO_33_1061_sample_start__ps] 
          $T[R_ZERO_33_1061_sample_completed__ps] 
          $T[R_ZERO_33_1061_update_start__ps] 
          $T[R_ZERO_33_1061_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1061_sample_start_] 
          $T[R_ZERO_33_1061_sample_completed_] 
          R_ZERO_33_1061_sample_completed_ <-& (R_ZERO_33_1061_sample_start_)
          $T[R_ZERO_33_1061_update_start_] 
          $T [R_ZERO_33_1061_update_completed_] $delay 
          R_ZERO_33_1061_update_completed_ <-& (R_ZERO_33_1061_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1061_sample_start_ <-& (R_ZERO_33_1061_sample_start__ps)
          R_ZERO_33_1061_update_start_ <-& (R_ZERO_33_1061_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1061_sample_completed__ps <-& (R_ZERO_33_1061_sample_completed_)
          R_ZERO_33_1061_update_completed__ps <-& (R_ZERO_33_1061_update_completed_)
          $T[RPIPE_noblock_obuf_3_1_1063_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_1063_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_1_1063_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_1063_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_1
          $T[RPIPE_noblock_obuf_3_1_1063_sample_start_] 
          $T[RPIPE_noblock_obuf_3_1_1063_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_1_1063_update_start_] 
          $T[RPIPE_noblock_obuf_3_1_1063_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_1_1063 with guard R_read_from_3_1062
          // root phi_stmt_1059 not in visited_elements
          // root phi_stmt_1064 not in visited_elements
          // root phi_stmt_1069 not in visited_elements
          // root phi_stmt_1077 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_1_1063_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_1_1063_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_1_1063_sample_start_ &-> (RPIPE_noblock_obuf_3_1_1063_Sample)
          RPIPE_noblock_obuf_3_1_1063_sample_completed_ <-& (RPIPE_noblock_obuf_3_1_1063_Sample)
          RPIPE_noblock_obuf_3_1_1063_update_start_ <-& (RPIPE_noblock_obuf_3_1_1063_sample_completed_)
          RPIPE_noblock_obuf_3_1_1063_update_start_ &-> (RPIPE_noblock_obuf_3_1_1063_Update)
          RPIPE_noblock_obuf_3_1_1063_update_completed_ <-& (RPIPE_noblock_obuf_3_1_1063_Update)
          RPIPE_noblock_obuf_3_1_1063_sample_start_ o<-& (RPIPE_noblock_obuf_3_1_1063_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_1_1063_sample_start_ <-& (RPIPE_noblock_obuf_3_1_1063_sample_start__ps)
          RPIPE_noblock_obuf_3_1_1063_update_start_ <-& (RPIPE_noblock_obuf_3_1_1063_update_start__ps)
          // RAW reenables for noblock_obuf_3_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_1_1063_sample_completed__ps <-& (RPIPE_noblock_obuf_3_1_1063_sample_completed_)
          RPIPE_noblock_obuf_3_1_1063_update_completed__ps <-& (RPIPE_noblock_obuf_3_1_1063_update_completed_)
          $phisequencer [ phi_stmt_1059_phi_seq] : 
          phi_stmt_1059_entry_trigger R_ZERO_33_1061_sample_start__ps R_ZERO_33_1061_sample_completed__ps R_ZERO_33_1061_update_start__ps R_ZERO_33_1061_update_completed__ps phi_stmt_1059_loopback_trigger RPIPE_noblock_obuf_3_1_1063_sample_start__ps RPIPE_noblock_obuf_3_1_1063_sample_completed__ps RPIPE_noblock_obuf_3_1_1063_update_start__ps RPIPE_noblock_obuf_3_1_1063_update_completed__ps :
          phi_stmt_1059_sample_start__ps phi_stmt_1059_sample_completed__ps phi_stmt_1059_update_start__ps phi_stmt_1059_update_completed__ps :
          phi_stmt_1059_entry_sample_req_ps phi_stmt_1059_loopback_sample_req_ps : 
          phi_stmt_1059_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1059
          // start:  multi-source PHI statement phi_stmt_1064
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1064_sample_start_] 
          $T[phi_stmt_1064_sample_completed_] 
          $T[phi_stmt_1064_update_start_] 
          $T[phi_stmt_1064_update_completed_] 
          $T[phi_stmt_1064_sample_start__ps] 
          phi_stmt_1064_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1064_sample_completed__ps] 
          phi_stmt_1064_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1064_update_start__ps] 
          phi_stmt_1064_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1064_update_completed__ps] 
          phi_stmt_1064_update_completed_ <-& (phi_stmt_1064_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1064_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1064_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1064_update_start_)
          $T[phi_stmt_1064_loopback_trigger] 
          phi_stmt_1064_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1064_loopback_sample_req] 
          $T[phi_stmt_1064_loopback_sample_req_ps] 
          phi_stmt_1064_loopback_sample_req <-& (phi_stmt_1064_loopback_sample_req_ps)
          phi_stmt_1064_loopback_sample_req &-> ($null)
          $T[phi_stmt_1064_entry_trigger] 
          phi_stmt_1064_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1064_entry_sample_req] 
          $T[phi_stmt_1064_entry_sample_req_ps] 
          phi_stmt_1064_entry_sample_req <-& (phi_stmt_1064_entry_sample_req_ps)
          phi_stmt_1064_entry_sample_req &-> ($null)
          phi_stmt_1064_update_start_ o<-& (phi_stmt_1064_update_completed_ 0)
          phi_stmt_1064_sample_start_ o<-& (phi_stmt_1064_sample_completed_ 1)
          $T[phi_stmt_1064_merged_reqs] 
          $T[phi_stmt_1064_phi_mux_ack] 
          $T[phi_stmt_1064_phi_mux_ack_ps] 
          phi_stmt_1064_phi_mux_ack_ps <-& (phi_stmt_1064_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1064_update_completed_)
          $T[R_ZERO_33_1066_sample_start__ps] 
          $T[R_ZERO_33_1066_sample_completed__ps] 
          $T[R_ZERO_33_1066_update_start__ps] 
          $T[R_ZERO_33_1066_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1066_sample_start_] 
          $T[R_ZERO_33_1066_sample_completed_] 
          R_ZERO_33_1066_sample_completed_ <-& (R_ZERO_33_1066_sample_start_)
          $T[R_ZERO_33_1066_update_start_] 
          $T [R_ZERO_33_1066_update_completed_] $delay 
          R_ZERO_33_1066_update_completed_ <-& (R_ZERO_33_1066_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1066_sample_start_ <-& (R_ZERO_33_1066_sample_start__ps)
          R_ZERO_33_1066_update_start_ <-& (R_ZERO_33_1066_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1066_sample_completed__ps <-& (R_ZERO_33_1066_sample_completed_)
          R_ZERO_33_1066_update_completed__ps <-& (R_ZERO_33_1066_update_completed_)
          $T[RPIPE_noblock_obuf_4_1_1068_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_1068_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_1_1068_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_1068_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_1
          $T[RPIPE_noblock_obuf_4_1_1068_sample_start_] 
          $T[RPIPE_noblock_obuf_4_1_1068_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_1_1068_update_start_] 
          $T[RPIPE_noblock_obuf_4_1_1068_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_1_1068 with guard R_read_from_4_1067
          // root phi_stmt_1064 not in visited_elements
          // root phi_stmt_1069 not in visited_elements
          // root phi_stmt_1077 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_1_1068_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_1_1068_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_1_1068_sample_start_ &-> (RPIPE_noblock_obuf_4_1_1068_Sample)
          RPIPE_noblock_obuf_4_1_1068_sample_completed_ <-& (RPIPE_noblock_obuf_4_1_1068_Sample)
          RPIPE_noblock_obuf_4_1_1068_update_start_ <-& (RPIPE_noblock_obuf_4_1_1068_sample_completed_)
          RPIPE_noblock_obuf_4_1_1068_update_start_ &-> (RPIPE_noblock_obuf_4_1_1068_Update)
          RPIPE_noblock_obuf_4_1_1068_update_completed_ <-& (RPIPE_noblock_obuf_4_1_1068_Update)
          RPIPE_noblock_obuf_4_1_1068_sample_start_ o<-& (RPIPE_noblock_obuf_4_1_1068_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_1_1068_sample_start_ <-& (RPIPE_noblock_obuf_4_1_1068_sample_start__ps)
          RPIPE_noblock_obuf_4_1_1068_update_start_ <-& (RPIPE_noblock_obuf_4_1_1068_update_start__ps)
          // RAW reenables for noblock_obuf_4_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_1_1068_sample_completed__ps <-& (RPIPE_noblock_obuf_4_1_1068_sample_completed_)
          RPIPE_noblock_obuf_4_1_1068_update_completed__ps <-& (RPIPE_noblock_obuf_4_1_1068_update_completed_)
          $phisequencer [ phi_stmt_1064_phi_seq] : 
          phi_stmt_1064_entry_trigger R_ZERO_33_1066_sample_start__ps R_ZERO_33_1066_sample_completed__ps R_ZERO_33_1066_update_start__ps R_ZERO_33_1066_update_completed__ps phi_stmt_1064_loopback_trigger RPIPE_noblock_obuf_4_1_1068_sample_start__ps RPIPE_noblock_obuf_4_1_1068_sample_completed__ps RPIPE_noblock_obuf_4_1_1068_update_start__ps RPIPE_noblock_obuf_4_1_1068_update_completed__ps :
          phi_stmt_1064_sample_start__ps phi_stmt_1064_sample_completed__ps phi_stmt_1064_update_start__ps phi_stmt_1064_update_completed__ps :
          phi_stmt_1064_entry_sample_req_ps phi_stmt_1064_loopback_sample_req_ps : 
          phi_stmt_1064_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1064
          // start:  multi-source PHI statement phi_stmt_1069
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1069_sample_start_] 
          $T[phi_stmt_1069_sample_completed_] 
          $T[phi_stmt_1069_update_start_] 
          $T[phi_stmt_1069_update_completed_] 
          $T[phi_stmt_1069_sample_start__ps] 
          phi_stmt_1069_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1069_sample_completed__ps] 
          phi_stmt_1069_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1069_update_start__ps] 
          phi_stmt_1069_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1069_update_completed__ps] 
          phi_stmt_1069_update_completed_ <-& (phi_stmt_1069_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1069_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1069_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1069_update_start_)
          $T[phi_stmt_1069_loopback_trigger] 
          phi_stmt_1069_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1069_loopback_sample_req] 
          $T[phi_stmt_1069_loopback_sample_req_ps] 
          phi_stmt_1069_loopback_sample_req <-& (phi_stmt_1069_loopback_sample_req_ps)
          phi_stmt_1069_loopback_sample_req &-> ($null)
          $T[phi_stmt_1069_entry_trigger] 
          phi_stmt_1069_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1069_entry_sample_req] 
          $T[phi_stmt_1069_entry_sample_req_ps] 
          phi_stmt_1069_entry_sample_req <-& (phi_stmt_1069_entry_sample_req_ps)
          phi_stmt_1069_entry_sample_req &-> ($null)
          phi_stmt_1069_update_start_ o<-& (phi_stmt_1069_update_completed_ 0)
          phi_stmt_1069_sample_start_ o<-& (phi_stmt_1069_sample_completed_ 1)
          $T[phi_stmt_1069_merged_reqs] 
          $T[phi_stmt_1069_phi_mux_ack] 
          $T[phi_stmt_1069_phi_mux_ack_ps] 
          phi_stmt_1069_phi_mux_ack_ps <-& (phi_stmt_1069_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1069_update_completed_)
          $T[R_ZERO_3_1071_sample_start__ps] 
          $T[R_ZERO_3_1071_sample_completed__ps] 
          $T[R_ZERO_3_1071_update_start__ps] 
          $T[R_ZERO_3_1071_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1071_sample_start_] 
          $T[R_ZERO_3_1071_sample_completed_] 
          R_ZERO_3_1071_sample_completed_ <-& (R_ZERO_3_1071_sample_start_)
          $T[R_ZERO_3_1071_update_start_] 
          $T [R_ZERO_3_1071_update_completed_] $delay 
          R_ZERO_3_1071_update_completed_ <-& (R_ZERO_3_1071_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1071_sample_start_ <-& (R_ZERO_3_1071_sample_start__ps)
          R_ZERO_3_1071_update_start_ <-& (R_ZERO_3_1071_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1071_sample_completed__ps <-& (R_ZERO_3_1071_sample_completed_)
          R_ZERO_3_1071_update_completed__ps <-& (R_ZERO_3_1071_update_completed_)
          $T[R_next_active_packet_1072_sample_start__ps] 
          $T[R_next_active_packet_1072_sample_completed__ps] 
          $T[R_next_active_packet_1072_update_start__ps] 
          $T[R_next_active_packet_1072_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1072_sample_start_] 
          $T[R_next_active_packet_1072_sample_completed_] 
          $T[R_next_active_packet_1072_update_start_] 
          $T[R_next_active_packet_1072_update_completed_] 
          ;;[R_next_active_packet_1072_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1072_sample_start_ &-> (R_next_active_packet_1072_Sample)
          R_next_active_packet_1072_sample_completed_ <-& (R_next_active_packet_1072_Sample)
          ;;[R_next_active_packet_1072_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1072_update_start_ &-> (R_next_active_packet_1072_Update)
          R_next_active_packet_1072_update_completed_ <-& (R_next_active_packet_1072_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1072_sample_start_ <-& (R_next_active_packet_1072_sample_start__ps)
          R_next_active_packet_1072_update_start_ <-& (R_next_active_packet_1072_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1072_sample_completed__ps <-& (R_next_active_packet_1072_sample_completed_)
          R_next_active_packet_1072_update_completed__ps <-& (R_next_active_packet_1072_update_completed_)
          $phisequencer [ phi_stmt_1069_phi_seq] : 
          phi_stmt_1069_entry_trigger R_ZERO_3_1071_sample_start__ps R_ZERO_3_1071_sample_completed__ps R_ZERO_3_1071_update_start__ps R_ZERO_3_1071_update_completed__ps phi_stmt_1069_loopback_trigger R_next_active_packet_1072_sample_start__ps R_next_active_packet_1072_sample_completed__ps R_next_active_packet_1072_update_start__ps R_next_active_packet_1072_update_completed__ps :
          phi_stmt_1069_sample_start__ps phi_stmt_1069_sample_completed__ps phi_stmt_1069_update_start__ps phi_stmt_1069_update_completed__ps :
          phi_stmt_1069_entry_sample_req_ps phi_stmt_1069_loopback_sample_req_ps : 
          phi_stmt_1069_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1069
          // start:  multi-source PHI statement phi_stmt_1073
          // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1073_sample_start_] 
          $T[phi_stmt_1073_sample_completed_] 
          $T[phi_stmt_1073_update_start_] 
          $T[phi_stmt_1073_update_completed_] 
          $T[phi_stmt_1073_sample_start__ps] 
          phi_stmt_1073_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1073_sample_completed__ps] 
          phi_stmt_1073_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1073_update_start__ps] 
          phi_stmt_1073_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1073_update_completed__ps] 
          phi_stmt_1073_update_completed_ <-& (phi_stmt_1073_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1073_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1073_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1073_update_start_)
          $T[phi_stmt_1073_loopback_trigger] 
          phi_stmt_1073_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1073_loopback_sample_req] 
          $T[phi_stmt_1073_loopback_sample_req_ps] 
          phi_stmt_1073_loopback_sample_req <-& (phi_stmt_1073_loopback_sample_req_ps)
          phi_stmt_1073_loopback_sample_req &-> ($null)
          $T[phi_stmt_1073_entry_trigger] 
          phi_stmt_1073_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1073_entry_sample_req] 
          $T[phi_stmt_1073_entry_sample_req_ps] 
          phi_stmt_1073_entry_sample_req <-& (phi_stmt_1073_entry_sample_req_ps)
          phi_stmt_1073_entry_sample_req &-> ($null)
          phi_stmt_1073_update_start_ o<-& (phi_stmt_1073_update_completed_ 0)
          phi_stmt_1073_sample_start_ o<-& (phi_stmt_1073_sample_completed_ 1)
          $T[phi_stmt_1073_merged_reqs] 
          $T[phi_stmt_1073_phi_mux_ack] 
          $T[phi_stmt_1073_phi_mux_ack_ps] 
          phi_stmt_1073_phi_mux_ack_ps <-& (phi_stmt_1073_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1073_update_completed_)
          $T[R_ZERO_8_1075_sample_start__ps] 
          $T[R_ZERO_8_1075_sample_completed__ps] 
          $T[R_ZERO_8_1075_update_start__ps] 
          $T[R_ZERO_8_1075_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1075_sample_start_] 
          $T[R_ZERO_8_1075_sample_completed_] 
          R_ZERO_8_1075_sample_completed_ <-& (R_ZERO_8_1075_sample_start_)
          $T[R_ZERO_8_1075_update_start_] 
          $T [R_ZERO_8_1075_update_completed_] $delay 
          R_ZERO_8_1075_update_completed_ <-& (R_ZERO_8_1075_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1075_sample_start_ <-& (R_ZERO_8_1075_sample_start__ps)
          R_ZERO_8_1075_update_start_ <-& (R_ZERO_8_1075_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1075_sample_completed__ps <-& (R_ZERO_8_1075_sample_completed_)
          R_ZERO_8_1075_update_completed__ps <-& (R_ZERO_8_1075_update_completed_)
          $T[R_next_active_packet_length_1076_sample_start__ps] 
          $T[R_next_active_packet_length_1076_sample_completed__ps] 
          $T[R_next_active_packet_length_1076_update_start__ps] 
          $T[R_next_active_packet_length_1076_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_length_1076_sample_start_] 
          $T[R_next_active_packet_length_1076_sample_completed_] 
          $T[R_next_active_packet_length_1076_update_start_] 
          $T[R_next_active_packet_length_1076_update_completed_] 
          ;;[R_next_active_packet_length_1076_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_length_1076_sample_start_ &-> (R_next_active_packet_length_1076_Sample)
          R_next_active_packet_length_1076_sample_completed_ <-& (R_next_active_packet_length_1076_Sample)
          ;;[R_next_active_packet_length_1076_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_length_1076_update_start_ &-> (R_next_active_packet_length_1076_Update)
          R_next_active_packet_length_1076_update_completed_ <-& (R_next_active_packet_length_1076_Update)
          // RAW reenables for next_active_packet_length
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_length_1076_sample_start_ <-& (R_next_active_packet_length_1076_sample_start__ps)
          R_next_active_packet_length_1076_update_start_ <-& (R_next_active_packet_length_1076_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_length_1076_sample_completed__ps <-& (R_next_active_packet_length_1076_sample_completed_)
          R_next_active_packet_length_1076_update_completed__ps <-& (R_next_active_packet_length_1076_update_completed_)
          $phisequencer [ phi_stmt_1073_phi_seq] : 
          phi_stmt_1073_entry_trigger R_ZERO_8_1075_sample_start__ps R_ZERO_8_1075_sample_completed__ps R_ZERO_8_1075_update_start__ps R_ZERO_8_1075_update_completed__ps phi_stmt_1073_loopback_trigger R_next_active_packet_length_1076_sample_start__ps R_next_active_packet_length_1076_sample_completed__ps R_next_active_packet_length_1076_update_start__ps R_next_active_packet_length_1076_update_completed__ps :
          phi_stmt_1073_sample_start__ps phi_stmt_1073_sample_completed__ps phi_stmt_1073_update_start__ps phi_stmt_1073_update_completed__ps :
          phi_stmt_1073_entry_sample_req_ps phi_stmt_1073_loopback_sample_req_ps : 
          phi_stmt_1073_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1073
          // start:  multi-source PHI statement phi_stmt_1077
          // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
          // type of target is $uint<2>
          $T[phi_stmt_1077_sample_start_] 
          $T[phi_stmt_1077_sample_completed_] 
          $T[phi_stmt_1077_update_start_] 
          $T[phi_stmt_1077_update_completed_] 
          $T[phi_stmt_1077_sample_start__ps] 
          phi_stmt_1077_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1077_sample_completed__ps] 
          phi_stmt_1077_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1077_update_start__ps] 
          phi_stmt_1077_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1077_update_completed__ps] 
          phi_stmt_1077_update_completed_ <-& (phi_stmt_1077_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1077_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1077_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1077_update_start_)
          $T[phi_stmt_1077_loopback_trigger] 
          phi_stmt_1077_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1077_loopback_sample_req] 
          $T[phi_stmt_1077_loopback_sample_req_ps] 
          phi_stmt_1077_loopback_sample_req <-& (phi_stmt_1077_loopback_sample_req_ps)
          phi_stmt_1077_loopback_sample_req &-> ($null)
          $T[phi_stmt_1077_entry_trigger] 
          phi_stmt_1077_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1077_entry_sample_req] 
          $T[phi_stmt_1077_entry_sample_req_ps] 
          phi_stmt_1077_entry_sample_req <-& (phi_stmt_1077_entry_sample_req_ps)
          phi_stmt_1077_entry_sample_req &-> ($null)
          phi_stmt_1077_update_start_ o<-& (phi_stmt_1077_update_completed_ 0)
          phi_stmt_1077_sample_start_ o<-& (phi_stmt_1077_sample_completed_ 1)
          $T[phi_stmt_1077_merged_reqs] 
          $T[phi_stmt_1077_phi_mux_ack] 
          $T[phi_stmt_1077_phi_mux_ack_ps] 
          phi_stmt_1077_phi_mux_ack_ps <-& (phi_stmt_1077_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1077_update_completed_)
          $T[R_ZERO_2_1079_sample_start__ps] 
          $T[R_ZERO_2_1079_sample_completed__ps] 
          $T[R_ZERO_2_1079_update_start__ps] 
          $T[R_ZERO_2_1079_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_2_1079_sample_start_] 
          $T[R_ZERO_2_1079_sample_completed_] 
          R_ZERO_2_1079_sample_completed_ <-& (R_ZERO_2_1079_sample_start_)
          $T[R_ZERO_2_1079_update_start_] 
          $T [R_ZERO_2_1079_update_completed_] $delay 
          R_ZERO_2_1079_update_completed_ <-& (R_ZERO_2_1079_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_2_1079_sample_start_ <-& (R_ZERO_2_1079_sample_start__ps)
          R_ZERO_2_1079_update_start_ <-& (R_ZERO_2_1079_update_start__ps)
          // Phi complete dependency.
          R_ZERO_2_1079_sample_completed__ps <-& (R_ZERO_2_1079_sample_completed_)
          R_ZERO_2_1079_update_completed__ps <-& (R_ZERO_2_1079_update_completed_)
          $T[R_next_priority_index_1080_sample_start__ps] 
          $T[R_next_priority_index_1080_sample_completed__ps] 
          $T[R_next_priority_index_1080_update_start__ps] 
          $T[R_next_priority_index_1080_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_priority_index_1080_sample_start_] 
          $T[R_next_priority_index_1080_sample_completed_] 
          $T[R_next_priority_index_1080_update_start_] 
          $T[R_next_priority_index_1080_update_completed_] 
          ;;[R_next_priority_index_1080_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_priority_index_1080_sample_start_ &-> (R_next_priority_index_1080_Sample)
          R_next_priority_index_1080_sample_completed_ <-& (R_next_priority_index_1080_Sample)
          ;;[R_next_priority_index_1080_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_priority_index_1080_update_start_ &-> (R_next_priority_index_1080_Update)
          R_next_priority_index_1080_update_completed_ <-& (R_next_priority_index_1080_Update)
          // RAW reenables for next_priority_index
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_priority_index_1080_sample_start_ <-& (R_next_priority_index_1080_sample_start__ps)
          R_next_priority_index_1080_update_start_ <-& (R_next_priority_index_1080_update_start__ps)
          // Phi complete dependency.
          R_next_priority_index_1080_sample_completed__ps <-& (R_next_priority_index_1080_sample_completed_)
          R_next_priority_index_1080_update_completed__ps <-& (R_next_priority_index_1080_update_completed_)
          $phisequencer [ phi_stmt_1077_phi_seq] : 
          phi_stmt_1077_entry_trigger R_ZERO_2_1079_sample_start__ps R_ZERO_2_1079_sample_completed__ps R_ZERO_2_1079_update_start__ps R_ZERO_2_1079_update_completed__ps phi_stmt_1077_loopback_trigger R_next_priority_index_1080_sample_start__ps R_next_priority_index_1080_sample_completed__ps R_next_priority_index_1080_update_start__ps R_next_priority_index_1080_update_completed__ps :
          phi_stmt_1077_sample_start__ps phi_stmt_1077_sample_completed__ps phi_stmt_1077_update_start__ps phi_stmt_1077_update_completed__ps :
          phi_stmt_1077_entry_sample_req_ps phi_stmt_1077_loopback_sample_req_ps : 
          phi_stmt_1077_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1077
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // start:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 338
          // volatile! 
          // Source expression
          // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
          // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
          // ( $mux read_from_1 0   _b0  ) 
          // read_from_1
          // ( $mux read_from_2 1   _b0  ) 
          // read_from_2
          // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
          // ( $mux read_from_3 2   _b0  ) 
          // read_from_3
          // ( $mux read_from_4 3   _b0  ) 
          // read_from_4
          // Target expression
          // (as target) senderPort
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // end:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          // start: 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          //  file .Aa/switch2x2.opt.aa, line 339
          $T[call_stmt_1108_sample_start_] 
          $T[call_stmt_1108_sample_completed_] 
          $T[call_stmt_1108_update_start_] 
          $T[call_stmt_1108_update_completed_] 
          // Call input argument 0
          // senderPort
          // Call input argument 1
          // Call input argument 2
          // start: Forward dependencies from senderPort to transition call_stmt_1108_sample_start_
          call_stmt_1108_sample_start_ <-& (phi_stmt_1045_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1049_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1054_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1059_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1064_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1069_update_completed_)
          call_stmt_1108_sample_start_ <-& (phi_stmt_1077_update_completed_)
          // done: Forward dependencies from senderPort to transition call_stmt_1108_sample_start_
          // RAW reenables for senderPort
          phi_stmt_1045_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1049_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1054_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1059_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1064_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1069_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          phi_stmt_1077_update_start_ o<-& (call_stmt_1108_sample_completed_ 0)
          ;;[call_stmt_1108_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1108_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1108_sample_start_ &-> (call_stmt_1108_Sample)
          call_stmt_1108_sample_completed_ <-& (call_stmt_1108_Sample)
          call_stmt_1108_sample_completed_ &-> ($null)
          call_stmt_1108_update_start_ &-> (call_stmt_1108_Update)
          call_stmt_1108_update_completed_ <-& (call_stmt_1108_Update)
          // Call output argument 0
          // (as target) continue
          // self-release: 
          call_stmt_1108_sample_start_ o<-& (call_stmt_1108_sample_completed_ 1)
          $null &-> (call_stmt_1108_update_start_)
          call_stmt_1108_update_start_ o<-& (call_stmt_1108_update_completed_ 0)
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end: 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 340
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 341
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 342
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 343
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 345
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // start:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  file .Aa/switch2x2.opt.aa, line 346
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // priority_index
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_priority_index
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // end:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 347
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // start:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 348
          // volatile! 
          // Source expression
          // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
          // started_new_packet
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 15 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 15 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 15 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 15 8 ) 
          // pkt_4_e_word
          // active_packet_length
          // Target expression
          // (as target) next_active_packet_length
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // end:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 349
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (next_active_packet_length - 1 )
          // next_active_packet_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 350
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 351
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 352
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 353
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 354
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 355
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 356
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_1
          $T[WPIPE_out_data_1_1333_sample_start_] 
          $T[WPIPE_out_data_1_1333_sample_completed_] 
          $T[WPIPE_out_data_1_1333_update_start_] 
          $T[WPIPE_out_data_1_1333_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_1_1333 with guard R_send_flag_1332
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1045_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1049_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1054_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1059_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1064_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1069_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1077_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1045_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1049_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1054_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1059_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1064_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1069_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1077_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          ;;[WPIPE_out_data_1_1333_Sample] 
          {
            // pipe write sample-start out_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_1_1333_Update] 
          {
            // pipe write update (complete) out_data_1
            $T [req] $T [ack] 
          }
          WPIPE_out_data_1_1333_sample_start_ &-> (WPIPE_out_data_1_1333_Sample)
          WPIPE_out_data_1_1333_sample_completed_ <-& (WPIPE_out_data_1_1333_Sample)
          WPIPE_out_data_1_1333_update_start_ <-& (WPIPE_out_data_1_1333_sample_completed_)
          WPIPE_out_data_1_1333_update_start_ &-> (WPIPE_out_data_1_1333_Update)
          WPIPE_out_data_1_1333_update_completed_ <-& (WPIPE_out_data_1_1333_Update)
          WPIPE_out_data_1_1333_sample_start_ o<-& (WPIPE_out_data_1_1333_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_1_1333_sample_start_
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1045_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1049_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1054_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1059_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1064_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1069_update_completed_)
          WPIPE_out_data_1_1333_sample_start_ <-& (phi_stmt_1077_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_1_1333_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1045_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1049_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1054_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1059_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1064_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1069_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          phi_stmt_1077_update_start_ o<-& (WPIPE_out_data_1_1333_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_stmt_1108 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe out_data_1
          // read-dependencies for pipe out_data_1
          // write-dependencies for pipe out_data_1
          // signal write dependencies for out_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1043__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1043_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1043__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1043_loop_body : condition_evaluated
        $bind do_while_stmt_1043__entry__  => do_while_stmt_1043_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1043_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1043__exit__)
      }
      do_while_stmt_1043__entry__ |-> (do_while_stmt_1043)
      do_while_stmt_1043__exit__ <-| (do_while_stmt_1043)
      do_while_stmt_1043__entry__ <-| (branch_block_stmt_1042__entry__)
      do_while_stmt_1043__exit__ |-> (branch_block_stmt_1042__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 320
    // constant-object-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 316
    // constant-object-declarations for block %outputPort_1_Daemon
    //  file .Aa/switch2x2.opt.aa, line 311
    // constant-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 316
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 318
    // 1 
    $constant $W[konst_1346_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 320
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 321
    // ZERO_8
    $constant $W[R_ZERO_8_1047_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 323
    // ZERO_33
    $constant $W[R_ZERO_33_1051_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 325
    // ZERO_33
    $constant $W[R_ZERO_33_1056_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 327
    // ZERO_33
    $constant $W[R_ZERO_33_1061_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 329
    // ZERO_33
    $constant $W[R_ZERO_33_1066_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 331
    // ZERO_3
    $constant $W[R_ZERO_3_1071_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 333
    // ZERO_8
    $constant $W[R_ZERO_8_1075_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 335
    // ZERO_2
    $constant $W[R_ZERO_2_1079_wire_constant] : $int<2> := _b00// 0
    // ( $mux read_from_1 0   _b0  ) 
    // 0 
    $constant $W[konst_1084_wire_constant] : $int<8> := _b00000000// 0
    // _b0 
    $constant $W[konst_1085_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_2 1   _b0  ) 
    // 1 
    $constant $W[konst_1088_wire_constant] : $int<8> := _b00000001// 1
    // _b0 
    $constant $W[konst_1089_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_3 2   _b0  ) 
    // 2 
    $constant $W[konst_1093_wire_constant] : $int<8> := _b00000010// 2
    // _b0 
    $constant $W[konst_1094_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_4 3   _b0  ) 
    // 3 
    $constant $W[konst_1097_wire_constant] : $int<8> := _b00000011// 3
    // _b0 
    $constant $W[konst_1098_wire_constant] : $int<8> := _b00000000// 0
    // 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 339
    // 0 
    $constant $W[konst_1104_wire_constant] : $int<8> := _b00000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1106_wire_constant] : $int<1> := _b0// 0
    // 32 
    $constant $W[konst_1111_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1116_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1121_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1126_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1143_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1146_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1149_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1152_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1156_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1159_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1162_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1165_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 346
    // 0 
    $constant $W[konst_1182_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1185_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1192_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1196_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1199_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1203_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1207_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1211_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1214_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1218_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1228_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1232_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1242_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1250_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1258_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1266_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1272_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1276_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1279_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1283_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1287_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1291_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1294_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1298_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1305_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1308_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1311_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1314_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1318_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1321_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1324_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1327_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 316
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 318
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 320
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 321
    $W[next_down_counter_1237_1048_buffered] : $int<8>
    // down_counter
    $W[down_counter_1045] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 323
    // noblock_obuf_1_1
    $W[RPIPE_noblock_obuf_1_1_1053_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1049] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 325
    // noblock_obuf_2_1
    $W[RPIPE_noblock_obuf_2_1_1058_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1054] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 327
    // noblock_obuf_3_1
    $W[RPIPE_noblock_obuf_3_1_1063_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1059] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 329
    // noblock_obuf_4_1
    $W[RPIPE_noblock_obuf_4_1_1068_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1064] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 331
    $W[next_active_packet_1179_1072_buffered] : $int<3>
    // active_packet
    $W[active_packet_1069] : $int<3>
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 333
    $W[next_active_packet_length_1224_1076_buffered] : $int<8>
    // active_packet_length
    $W[active_packet_length_1073] : $int<8>
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 335
    $W[next_priority_index_1179_1080_buffered] : $int<2>
    // priority_index
    $W[priority_index_1077] : $int<2>
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // ( $mux read_from_1 0   _b0  ) 
    $intermediate $W[MUX_1086_wire] : $int<8>
    // ( $mux read_from_2 1   _b0  ) 
    $intermediate $W[MUX_1090_wire] : $int<8>
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    $intermediate $W[OR_u8_u8_1091_wire] : $int<8>
    // ( $mux read_from_3 2   _b0  ) 
    $intermediate $W[MUX_1095_wire] : $int<8>
    // ( $mux read_from_4 3   _b0  ) 
    $intermediate $W[MUX_1099_wire] : $int<8>
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    $intermediate $W[OR_u8_u8_1100_wire] : $int<8>
    // senderPort
    $W[senderPort_1102] : $int<8>
    // 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 339
    // continue
    $W[continue_1108] : $int<1>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 340
    // p1_valid
    $W[p1_valid_1113] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 341
    // p2_valid
    $W[p2_valid_1118] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 342
    // p3_valid
    $W[p3_valid_1123] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 343
    // p4_valid
    $W[p4_valid_1128] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 345
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1144_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1147_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1150_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1153_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1154_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1157_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1160_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1163_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1166_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1167_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1169] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 346
    // next_active_packet
    $W[next_active_packet_1179] : $int<3>
    // next_priority_index
    $W[next_priority_index_1179] : $int<2>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 347
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1183_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1186_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1188] : $int<1>
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 348
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1193_wire] : $int<1>
    // ( $slice pkt_1_e_word 15 8 ) 
    $intermediate $W[slice_1195_wire] : $int<8>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1197_wire] : $int<8>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1200_wire] : $int<1>
    // ( $slice pkt_2_e_word 15 8 ) 
    $intermediate $W[slice_1202_wire] : $int<8>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1204_wire] : $int<8>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1205_wire] : $int<8>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1208_wire] : $int<1>
    // ( $slice pkt_3_e_word 15 8 ) 
    $intermediate $W[slice_1210_wire] : $int<8>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1212_wire] : $int<8>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1215_wire] : $int<1>
    // ( $slice pkt_4_e_word 15 8 ) 
    $intermediate $W[slice_1217_wire] : $int<8>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1219_wire] : $int<8>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1220_wire] : $int<8>
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    $intermediate $W[OR_u8_u8_1221_wire] : $int<8>
    // next_active_packet_length
    $W[next_active_packet_length_1224] : $int<8>
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 349
    // (next_active_packet_length - 1 )
    $intermediate $W[SUB_u8_u8_1229_wire] : $int<8>
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1233_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1235_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1237] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 350
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1240_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1243_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1245] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 351
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1248_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1251_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1253] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 352
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1256_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1259_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1261] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 353
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1264_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1267_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1269] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 354
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1273_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1275_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1277_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1280_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1282_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1284_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1285_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1288_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1290_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1292_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1295_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1297_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1299_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1300_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1302] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 355
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1306_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1309_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1312_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1315_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1316_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1319_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1322_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1325_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1328_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1329_wire] : $int<1>
    // send_flag
    $W[send_flag_1331] : $int<1>
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 356
    // out_data_1
    // datapath-instances for block %outputPort_1_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 316
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 318
    ==0? [do_while_stmt_1043_branch] (konst_1346_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 320
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 321
    # := [next_down_counter_1237_1048_buf] (next_down_counter_1237) (next_down_counter_1237_1048_buffered)   $in_phi    $fullrate
    $buffering $out next_down_counter_1237_1048_buf next_down_counter_1237_1048_buffered  1
    # $phi [phi_stmt_1045] (R_ZERO_8_1047_wire_constant next_down_counter_1237_1048_buffered) ( down_counter_1045 ) $fullrate
    // $buffering  $out phi_stmt_1045 down_counter_1045 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 323
    // noblock_obuf_1_1
    $ioport $in [RPIPE_noblock_obuf_1_1_1053_inst] (noblock_obuf_1_1) (RPIPE_noblock_obuf_1_1_1053_wire) $guard ( read_from_1_1245 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_1_1053_inst RPIPE_noblock_obuf_1_1_1053_wire 1
    # $phi [phi_stmt_1049] (R_ZERO_33_1051_wire_constant RPIPE_noblock_obuf_1_1_1053_wire) ( pkt_1_e_word_1049 ) $fullrate
    // $buffering  $out phi_stmt_1049 pkt_1_e_word_1049 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 325
    // noblock_obuf_2_1
    $ioport $in [RPIPE_noblock_obuf_2_1_1058_inst] (noblock_obuf_2_1) (RPIPE_noblock_obuf_2_1_1058_wire) $guard ( read_from_2_1253 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_1_1058_inst RPIPE_noblock_obuf_2_1_1058_wire 1
    # $phi [phi_stmt_1054] (R_ZERO_33_1056_wire_constant RPIPE_noblock_obuf_2_1_1058_wire) ( pkt_2_e_word_1054 ) $fullrate
    // $buffering  $out phi_stmt_1054 pkt_2_e_word_1054 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 327
    // noblock_obuf_3_1
    $ioport $in [RPIPE_noblock_obuf_3_1_1063_inst] (noblock_obuf_3_1) (RPIPE_noblock_obuf_3_1_1063_wire) $guard ( read_from_3_1261 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_1_1063_inst RPIPE_noblock_obuf_3_1_1063_wire 1
    # $phi [phi_stmt_1059] (R_ZERO_33_1061_wire_constant RPIPE_noblock_obuf_3_1_1063_wire) ( pkt_3_e_word_1059 ) $fullrate
    // $buffering  $out phi_stmt_1059 pkt_3_e_word_1059 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 329
    // noblock_obuf_4_1
    $ioport $in [RPIPE_noblock_obuf_4_1_1068_inst] (noblock_obuf_4_1) (RPIPE_noblock_obuf_4_1_1068_wire) $guard ( read_from_4_1269 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_1_1068_inst RPIPE_noblock_obuf_4_1_1068_wire 1
    # $phi [phi_stmt_1064] (R_ZERO_33_1066_wire_constant RPIPE_noblock_obuf_4_1_1068_wire) ( pkt_4_e_word_1064 ) $fullrate
    // $buffering  $out phi_stmt_1064 pkt_4_e_word_1064 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 331
    # := [next_active_packet_1179_1072_buf] (next_active_packet_1179) (next_active_packet_1179_1072_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_1179_1072_buf next_active_packet_1179_1072_buffered  1
    # $phi [phi_stmt_1069] (R_ZERO_3_1071_wire_constant next_active_packet_1179_1072_buffered) ( active_packet_1069 ) $fullrate
    // $buffering  $out phi_stmt_1069 active_packet_1069 2
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 333
    # := [next_active_packet_length_1224_1076_buf] (next_active_packet_length_1224) (next_active_packet_length_1224_1076_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_length_1224_1076_buf next_active_packet_length_1224_1076_buffered  1
    # $phi [phi_stmt_1073] (R_ZERO_8_1075_wire_constant next_active_packet_length_1224_1076_buffered) ( active_packet_length_1073 ) $fullrate
    // $buffering  $out phi_stmt_1073 active_packet_length_1073 2
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 335
    # := [next_priority_index_1179_1080_buf] (next_priority_index_1179) (next_priority_index_1179_1080_buffered)   $in_phi    $fullrate
    $buffering $out next_priority_index_1179_1080_buf next_priority_index_1179_1080_buffered  1
    # $phi [phi_stmt_1077] (R_ZERO_2_1079_wire_constant next_priority_index_1179_1080_buffered) ( priority_index_1077 ) $fullrate
    // $buffering  $out phi_stmt_1077 priority_index_1077 2
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 338
    // ( $mux read_from_1 0   _b0  ) 
    ? [MUX_1086_inst] (read_from_1_1245 konst_1084_wire_constant konst_1085_wire_constant) (MUX_1086_wire)  $flowthrough
    // ( $mux read_from_2 1   _b0  ) 
    ? [MUX_1090_inst] (read_from_2_1253 konst_1088_wire_constant konst_1089_wire_constant) (MUX_1090_wire)  $flowthrough
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    |[OR_u8_u8_1091_inst] (MUX_1086_wire MUX_1090_wire) (OR_u8_u8_1091_wire)   $flowthrough 
    $delay OR_u8_u8_1091_inst 0
    // ( $mux read_from_3 2   _b0  ) 
    ? [MUX_1095_inst] (read_from_3_1261 konst_1093_wire_constant konst_1094_wire_constant) (MUX_1095_wire)  $flowthrough
    // ( $mux read_from_4 3   _b0  ) 
    ? [MUX_1099_inst] (read_from_4_1269 konst_1097_wire_constant konst_1098_wire_constant) (MUX_1099_wire)  $flowthrough
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    |[OR_u8_u8_1100_inst] (MUX_1095_wire MUX_1099_wire) (OR_u8_u8_1100_wire)   $flowthrough 
    $delay OR_u8_u8_1100_inst 0
    // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
    |[OR_u8_u8_1101_inst] (OR_u8_u8_1091_wire OR_u8_u8_1100_wire) (senderPort_1102)   $flowthrough 
    $delay OR_u8_u8_1101_inst 0
    // 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 339
    $call [call_stmt_1108_call] $module updateCounter(senderPort_1102 konst_1104_wire_constant type_cast_1106_wire_constant) (continue_1108)   $fullrate
    $delay call_stmt_1108_call 4
    $buffering  $in call_stmt_1108_call senderPort_1102 1
    $buffering  $in call_stmt_1108_call konst_1104_wire_constant 1
    $buffering  $in call_stmt_1108_call type_cast_1106_wire_constant 1
    $buffering  $out call_stmt_1108_call continue_1108 1
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 340
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1112_inst] (pkt_1_e_word_1049 konst_1111_wire_constant) (p1_valid_1113)   $flowthrough 
    $delay BITSEL_u33_u1_1112_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 341
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1117_inst] (pkt_2_e_word_1054 konst_1116_wire_constant) (p2_valid_1118)   $flowthrough 
    $delay BITSEL_u33_u1_1117_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 342
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1122_inst] (pkt_3_e_word_1059 konst_1121_wire_constant) (p3_valid_1123)   $flowthrough 
    $delay BITSEL_u33_u1_1122_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 343
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1127_inst] (pkt_4_e_word_1064 konst_1126_wire_constant) (p4_valid_1128)   $flowthrough 
    $delay BITSEL_u33_u1_1127_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 345
    // (active_packet == 1 )
    ==[EQ_u3_u1_1144_inst] (active_packet_1069 konst_1143_wire_constant) (EQ_u3_u1_1144_wire)   $flowthrough 
    $delay EQ_u3_u1_1144_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1147_inst] (EQ_u3_u1_1144_wire p1_valid_1113 konst_1146_wire_constant) (MUX_1147_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1150_inst] (active_packet_1069 konst_1149_wire_constant) (EQ_u3_u1_1150_wire)   $flowthrough 
    $delay EQ_u3_u1_1150_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1153_inst] (EQ_u3_u1_1150_wire p2_valid_1118 konst_1152_wire_constant) (MUX_1153_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1154_inst] (MUX_1147_wire MUX_1153_wire) (OR_u1_u1_1154_wire)   $flowthrough 
    $delay OR_u1_u1_1154_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1157_inst] (active_packet_1069 konst_1156_wire_constant) (EQ_u3_u1_1157_wire)   $flowthrough 
    $delay EQ_u3_u1_1157_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1160_inst] (EQ_u3_u1_1157_wire p3_valid_1123 konst_1159_wire_constant) (MUX_1160_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1163_inst] (active_packet_1069 konst_1162_wire_constant) (EQ_u3_u1_1163_wire)   $flowthrough 
    $delay EQ_u3_u1_1163_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1166_inst] (EQ_u3_u1_1163_wire p4_valid_1128 konst_1165_wire_constant) (MUX_1166_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1167_inst] (MUX_1160_wire MUX_1166_wire) (OR_u1_u1_1167_wire)   $flowthrough 
    $delay OR_u1_u1_1167_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1168_inst] (OR_u1_u1_1154_wire OR_u1_u1_1167_wire) (valid_active_pkt_word_read_1169)   $flowthrough 
    $delay OR_u1_u1_1168_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 346
    $call [call_stmt_1179_call] $module prioritySelect(down_counter_1045 active_packet_1069 priority_index_1077 p1_valid_1113 p2_valid_1118 p3_valid_1123 p4_valid_1128) (next_active_packet_1179 next_priority_index_1179)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 347
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1183_inst] (next_active_packet_1179 konst_1182_wire_constant) (NEQ_u3_u1_1183_wire)   $flowthrough 
    $delay NEQ_u3_u1_1183_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1186_inst] (down_counter_1045 konst_1185_wire_constant) (EQ_u8_u1_1186_wire)   $flowthrough 
    $delay EQ_u8_u1_1186_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1187_inst] (NEQ_u3_u1_1183_wire EQ_u8_u1_1186_wire) (started_new_packet_1188)   $flowthrough 
    $delay AND_u1_u1_1187_inst 0
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 348
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1193_inst] (next_active_packet_1179 konst_1192_wire_constant) (EQ_u3_u1_1193_wire)   $flowthrough 
    $delay EQ_u3_u1_1193_inst 0
    // ( $slice pkt_1_e_word 15 8 ) 
    [:] [slice_1195_inst] (pkt_1_e_word_1049 15 8) (slice_1195_wire)  $flowthrough
    $delay slice_1195_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    ? [MUX_1197_inst] (EQ_u3_u1_1193_wire slice_1195_wire konst_1196_wire_constant) (MUX_1197_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1200_inst] (next_active_packet_1179 konst_1199_wire_constant) (EQ_u3_u1_1200_wire)   $flowthrough 
    $delay EQ_u3_u1_1200_inst 0
    // ( $slice pkt_2_e_word 15 8 ) 
    [:] [slice_1202_inst] (pkt_2_e_word_1054 15 8) (slice_1202_wire)  $flowthrough
    $delay slice_1202_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    ? [MUX_1204_inst] (EQ_u3_u1_1200_wire slice_1202_wire konst_1203_wire_constant) (MUX_1204_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1205_inst] (MUX_1197_wire MUX_1204_wire) (OR_u8_u8_1205_wire)   $flowthrough 
    $delay OR_u8_u8_1205_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1208_inst] (next_active_packet_1179 konst_1207_wire_constant) (EQ_u3_u1_1208_wire)   $flowthrough 
    $delay EQ_u3_u1_1208_inst 0
    // ( $slice pkt_3_e_word 15 8 ) 
    [:] [slice_1210_inst] (pkt_3_e_word_1059 15 8) (slice_1210_wire)  $flowthrough
    $delay slice_1210_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    ? [MUX_1212_inst] (EQ_u3_u1_1208_wire slice_1210_wire konst_1211_wire_constant) (MUX_1212_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1215_inst] (next_active_packet_1179 konst_1214_wire_constant) (EQ_u3_u1_1215_wire)   $flowthrough 
    $delay EQ_u3_u1_1215_inst 0
    // ( $slice pkt_4_e_word 15 8 ) 
    [:] [slice_1217_inst] (pkt_4_e_word_1064 15 8) (slice_1217_wire)  $flowthrough
    $delay slice_1217_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    ? [MUX_1219_inst] (EQ_u3_u1_1215_wire slice_1217_wire konst_1218_wire_constant) (MUX_1219_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1220_inst] (MUX_1212_wire MUX_1219_wire) (OR_u8_u8_1220_wire)   $flowthrough 
    $delay OR_u8_u8_1220_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    |[OR_u8_u8_1221_inst] (OR_u8_u8_1205_wire OR_u8_u8_1220_wire) (OR_u8_u8_1221_wire)   $flowthrough 
    $delay OR_u8_u8_1221_inst 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    ? [MUX_1223_inst] (started_new_packet_1188 OR_u8_u8_1221_wire active_packet_length_1073) (next_active_packet_length_1224)  $flowthrough
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 349
    // (next_active_packet_length - 1 )
    -[SUB_u8_u8_1229_inst] (next_active_packet_length_1224 konst_1228_wire_constant) (SUB_u8_u8_1229_wire)   $flowthrough 
    $delay SUB_u8_u8_1229_inst 0
    // (down_counter - 1 )
    -[SUB_u8_u8_1233_inst] (down_counter_1045 konst_1232_wire_constant) (SUB_u8_u8_1233_wire)   $flowthrough 
    $delay SUB_u8_u8_1233_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1235_inst] (valid_active_pkt_word_read_1169 SUB_u8_u8_1233_wire down_counter_1045) (MUX_1235_wire)  $flowthrough
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1236_inst] (started_new_packet_1188 SUB_u8_u8_1229_wire MUX_1235_wire) (next_down_counter_1237)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 350
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1240_inst] (p1_valid_1113) (NOT_u1_u1_1240_wire)   $flowthrough
    $delay NOT_u1_u1_1240_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1243_inst] (next_active_packet_1179 konst_1242_wire_constant) (EQ_u3_u1_1243_wire)   $flowthrough 
    $delay EQ_u3_u1_1243_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1244_inst] (NOT_u1_u1_1240_wire EQ_u3_u1_1243_wire) (read_from_1_1245)   $flowthrough 
    $delay OR_u1_u1_1244_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 351
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1248_inst] (p2_valid_1118) (NOT_u1_u1_1248_wire)   $flowthrough
    $delay NOT_u1_u1_1248_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1251_inst] (next_active_packet_1179 konst_1250_wire_constant) (EQ_u3_u1_1251_wire)   $flowthrough 
    $delay EQ_u3_u1_1251_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1252_inst] (NOT_u1_u1_1248_wire EQ_u3_u1_1251_wire) (read_from_2_1253)   $flowthrough 
    $delay OR_u1_u1_1252_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 352
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1256_inst] (p3_valid_1123) (NOT_u1_u1_1256_wire)   $flowthrough
    $delay NOT_u1_u1_1256_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1259_inst] (next_active_packet_1179 konst_1258_wire_constant) (EQ_u3_u1_1259_wire)   $flowthrough 
    $delay EQ_u3_u1_1259_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1260_inst] (NOT_u1_u1_1256_wire EQ_u3_u1_1259_wire) (read_from_3_1261)   $flowthrough 
    $delay OR_u1_u1_1260_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 353
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1264_inst] (p4_valid_1128) (NOT_u1_u1_1264_wire)   $flowthrough
    $delay NOT_u1_u1_1264_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1267_inst] (next_active_packet_1179 konst_1266_wire_constant) (EQ_u3_u1_1267_wire)   $flowthrough 
    $delay EQ_u3_u1_1267_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1268_inst] (NOT_u1_u1_1264_wire EQ_u3_u1_1267_wire) (read_from_4_1269)   $flowthrough 
    $delay OR_u1_u1_1268_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 354
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1273_inst] (next_active_packet_1179 konst_1272_wire_constant) (EQ_u3_u1_1273_wire)   $flowthrough 
    $delay EQ_u3_u1_1273_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1275_inst] (pkt_1_e_word_1049 31 0) (slice_1275_wire)  $flowthrough
    $delay slice_1275_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1277_inst] (EQ_u3_u1_1273_wire slice_1275_wire konst_1276_wire_constant) (MUX_1277_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1280_inst] (next_active_packet_1179 konst_1279_wire_constant) (EQ_u3_u1_1280_wire)   $flowthrough 
    $delay EQ_u3_u1_1280_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1282_inst] (pkt_2_e_word_1054 31 0) (slice_1282_wire)  $flowthrough
    $delay slice_1282_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1284_inst] (EQ_u3_u1_1280_wire slice_1282_wire konst_1283_wire_constant) (MUX_1284_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1285_inst] (MUX_1277_wire MUX_1284_wire) (OR_u32_u32_1285_wire)   $flowthrough 
    $delay OR_u32_u32_1285_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1288_inst] (next_active_packet_1179 konst_1287_wire_constant) (EQ_u3_u1_1288_wire)   $flowthrough 
    $delay EQ_u3_u1_1288_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1290_inst] (pkt_3_e_word_1059 31 0) (slice_1290_wire)  $flowthrough
    $delay slice_1290_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1292_inst] (EQ_u3_u1_1288_wire slice_1290_wire konst_1291_wire_constant) (MUX_1292_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1295_inst] (next_active_packet_1179 konst_1294_wire_constant) (EQ_u3_u1_1295_wire)   $flowthrough 
    $delay EQ_u3_u1_1295_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1297_inst] (pkt_4_e_word_1064 31 0) (slice_1297_wire)  $flowthrough
    $delay slice_1297_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1299_inst] (EQ_u3_u1_1295_wire slice_1297_wire konst_1298_wire_constant) (MUX_1299_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1300_inst] (MUX_1292_wire MUX_1299_wire) (OR_u32_u32_1300_wire)   $flowthrough 
    $delay OR_u32_u32_1300_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1301_inst] (OR_u32_u32_1285_wire OR_u32_u32_1300_wire) (data_to_out_1302)   $flowthrough 
    $delay OR_u32_u32_1301_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 355
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1306_inst] (next_active_packet_1179 konst_1305_wire_constant) (EQ_u3_u1_1306_wire)   $flowthrough 
    $delay EQ_u3_u1_1306_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1309_inst] (EQ_u3_u1_1306_wire p1_valid_1113 konst_1308_wire_constant) (MUX_1309_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1312_inst] (next_active_packet_1179 konst_1311_wire_constant) (EQ_u3_u1_1312_wire)   $flowthrough 
    $delay EQ_u3_u1_1312_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1315_inst] (EQ_u3_u1_1312_wire p2_valid_1118 konst_1314_wire_constant) (MUX_1315_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1316_inst] (MUX_1309_wire MUX_1315_wire) (OR_u1_u1_1316_wire)   $flowthrough 
    $delay OR_u1_u1_1316_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1319_inst] (next_active_packet_1179 konst_1318_wire_constant) (EQ_u3_u1_1319_wire)   $flowthrough 
    $delay EQ_u3_u1_1319_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1322_inst] (EQ_u3_u1_1319_wire p3_valid_1123 konst_1321_wire_constant) (MUX_1322_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1325_inst] (next_active_packet_1179 konst_1324_wire_constant) (EQ_u3_u1_1325_wire)   $flowthrough 
    $delay EQ_u3_u1_1325_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1328_inst] (EQ_u3_u1_1325_wire p4_valid_1128 konst_1327_wire_constant) (MUX_1328_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1329_inst] (MUX_1322_wire MUX_1328_wire) (OR_u1_u1_1329_wire)   $flowthrough 
    $delay OR_u1_u1_1329_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1330_inst] (OR_u1_u1_1316_wire OR_u1_u1_1329_wire) (send_flag_1331)   $flowthrough 
    $delay OR_u1_u1_1330_inst 0
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 356
    // out_data_1
    $ioport $out [WPIPE_out_data_1_1333_inst]  (data_to_out_1302) (out_data_1) $guard ( send_flag_1331 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1043
  //  file .Aa/switch2x2.opt.aa, line 318
  phi_stmt_1045 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1045_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1045_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1045_phi_mux_ack)
  next_down_counter_1237_1048_buf <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_down_counter_1048_Sample/req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_down_counter_1048_Update/req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_down_counter_1048_Sample/ack branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_down_counter_1048_Update/ack)
  phi_stmt_1049 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1049_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1049_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1049_phi_mux_ack)
  // noblock_obuf_1_1
  RPIPE_noblock_obuf_1_1_1053_inst <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_1_1_1053_Sample/rr branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_1_1_1053_Update/cr) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_1_1_1053_Sample/ra branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_1_1_1053_Update/ca)
  phi_stmt_1054 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1054_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1054_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1054_phi_mux_ack)
  // noblock_obuf_2_1
  RPIPE_noblock_obuf_2_1_1058_inst <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_2_1_1058_Sample/rr branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_2_1_1058_Update/cr) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_2_1_1058_Sample/ra branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_2_1_1058_Update/ca)
  phi_stmt_1059 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1059_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1059_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1059_phi_mux_ack)
  // noblock_obuf_3_1
  RPIPE_noblock_obuf_3_1_1063_inst <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_3_1_1063_Sample/rr branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_3_1_1063_Update/cr) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_3_1_1063_Sample/ra branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_3_1_1063_Update/ca)
  phi_stmt_1064 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1064_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1064_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1064_phi_mux_ack)
  // noblock_obuf_4_1
  RPIPE_noblock_obuf_4_1_1068_inst <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_4_1_1068_Sample/rr branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_4_1_1068_Update/cr) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_4_1_1068_Sample/ra branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/RPIPE_noblock_obuf_4_1_1068_Update/ca)
  phi_stmt_1069 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1069_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1069_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1069_phi_mux_ack)
  next_active_packet_1179_1072_buf <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_1072_Sample/req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_1072_Update/req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_1072_Sample/ack branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_1072_Update/ack)
  phi_stmt_1073 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1073_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1073_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1073_phi_mux_ack)
  next_active_packet_length_1224_1076_buf <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_length_1076_Sample/req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_length_1076_Update/req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_length_1076_Sample/ack branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_active_packet_length_1076_Update/ack)
  phi_stmt_1077 <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1077_entry_sample_req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1077_loopback_sample_req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/phi_stmt_1077_phi_mux_ack)
  next_priority_index_1179_1080_buf <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_priority_index_1080_Sample/req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_priority_index_1080_Update/req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_priority_index_1080_Sample/ack branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/R_next_priority_index_1080_Update/ack)
  // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 338
  // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
  // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
  // read_from_1
  // ( $mux read_from_1 0   _b0  ) 
  // read_from_2
  // ( $mux read_from_2 1   _b0  ) 
  // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
  // read_from_3
  // ( $mux read_from_3 2   _b0  ) 
  // read_from_4
  // ( $mux read_from_4 3   _b0  ) 
  // 			$call updateCounter (senderPort 0  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
  //  file .Aa/switch2x2.opt.aa, line 339
  // senderPort
  call_stmt_1108_call <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/call_stmt_1108_Sample/crr branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/call_stmt_1108_Update/ccr) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/call_stmt_1108_Sample/cra branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/call_stmt_1108_Update/cca)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 340
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 341
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 342
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 343
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 345
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
  //  file .Aa/switch2x2.opt.aa, line 346
  // down_counter
  // active_packet
  // priority_index
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 347
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 348
  // started_new_packet
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
  // active_packet_length
  // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
  // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 349
  // started_new_packet
  // (next_active_packet_length - 1 )
  // next_active_packet_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 350
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 351
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 352
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 353
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 354
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 355
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 356
  // data_to_out
  // out_data_1
  WPIPE_out_data_1_1333_inst <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/WPIPE_out_data_1_1333_Sample/req branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/WPIPE_out_data_1_1333_Update/req) (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/WPIPE_out_data_1_1333_Sample/ack branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/WPIPE_out_data_1_1333_Update/ack)
  do_while_stmt_1043_branch <=> (branch_block_stmt_1042/do_while_stmt_1043/do_while_stmt_1043_loop_body/condition_evaluated) (branch_block_stmt_1042/do_while_stmt_1043/loop_exit/ack branch_block_stmt_1042/do_while_stmt_1043/loop_taken/ack)
}
$module [outputPort_2_Daemon] 
{
  // pipe-declarations for block %outputPort_2_Daemon
  //  file .Aa/switch2x2.opt.aa, line 361
  // pipe-declarations for block %outputPort_2_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 366
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1350] // Branch Block  file .Aa/switch2x2.opt.aa, line 366
    {
      $P [branch_block_stmt_1350__entry__]
      branch_block_stmt_1350__entry__ <-| ($entry)
      $P [branch_block_stmt_1350__exit__]
      branch_block_stmt_1350__exit__ |-> ($exit)
      $P [do_while_stmt_1351__entry__] 
      $P [do_while_stmt_1351__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 368
      <o> [do_while_stmt_1351]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1351__entry__] 
        $P[do_while_stmt_1351__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1351_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_1353
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1353_sample_start_] 
          $T[phi_stmt_1353_sample_completed_] 
          $T[phi_stmt_1353_update_start_] 
          $T[phi_stmt_1353_update_completed_] 
          $T[phi_stmt_1353_sample_start__ps] 
          phi_stmt_1353_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1353_sample_completed__ps] 
          phi_stmt_1353_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1353_update_start__ps] 
          phi_stmt_1353_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1353_update_completed__ps] 
          phi_stmt_1353_update_completed_ <-& (phi_stmt_1353_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1353_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1353_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1353_update_start_)
          $T[phi_stmt_1353_loopback_trigger] 
          phi_stmt_1353_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1353_loopback_sample_req] 
          $T[phi_stmt_1353_loopback_sample_req_ps] 
          phi_stmt_1353_loopback_sample_req <-& (phi_stmt_1353_loopback_sample_req_ps)
          phi_stmt_1353_loopback_sample_req &-> ($null)
          $T[phi_stmt_1353_entry_trigger] 
          phi_stmt_1353_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1353_entry_sample_req] 
          $T[phi_stmt_1353_entry_sample_req_ps] 
          phi_stmt_1353_entry_sample_req <-& (phi_stmt_1353_entry_sample_req_ps)
          phi_stmt_1353_entry_sample_req &-> ($null)
          phi_stmt_1353_update_start_ o<-& (phi_stmt_1353_update_completed_ 0)
          phi_stmt_1353_sample_start_ o<-& (phi_stmt_1353_sample_completed_ 1)
          $T[phi_stmt_1353_merged_reqs] 
          $T[phi_stmt_1353_phi_mux_ack] 
          $T[phi_stmt_1353_phi_mux_ack_ps] 
          phi_stmt_1353_phi_mux_ack_ps <-& (phi_stmt_1353_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1353_update_completed_)
          $T[R_ZERO_8_1355_sample_start__ps] 
          $T[R_ZERO_8_1355_sample_completed__ps] 
          $T[R_ZERO_8_1355_update_start__ps] 
          $T[R_ZERO_8_1355_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1355_sample_start_] 
          $T[R_ZERO_8_1355_sample_completed_] 
          R_ZERO_8_1355_sample_completed_ <-& (R_ZERO_8_1355_sample_start_)
          $T[R_ZERO_8_1355_update_start_] 
          $T [R_ZERO_8_1355_update_completed_] $delay 
          R_ZERO_8_1355_update_completed_ <-& (R_ZERO_8_1355_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1355_sample_start_ <-& (R_ZERO_8_1355_sample_start__ps)
          R_ZERO_8_1355_update_start_ <-& (R_ZERO_8_1355_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1355_sample_completed__ps <-& (R_ZERO_8_1355_sample_completed_)
          R_ZERO_8_1355_update_completed__ps <-& (R_ZERO_8_1355_update_completed_)
          $T[R_next_down_counter_1356_sample_start__ps] 
          $T[R_next_down_counter_1356_sample_completed__ps] 
          $T[R_next_down_counter_1356_update_start__ps] 
          $T[R_next_down_counter_1356_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1356_sample_start_] 
          $T[R_next_down_counter_1356_sample_completed_] 
          $T[R_next_down_counter_1356_update_start_] 
          $T[R_next_down_counter_1356_update_completed_] 
          ;;[R_next_down_counter_1356_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1356_sample_start_ &-> (R_next_down_counter_1356_Sample)
          R_next_down_counter_1356_sample_completed_ <-& (R_next_down_counter_1356_Sample)
          ;;[R_next_down_counter_1356_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1356_update_start_ &-> (R_next_down_counter_1356_Update)
          R_next_down_counter_1356_update_completed_ <-& (R_next_down_counter_1356_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1356_sample_start_ <-& (R_next_down_counter_1356_sample_start__ps)
          R_next_down_counter_1356_update_start_ <-& (R_next_down_counter_1356_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1356_sample_completed__ps <-& (R_next_down_counter_1356_sample_completed_)
          R_next_down_counter_1356_update_completed__ps <-& (R_next_down_counter_1356_update_completed_)
          $phisequencer [ phi_stmt_1353_phi_seq] : 
          phi_stmt_1353_entry_trigger R_ZERO_8_1355_sample_start__ps R_ZERO_8_1355_sample_completed__ps R_ZERO_8_1355_update_start__ps R_ZERO_8_1355_update_completed__ps phi_stmt_1353_loopback_trigger R_next_down_counter_1356_sample_start__ps R_next_down_counter_1356_sample_completed__ps R_next_down_counter_1356_update_start__ps R_next_down_counter_1356_update_completed__ps :
          phi_stmt_1353_sample_start__ps phi_stmt_1353_sample_completed__ps phi_stmt_1353_update_start__ps phi_stmt_1353_update_completed__ps :
          phi_stmt_1353_entry_sample_req_ps phi_stmt_1353_loopback_sample_req_ps : 
          phi_stmt_1353_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1353
          // start:  multi-source PHI statement phi_stmt_1357
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1357_sample_start_] 
          $T[phi_stmt_1357_sample_completed_] 
          $T[phi_stmt_1357_update_start_] 
          $T[phi_stmt_1357_update_completed_] 
          $T[phi_stmt_1357_sample_start__ps] 
          phi_stmt_1357_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1357_sample_completed__ps] 
          phi_stmt_1357_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1357_update_start__ps] 
          phi_stmt_1357_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1357_update_completed__ps] 
          phi_stmt_1357_update_completed_ <-& (phi_stmt_1357_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1357_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1357_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1357_update_start_)
          $T[phi_stmt_1357_loopback_trigger] 
          phi_stmt_1357_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1357_loopback_sample_req] 
          $T[phi_stmt_1357_loopback_sample_req_ps] 
          phi_stmt_1357_loopback_sample_req <-& (phi_stmt_1357_loopback_sample_req_ps)
          phi_stmt_1357_loopback_sample_req &-> ($null)
          $T[phi_stmt_1357_entry_trigger] 
          phi_stmt_1357_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1357_entry_sample_req] 
          $T[phi_stmt_1357_entry_sample_req_ps] 
          phi_stmt_1357_entry_sample_req <-& (phi_stmt_1357_entry_sample_req_ps)
          phi_stmt_1357_entry_sample_req &-> ($null)
          phi_stmt_1357_update_start_ o<-& (phi_stmt_1357_update_completed_ 0)
          phi_stmt_1357_sample_start_ o<-& (phi_stmt_1357_sample_completed_ 1)
          $T[phi_stmt_1357_merged_reqs] 
          $T[phi_stmt_1357_phi_mux_ack] 
          $T[phi_stmt_1357_phi_mux_ack_ps] 
          phi_stmt_1357_phi_mux_ack_ps <-& (phi_stmt_1357_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1357_update_completed_)
          $T[R_ZERO_33_1359_sample_start__ps] 
          $T[R_ZERO_33_1359_sample_completed__ps] 
          $T[R_ZERO_33_1359_update_start__ps] 
          $T[R_ZERO_33_1359_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1359_sample_start_] 
          $T[R_ZERO_33_1359_sample_completed_] 
          R_ZERO_33_1359_sample_completed_ <-& (R_ZERO_33_1359_sample_start_)
          $T[R_ZERO_33_1359_update_start_] 
          $T [R_ZERO_33_1359_update_completed_] $delay 
          R_ZERO_33_1359_update_completed_ <-& (R_ZERO_33_1359_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1359_sample_start_ <-& (R_ZERO_33_1359_sample_start__ps)
          R_ZERO_33_1359_update_start_ <-& (R_ZERO_33_1359_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1359_sample_completed__ps <-& (R_ZERO_33_1359_sample_completed_)
          R_ZERO_33_1359_update_completed__ps <-& (R_ZERO_33_1359_update_completed_)
          $T[RPIPE_noblock_obuf_1_2_1361_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_1361_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_2_1361_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_1361_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_2
          $T[RPIPE_noblock_obuf_1_2_1361_sample_start_] 
          $T[RPIPE_noblock_obuf_1_2_1361_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_2_1361_update_start_] 
          $T[RPIPE_noblock_obuf_1_2_1361_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_2_1361 with guard R_read_from_1_1360
          // root phi_stmt_1357 not in visited_elements
          // root phi_stmt_1362 not in visited_elements
          // root phi_stmt_1367 not in visited_elements
          // root phi_stmt_1372 not in visited_elements
          // root phi_stmt_1377 not in visited_elements
          // root phi_stmt_1385 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_2_1361_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_2_1361_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_2_1361_sample_start_ &-> (RPIPE_noblock_obuf_1_2_1361_Sample)
          RPIPE_noblock_obuf_1_2_1361_sample_completed_ <-& (RPIPE_noblock_obuf_1_2_1361_Sample)
          RPIPE_noblock_obuf_1_2_1361_update_start_ <-& (RPIPE_noblock_obuf_1_2_1361_sample_completed_)
          RPIPE_noblock_obuf_1_2_1361_update_start_ &-> (RPIPE_noblock_obuf_1_2_1361_Update)
          RPIPE_noblock_obuf_1_2_1361_update_completed_ <-& (RPIPE_noblock_obuf_1_2_1361_Update)
          RPIPE_noblock_obuf_1_2_1361_sample_start_ o<-& (RPIPE_noblock_obuf_1_2_1361_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_2_1361_sample_start_ <-& (RPIPE_noblock_obuf_1_2_1361_sample_start__ps)
          RPIPE_noblock_obuf_1_2_1361_update_start_ <-& (RPIPE_noblock_obuf_1_2_1361_update_start__ps)
          // RAW reenables for noblock_obuf_1_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_2_1361_sample_completed__ps <-& (RPIPE_noblock_obuf_1_2_1361_sample_completed_)
          RPIPE_noblock_obuf_1_2_1361_update_completed__ps <-& (RPIPE_noblock_obuf_1_2_1361_update_completed_)
          $phisequencer [ phi_stmt_1357_phi_seq] : 
          phi_stmt_1357_entry_trigger R_ZERO_33_1359_sample_start__ps R_ZERO_33_1359_sample_completed__ps R_ZERO_33_1359_update_start__ps R_ZERO_33_1359_update_completed__ps phi_stmt_1357_loopback_trigger RPIPE_noblock_obuf_1_2_1361_sample_start__ps RPIPE_noblock_obuf_1_2_1361_sample_completed__ps RPIPE_noblock_obuf_1_2_1361_update_start__ps RPIPE_noblock_obuf_1_2_1361_update_completed__ps :
          phi_stmt_1357_sample_start__ps phi_stmt_1357_sample_completed__ps phi_stmt_1357_update_start__ps phi_stmt_1357_update_completed__ps :
          phi_stmt_1357_entry_sample_req_ps phi_stmt_1357_loopback_sample_req_ps : 
          phi_stmt_1357_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1357
          // start:  multi-source PHI statement phi_stmt_1362
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1362_sample_start_] 
          $T[phi_stmt_1362_sample_completed_] 
          $T[phi_stmt_1362_update_start_] 
          $T[phi_stmt_1362_update_completed_] 
          $T[phi_stmt_1362_sample_start__ps] 
          phi_stmt_1362_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1362_sample_completed__ps] 
          phi_stmt_1362_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1362_update_start__ps] 
          phi_stmt_1362_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1362_update_completed__ps] 
          phi_stmt_1362_update_completed_ <-& (phi_stmt_1362_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1362_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1362_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1362_update_start_)
          $T[phi_stmt_1362_loopback_trigger] 
          phi_stmt_1362_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1362_loopback_sample_req] 
          $T[phi_stmt_1362_loopback_sample_req_ps] 
          phi_stmt_1362_loopback_sample_req <-& (phi_stmt_1362_loopback_sample_req_ps)
          phi_stmt_1362_loopback_sample_req &-> ($null)
          $T[phi_stmt_1362_entry_trigger] 
          phi_stmt_1362_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1362_entry_sample_req] 
          $T[phi_stmt_1362_entry_sample_req_ps] 
          phi_stmt_1362_entry_sample_req <-& (phi_stmt_1362_entry_sample_req_ps)
          phi_stmt_1362_entry_sample_req &-> ($null)
          phi_stmt_1362_update_start_ o<-& (phi_stmt_1362_update_completed_ 0)
          phi_stmt_1362_sample_start_ o<-& (phi_stmt_1362_sample_completed_ 1)
          $T[phi_stmt_1362_merged_reqs] 
          $T[phi_stmt_1362_phi_mux_ack] 
          $T[phi_stmt_1362_phi_mux_ack_ps] 
          phi_stmt_1362_phi_mux_ack_ps <-& (phi_stmt_1362_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1362_update_completed_)
          $T[R_ZERO_33_1364_sample_start__ps] 
          $T[R_ZERO_33_1364_sample_completed__ps] 
          $T[R_ZERO_33_1364_update_start__ps] 
          $T[R_ZERO_33_1364_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1364_sample_start_] 
          $T[R_ZERO_33_1364_sample_completed_] 
          R_ZERO_33_1364_sample_completed_ <-& (R_ZERO_33_1364_sample_start_)
          $T[R_ZERO_33_1364_update_start_] 
          $T [R_ZERO_33_1364_update_completed_] $delay 
          R_ZERO_33_1364_update_completed_ <-& (R_ZERO_33_1364_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1364_sample_start_ <-& (R_ZERO_33_1364_sample_start__ps)
          R_ZERO_33_1364_update_start_ <-& (R_ZERO_33_1364_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1364_sample_completed__ps <-& (R_ZERO_33_1364_sample_completed_)
          R_ZERO_33_1364_update_completed__ps <-& (R_ZERO_33_1364_update_completed_)
          $T[RPIPE_noblock_obuf_2_2_1366_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_1366_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_2_1366_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_1366_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_2
          $T[RPIPE_noblock_obuf_2_2_1366_sample_start_] 
          $T[RPIPE_noblock_obuf_2_2_1366_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_2_1366_update_start_] 
          $T[RPIPE_noblock_obuf_2_2_1366_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_2_1366 with guard R_read_from_2_1365
          // root phi_stmt_1362 not in visited_elements
          // root phi_stmt_1367 not in visited_elements
          // root phi_stmt_1372 not in visited_elements
          // root phi_stmt_1377 not in visited_elements
          // root phi_stmt_1385 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_2_1366_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_2_1366_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_2_1366_sample_start_ &-> (RPIPE_noblock_obuf_2_2_1366_Sample)
          RPIPE_noblock_obuf_2_2_1366_sample_completed_ <-& (RPIPE_noblock_obuf_2_2_1366_Sample)
          RPIPE_noblock_obuf_2_2_1366_update_start_ <-& (RPIPE_noblock_obuf_2_2_1366_sample_completed_)
          RPIPE_noblock_obuf_2_2_1366_update_start_ &-> (RPIPE_noblock_obuf_2_2_1366_Update)
          RPIPE_noblock_obuf_2_2_1366_update_completed_ <-& (RPIPE_noblock_obuf_2_2_1366_Update)
          RPIPE_noblock_obuf_2_2_1366_sample_start_ o<-& (RPIPE_noblock_obuf_2_2_1366_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_2_1366_sample_start_ <-& (RPIPE_noblock_obuf_2_2_1366_sample_start__ps)
          RPIPE_noblock_obuf_2_2_1366_update_start_ <-& (RPIPE_noblock_obuf_2_2_1366_update_start__ps)
          // RAW reenables for noblock_obuf_2_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_2_1366_sample_completed__ps <-& (RPIPE_noblock_obuf_2_2_1366_sample_completed_)
          RPIPE_noblock_obuf_2_2_1366_update_completed__ps <-& (RPIPE_noblock_obuf_2_2_1366_update_completed_)
          $phisequencer [ phi_stmt_1362_phi_seq] : 
          phi_stmt_1362_entry_trigger R_ZERO_33_1364_sample_start__ps R_ZERO_33_1364_sample_completed__ps R_ZERO_33_1364_update_start__ps R_ZERO_33_1364_update_completed__ps phi_stmt_1362_loopback_trigger RPIPE_noblock_obuf_2_2_1366_sample_start__ps RPIPE_noblock_obuf_2_2_1366_sample_completed__ps RPIPE_noblock_obuf_2_2_1366_update_start__ps RPIPE_noblock_obuf_2_2_1366_update_completed__ps :
          phi_stmt_1362_sample_start__ps phi_stmt_1362_sample_completed__ps phi_stmt_1362_update_start__ps phi_stmt_1362_update_completed__ps :
          phi_stmt_1362_entry_sample_req_ps phi_stmt_1362_loopback_sample_req_ps : 
          phi_stmt_1362_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1362
          // start:  multi-source PHI statement phi_stmt_1367
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1367_sample_start_] 
          $T[phi_stmt_1367_sample_completed_] 
          $T[phi_stmt_1367_update_start_] 
          $T[phi_stmt_1367_update_completed_] 
          $T[phi_stmt_1367_sample_start__ps] 
          phi_stmt_1367_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1367_sample_completed__ps] 
          phi_stmt_1367_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1367_update_start__ps] 
          phi_stmt_1367_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1367_update_completed__ps] 
          phi_stmt_1367_update_completed_ <-& (phi_stmt_1367_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1367_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1367_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1367_update_start_)
          $T[phi_stmt_1367_loopback_trigger] 
          phi_stmt_1367_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1367_loopback_sample_req] 
          $T[phi_stmt_1367_loopback_sample_req_ps] 
          phi_stmt_1367_loopback_sample_req <-& (phi_stmt_1367_loopback_sample_req_ps)
          phi_stmt_1367_loopback_sample_req &-> ($null)
          $T[phi_stmt_1367_entry_trigger] 
          phi_stmt_1367_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1367_entry_sample_req] 
          $T[phi_stmt_1367_entry_sample_req_ps] 
          phi_stmt_1367_entry_sample_req <-& (phi_stmt_1367_entry_sample_req_ps)
          phi_stmt_1367_entry_sample_req &-> ($null)
          phi_stmt_1367_update_start_ o<-& (phi_stmt_1367_update_completed_ 0)
          phi_stmt_1367_sample_start_ o<-& (phi_stmt_1367_sample_completed_ 1)
          $T[phi_stmt_1367_merged_reqs] 
          $T[phi_stmt_1367_phi_mux_ack] 
          $T[phi_stmt_1367_phi_mux_ack_ps] 
          phi_stmt_1367_phi_mux_ack_ps <-& (phi_stmt_1367_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1367_update_completed_)
          $T[R_ZERO_33_1369_sample_start__ps] 
          $T[R_ZERO_33_1369_sample_completed__ps] 
          $T[R_ZERO_33_1369_update_start__ps] 
          $T[R_ZERO_33_1369_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1369_sample_start_] 
          $T[R_ZERO_33_1369_sample_completed_] 
          R_ZERO_33_1369_sample_completed_ <-& (R_ZERO_33_1369_sample_start_)
          $T[R_ZERO_33_1369_update_start_] 
          $T [R_ZERO_33_1369_update_completed_] $delay 
          R_ZERO_33_1369_update_completed_ <-& (R_ZERO_33_1369_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1369_sample_start_ <-& (R_ZERO_33_1369_sample_start__ps)
          R_ZERO_33_1369_update_start_ <-& (R_ZERO_33_1369_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1369_sample_completed__ps <-& (R_ZERO_33_1369_sample_completed_)
          R_ZERO_33_1369_update_completed__ps <-& (R_ZERO_33_1369_update_completed_)
          $T[RPIPE_noblock_obuf_3_2_1371_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_1371_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_2_1371_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_1371_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_2
          $T[RPIPE_noblock_obuf_3_2_1371_sample_start_] 
          $T[RPIPE_noblock_obuf_3_2_1371_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_2_1371_update_start_] 
          $T[RPIPE_noblock_obuf_3_2_1371_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_2_1371 with guard R_read_from_3_1370
          // root phi_stmt_1367 not in visited_elements
          // root phi_stmt_1372 not in visited_elements
          // root phi_stmt_1377 not in visited_elements
          // root phi_stmt_1385 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_2_1371_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_2_1371_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_2_1371_sample_start_ &-> (RPIPE_noblock_obuf_3_2_1371_Sample)
          RPIPE_noblock_obuf_3_2_1371_sample_completed_ <-& (RPIPE_noblock_obuf_3_2_1371_Sample)
          RPIPE_noblock_obuf_3_2_1371_update_start_ <-& (RPIPE_noblock_obuf_3_2_1371_sample_completed_)
          RPIPE_noblock_obuf_3_2_1371_update_start_ &-> (RPIPE_noblock_obuf_3_2_1371_Update)
          RPIPE_noblock_obuf_3_2_1371_update_completed_ <-& (RPIPE_noblock_obuf_3_2_1371_Update)
          RPIPE_noblock_obuf_3_2_1371_sample_start_ o<-& (RPIPE_noblock_obuf_3_2_1371_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_2_1371_sample_start_ <-& (RPIPE_noblock_obuf_3_2_1371_sample_start__ps)
          RPIPE_noblock_obuf_3_2_1371_update_start_ <-& (RPIPE_noblock_obuf_3_2_1371_update_start__ps)
          // RAW reenables for noblock_obuf_3_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_2_1371_sample_completed__ps <-& (RPIPE_noblock_obuf_3_2_1371_sample_completed_)
          RPIPE_noblock_obuf_3_2_1371_update_completed__ps <-& (RPIPE_noblock_obuf_3_2_1371_update_completed_)
          $phisequencer [ phi_stmt_1367_phi_seq] : 
          phi_stmt_1367_entry_trigger R_ZERO_33_1369_sample_start__ps R_ZERO_33_1369_sample_completed__ps R_ZERO_33_1369_update_start__ps R_ZERO_33_1369_update_completed__ps phi_stmt_1367_loopback_trigger RPIPE_noblock_obuf_3_2_1371_sample_start__ps RPIPE_noblock_obuf_3_2_1371_sample_completed__ps RPIPE_noblock_obuf_3_2_1371_update_start__ps RPIPE_noblock_obuf_3_2_1371_update_completed__ps :
          phi_stmt_1367_sample_start__ps phi_stmt_1367_sample_completed__ps phi_stmt_1367_update_start__ps phi_stmt_1367_update_completed__ps :
          phi_stmt_1367_entry_sample_req_ps phi_stmt_1367_loopback_sample_req_ps : 
          phi_stmt_1367_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1367
          // start:  multi-source PHI statement phi_stmt_1372
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1372_sample_start_] 
          $T[phi_stmt_1372_sample_completed_] 
          $T[phi_stmt_1372_update_start_] 
          $T[phi_stmt_1372_update_completed_] 
          $T[phi_stmt_1372_sample_start__ps] 
          phi_stmt_1372_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1372_sample_completed__ps] 
          phi_stmt_1372_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1372_update_start__ps] 
          phi_stmt_1372_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1372_update_completed__ps] 
          phi_stmt_1372_update_completed_ <-& (phi_stmt_1372_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1372_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1372_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1372_update_start_)
          $T[phi_stmt_1372_loopback_trigger] 
          phi_stmt_1372_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1372_loopback_sample_req] 
          $T[phi_stmt_1372_loopback_sample_req_ps] 
          phi_stmt_1372_loopback_sample_req <-& (phi_stmt_1372_loopback_sample_req_ps)
          phi_stmt_1372_loopback_sample_req &-> ($null)
          $T[phi_stmt_1372_entry_trigger] 
          phi_stmt_1372_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1372_entry_sample_req] 
          $T[phi_stmt_1372_entry_sample_req_ps] 
          phi_stmt_1372_entry_sample_req <-& (phi_stmt_1372_entry_sample_req_ps)
          phi_stmt_1372_entry_sample_req &-> ($null)
          phi_stmt_1372_update_start_ o<-& (phi_stmt_1372_update_completed_ 0)
          phi_stmt_1372_sample_start_ o<-& (phi_stmt_1372_sample_completed_ 1)
          $T[phi_stmt_1372_merged_reqs] 
          $T[phi_stmt_1372_phi_mux_ack] 
          $T[phi_stmt_1372_phi_mux_ack_ps] 
          phi_stmt_1372_phi_mux_ack_ps <-& (phi_stmt_1372_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1372_update_completed_)
          $T[R_ZERO_33_1374_sample_start__ps] 
          $T[R_ZERO_33_1374_sample_completed__ps] 
          $T[R_ZERO_33_1374_update_start__ps] 
          $T[R_ZERO_33_1374_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1374_sample_start_] 
          $T[R_ZERO_33_1374_sample_completed_] 
          R_ZERO_33_1374_sample_completed_ <-& (R_ZERO_33_1374_sample_start_)
          $T[R_ZERO_33_1374_update_start_] 
          $T [R_ZERO_33_1374_update_completed_] $delay 
          R_ZERO_33_1374_update_completed_ <-& (R_ZERO_33_1374_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1374_sample_start_ <-& (R_ZERO_33_1374_sample_start__ps)
          R_ZERO_33_1374_update_start_ <-& (R_ZERO_33_1374_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1374_sample_completed__ps <-& (R_ZERO_33_1374_sample_completed_)
          R_ZERO_33_1374_update_completed__ps <-& (R_ZERO_33_1374_update_completed_)
          $T[RPIPE_noblock_obuf_4_2_1376_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_1376_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_2_1376_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_1376_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_2
          $T[RPIPE_noblock_obuf_4_2_1376_sample_start_] 
          $T[RPIPE_noblock_obuf_4_2_1376_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_2_1376_update_start_] 
          $T[RPIPE_noblock_obuf_4_2_1376_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_2_1376 with guard R_read_from_4_1375
          // root phi_stmt_1372 not in visited_elements
          // root phi_stmt_1377 not in visited_elements
          // root phi_stmt_1385 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_2_1376_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_2_1376_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_2_1376_sample_start_ &-> (RPIPE_noblock_obuf_4_2_1376_Sample)
          RPIPE_noblock_obuf_4_2_1376_sample_completed_ <-& (RPIPE_noblock_obuf_4_2_1376_Sample)
          RPIPE_noblock_obuf_4_2_1376_update_start_ <-& (RPIPE_noblock_obuf_4_2_1376_sample_completed_)
          RPIPE_noblock_obuf_4_2_1376_update_start_ &-> (RPIPE_noblock_obuf_4_2_1376_Update)
          RPIPE_noblock_obuf_4_2_1376_update_completed_ <-& (RPIPE_noblock_obuf_4_2_1376_Update)
          RPIPE_noblock_obuf_4_2_1376_sample_start_ o<-& (RPIPE_noblock_obuf_4_2_1376_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_2_1376_sample_start_ <-& (RPIPE_noblock_obuf_4_2_1376_sample_start__ps)
          RPIPE_noblock_obuf_4_2_1376_update_start_ <-& (RPIPE_noblock_obuf_4_2_1376_update_start__ps)
          // RAW reenables for noblock_obuf_4_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_2_1376_sample_completed__ps <-& (RPIPE_noblock_obuf_4_2_1376_sample_completed_)
          RPIPE_noblock_obuf_4_2_1376_update_completed__ps <-& (RPIPE_noblock_obuf_4_2_1376_update_completed_)
          $phisequencer [ phi_stmt_1372_phi_seq] : 
          phi_stmt_1372_entry_trigger R_ZERO_33_1374_sample_start__ps R_ZERO_33_1374_sample_completed__ps R_ZERO_33_1374_update_start__ps R_ZERO_33_1374_update_completed__ps phi_stmt_1372_loopback_trigger RPIPE_noblock_obuf_4_2_1376_sample_start__ps RPIPE_noblock_obuf_4_2_1376_sample_completed__ps RPIPE_noblock_obuf_4_2_1376_update_start__ps RPIPE_noblock_obuf_4_2_1376_update_completed__ps :
          phi_stmt_1372_sample_start__ps phi_stmt_1372_sample_completed__ps phi_stmt_1372_update_start__ps phi_stmt_1372_update_completed__ps :
          phi_stmt_1372_entry_sample_req_ps phi_stmt_1372_loopback_sample_req_ps : 
          phi_stmt_1372_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1372
          // start:  multi-source PHI statement phi_stmt_1377
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1377_sample_start_] 
          $T[phi_stmt_1377_sample_completed_] 
          $T[phi_stmt_1377_update_start_] 
          $T[phi_stmt_1377_update_completed_] 
          $T[phi_stmt_1377_sample_start__ps] 
          phi_stmt_1377_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1377_sample_completed__ps] 
          phi_stmt_1377_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1377_update_start__ps] 
          phi_stmt_1377_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1377_update_completed__ps] 
          phi_stmt_1377_update_completed_ <-& (phi_stmt_1377_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1377_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1377_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1377_update_start_)
          $T[phi_stmt_1377_loopback_trigger] 
          phi_stmt_1377_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1377_loopback_sample_req] 
          $T[phi_stmt_1377_loopback_sample_req_ps] 
          phi_stmt_1377_loopback_sample_req <-& (phi_stmt_1377_loopback_sample_req_ps)
          phi_stmt_1377_loopback_sample_req &-> ($null)
          $T[phi_stmt_1377_entry_trigger] 
          phi_stmt_1377_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1377_entry_sample_req] 
          $T[phi_stmt_1377_entry_sample_req_ps] 
          phi_stmt_1377_entry_sample_req <-& (phi_stmt_1377_entry_sample_req_ps)
          phi_stmt_1377_entry_sample_req &-> ($null)
          phi_stmt_1377_update_start_ o<-& (phi_stmt_1377_update_completed_ 0)
          phi_stmt_1377_sample_start_ o<-& (phi_stmt_1377_sample_completed_ 1)
          $T[phi_stmt_1377_merged_reqs] 
          $T[phi_stmt_1377_phi_mux_ack] 
          $T[phi_stmt_1377_phi_mux_ack_ps] 
          phi_stmt_1377_phi_mux_ack_ps <-& (phi_stmt_1377_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1377_update_completed_)
          $T[R_ZERO_3_1379_sample_start__ps] 
          $T[R_ZERO_3_1379_sample_completed__ps] 
          $T[R_ZERO_3_1379_update_start__ps] 
          $T[R_ZERO_3_1379_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1379_sample_start_] 
          $T[R_ZERO_3_1379_sample_completed_] 
          R_ZERO_3_1379_sample_completed_ <-& (R_ZERO_3_1379_sample_start_)
          $T[R_ZERO_3_1379_update_start_] 
          $T [R_ZERO_3_1379_update_completed_] $delay 
          R_ZERO_3_1379_update_completed_ <-& (R_ZERO_3_1379_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1379_sample_start_ <-& (R_ZERO_3_1379_sample_start__ps)
          R_ZERO_3_1379_update_start_ <-& (R_ZERO_3_1379_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1379_sample_completed__ps <-& (R_ZERO_3_1379_sample_completed_)
          R_ZERO_3_1379_update_completed__ps <-& (R_ZERO_3_1379_update_completed_)
          $T[R_next_active_packet_1380_sample_start__ps] 
          $T[R_next_active_packet_1380_sample_completed__ps] 
          $T[R_next_active_packet_1380_update_start__ps] 
          $T[R_next_active_packet_1380_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1380_sample_start_] 
          $T[R_next_active_packet_1380_sample_completed_] 
          $T[R_next_active_packet_1380_update_start_] 
          $T[R_next_active_packet_1380_update_completed_] 
          ;;[R_next_active_packet_1380_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1380_sample_start_ &-> (R_next_active_packet_1380_Sample)
          R_next_active_packet_1380_sample_completed_ <-& (R_next_active_packet_1380_Sample)
          ;;[R_next_active_packet_1380_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1380_update_start_ &-> (R_next_active_packet_1380_Update)
          R_next_active_packet_1380_update_completed_ <-& (R_next_active_packet_1380_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1380_sample_start_ <-& (R_next_active_packet_1380_sample_start__ps)
          R_next_active_packet_1380_update_start_ <-& (R_next_active_packet_1380_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1380_sample_completed__ps <-& (R_next_active_packet_1380_sample_completed_)
          R_next_active_packet_1380_update_completed__ps <-& (R_next_active_packet_1380_update_completed_)
          $phisequencer [ phi_stmt_1377_phi_seq] : 
          phi_stmt_1377_entry_trigger R_ZERO_3_1379_sample_start__ps R_ZERO_3_1379_sample_completed__ps R_ZERO_3_1379_update_start__ps R_ZERO_3_1379_update_completed__ps phi_stmt_1377_loopback_trigger R_next_active_packet_1380_sample_start__ps R_next_active_packet_1380_sample_completed__ps R_next_active_packet_1380_update_start__ps R_next_active_packet_1380_update_completed__ps :
          phi_stmt_1377_sample_start__ps phi_stmt_1377_sample_completed__ps phi_stmt_1377_update_start__ps phi_stmt_1377_update_completed__ps :
          phi_stmt_1377_entry_sample_req_ps phi_stmt_1377_loopback_sample_req_ps : 
          phi_stmt_1377_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1377
          // start:  multi-source PHI statement phi_stmt_1381
          // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1381_sample_start_] 
          $T[phi_stmt_1381_sample_completed_] 
          $T[phi_stmt_1381_update_start_] 
          $T[phi_stmt_1381_update_completed_] 
          $T[phi_stmt_1381_sample_start__ps] 
          phi_stmt_1381_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1381_sample_completed__ps] 
          phi_stmt_1381_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1381_update_start__ps] 
          phi_stmt_1381_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1381_update_completed__ps] 
          phi_stmt_1381_update_completed_ <-& (phi_stmt_1381_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1381_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1381_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1381_update_start_)
          $T[phi_stmt_1381_loopback_trigger] 
          phi_stmt_1381_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1381_loopback_sample_req] 
          $T[phi_stmt_1381_loopback_sample_req_ps] 
          phi_stmt_1381_loopback_sample_req <-& (phi_stmt_1381_loopback_sample_req_ps)
          phi_stmt_1381_loopback_sample_req &-> ($null)
          $T[phi_stmt_1381_entry_trigger] 
          phi_stmt_1381_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1381_entry_sample_req] 
          $T[phi_stmt_1381_entry_sample_req_ps] 
          phi_stmt_1381_entry_sample_req <-& (phi_stmt_1381_entry_sample_req_ps)
          phi_stmt_1381_entry_sample_req &-> ($null)
          phi_stmt_1381_update_start_ o<-& (phi_stmt_1381_update_completed_ 0)
          phi_stmt_1381_sample_start_ o<-& (phi_stmt_1381_sample_completed_ 1)
          $T[phi_stmt_1381_merged_reqs] 
          $T[phi_stmt_1381_phi_mux_ack] 
          $T[phi_stmt_1381_phi_mux_ack_ps] 
          phi_stmt_1381_phi_mux_ack_ps <-& (phi_stmt_1381_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1381_update_completed_)
          $T[R_ZERO_8_1383_sample_start__ps] 
          $T[R_ZERO_8_1383_sample_completed__ps] 
          $T[R_ZERO_8_1383_update_start__ps] 
          $T[R_ZERO_8_1383_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1383_sample_start_] 
          $T[R_ZERO_8_1383_sample_completed_] 
          R_ZERO_8_1383_sample_completed_ <-& (R_ZERO_8_1383_sample_start_)
          $T[R_ZERO_8_1383_update_start_] 
          $T [R_ZERO_8_1383_update_completed_] $delay 
          R_ZERO_8_1383_update_completed_ <-& (R_ZERO_8_1383_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1383_sample_start_ <-& (R_ZERO_8_1383_sample_start__ps)
          R_ZERO_8_1383_update_start_ <-& (R_ZERO_8_1383_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1383_sample_completed__ps <-& (R_ZERO_8_1383_sample_completed_)
          R_ZERO_8_1383_update_completed__ps <-& (R_ZERO_8_1383_update_completed_)
          $T[R_next_active_packet_length_1384_sample_start__ps] 
          $T[R_next_active_packet_length_1384_sample_completed__ps] 
          $T[R_next_active_packet_length_1384_update_start__ps] 
          $T[R_next_active_packet_length_1384_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_length_1384_sample_start_] 
          $T[R_next_active_packet_length_1384_sample_completed_] 
          $T[R_next_active_packet_length_1384_update_start_] 
          $T[R_next_active_packet_length_1384_update_completed_] 
          ;;[R_next_active_packet_length_1384_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_length_1384_sample_start_ &-> (R_next_active_packet_length_1384_Sample)
          R_next_active_packet_length_1384_sample_completed_ <-& (R_next_active_packet_length_1384_Sample)
          ;;[R_next_active_packet_length_1384_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_length_1384_update_start_ &-> (R_next_active_packet_length_1384_Update)
          R_next_active_packet_length_1384_update_completed_ <-& (R_next_active_packet_length_1384_Update)
          // RAW reenables for next_active_packet_length
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_length_1384_sample_start_ <-& (R_next_active_packet_length_1384_sample_start__ps)
          R_next_active_packet_length_1384_update_start_ <-& (R_next_active_packet_length_1384_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_length_1384_sample_completed__ps <-& (R_next_active_packet_length_1384_sample_completed_)
          R_next_active_packet_length_1384_update_completed__ps <-& (R_next_active_packet_length_1384_update_completed_)
          $phisequencer [ phi_stmt_1381_phi_seq] : 
          phi_stmt_1381_entry_trigger R_ZERO_8_1383_sample_start__ps R_ZERO_8_1383_sample_completed__ps R_ZERO_8_1383_update_start__ps R_ZERO_8_1383_update_completed__ps phi_stmt_1381_loopback_trigger R_next_active_packet_length_1384_sample_start__ps R_next_active_packet_length_1384_sample_completed__ps R_next_active_packet_length_1384_update_start__ps R_next_active_packet_length_1384_update_completed__ps :
          phi_stmt_1381_sample_start__ps phi_stmt_1381_sample_completed__ps phi_stmt_1381_update_start__ps phi_stmt_1381_update_completed__ps :
          phi_stmt_1381_entry_sample_req_ps phi_stmt_1381_loopback_sample_req_ps : 
          phi_stmt_1381_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1381
          // start:  multi-source PHI statement phi_stmt_1385
          // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
          // type of target is $uint<2>
          $T[phi_stmt_1385_sample_start_] 
          $T[phi_stmt_1385_sample_completed_] 
          $T[phi_stmt_1385_update_start_] 
          $T[phi_stmt_1385_update_completed_] 
          $T[phi_stmt_1385_sample_start__ps] 
          phi_stmt_1385_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1385_sample_completed__ps] 
          phi_stmt_1385_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1385_update_start__ps] 
          phi_stmt_1385_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1385_update_completed__ps] 
          phi_stmt_1385_update_completed_ <-& (phi_stmt_1385_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1385_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1385_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1385_update_start_)
          $T[phi_stmt_1385_loopback_trigger] 
          phi_stmt_1385_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1385_loopback_sample_req] 
          $T[phi_stmt_1385_loopback_sample_req_ps] 
          phi_stmt_1385_loopback_sample_req <-& (phi_stmt_1385_loopback_sample_req_ps)
          phi_stmt_1385_loopback_sample_req &-> ($null)
          $T[phi_stmt_1385_entry_trigger] 
          phi_stmt_1385_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1385_entry_sample_req] 
          $T[phi_stmt_1385_entry_sample_req_ps] 
          phi_stmt_1385_entry_sample_req <-& (phi_stmt_1385_entry_sample_req_ps)
          phi_stmt_1385_entry_sample_req &-> ($null)
          phi_stmt_1385_update_start_ o<-& (phi_stmt_1385_update_completed_ 0)
          phi_stmt_1385_sample_start_ o<-& (phi_stmt_1385_sample_completed_ 1)
          $T[phi_stmt_1385_merged_reqs] 
          $T[phi_stmt_1385_phi_mux_ack] 
          $T[phi_stmt_1385_phi_mux_ack_ps] 
          phi_stmt_1385_phi_mux_ack_ps <-& (phi_stmt_1385_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1385_update_completed_)
          $T[R_ZERO_2_1387_sample_start__ps] 
          $T[R_ZERO_2_1387_sample_completed__ps] 
          $T[R_ZERO_2_1387_update_start__ps] 
          $T[R_ZERO_2_1387_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_2_1387_sample_start_] 
          $T[R_ZERO_2_1387_sample_completed_] 
          R_ZERO_2_1387_sample_completed_ <-& (R_ZERO_2_1387_sample_start_)
          $T[R_ZERO_2_1387_update_start_] 
          $T [R_ZERO_2_1387_update_completed_] $delay 
          R_ZERO_2_1387_update_completed_ <-& (R_ZERO_2_1387_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_2_1387_sample_start_ <-& (R_ZERO_2_1387_sample_start__ps)
          R_ZERO_2_1387_update_start_ <-& (R_ZERO_2_1387_update_start__ps)
          // Phi complete dependency.
          R_ZERO_2_1387_sample_completed__ps <-& (R_ZERO_2_1387_sample_completed_)
          R_ZERO_2_1387_update_completed__ps <-& (R_ZERO_2_1387_update_completed_)
          $T[R_next_priority_index_1388_sample_start__ps] 
          $T[R_next_priority_index_1388_sample_completed__ps] 
          $T[R_next_priority_index_1388_update_start__ps] 
          $T[R_next_priority_index_1388_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_priority_index_1388_sample_start_] 
          $T[R_next_priority_index_1388_sample_completed_] 
          $T[R_next_priority_index_1388_update_start_] 
          $T[R_next_priority_index_1388_update_completed_] 
          ;;[R_next_priority_index_1388_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_priority_index_1388_sample_start_ &-> (R_next_priority_index_1388_Sample)
          R_next_priority_index_1388_sample_completed_ <-& (R_next_priority_index_1388_Sample)
          ;;[R_next_priority_index_1388_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_priority_index_1388_update_start_ &-> (R_next_priority_index_1388_Update)
          R_next_priority_index_1388_update_completed_ <-& (R_next_priority_index_1388_Update)
          // RAW reenables for next_priority_index
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_priority_index_1388_sample_start_ <-& (R_next_priority_index_1388_sample_start__ps)
          R_next_priority_index_1388_update_start_ <-& (R_next_priority_index_1388_update_start__ps)
          // Phi complete dependency.
          R_next_priority_index_1388_sample_completed__ps <-& (R_next_priority_index_1388_sample_completed_)
          R_next_priority_index_1388_update_completed__ps <-& (R_next_priority_index_1388_update_completed_)
          $phisequencer [ phi_stmt_1385_phi_seq] : 
          phi_stmt_1385_entry_trigger R_ZERO_2_1387_sample_start__ps R_ZERO_2_1387_sample_completed__ps R_ZERO_2_1387_update_start__ps R_ZERO_2_1387_update_completed__ps phi_stmt_1385_loopback_trigger R_next_priority_index_1388_sample_start__ps R_next_priority_index_1388_sample_completed__ps R_next_priority_index_1388_update_start__ps R_next_priority_index_1388_update_completed__ps :
          phi_stmt_1385_sample_start__ps phi_stmt_1385_sample_completed__ps phi_stmt_1385_update_start__ps phi_stmt_1385_update_completed__ps :
          phi_stmt_1385_entry_sample_req_ps phi_stmt_1385_loopback_sample_req_ps : 
          phi_stmt_1385_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1385
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // start:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 388
          // volatile! 
          // Source expression
          // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
          // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
          // ( $mux read_from_1 0   _b0  ) 
          // read_from_1
          // ( $mux read_from_2 1   _b0  ) 
          // read_from_2
          // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
          // ( $mux read_from_3 2   _b0  ) 
          // read_from_3
          // ( $mux read_from_4 3   _b0  ) 
          // read_from_4
          // Target expression
          // (as target) senderPort
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // end:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          // start: 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          //  file .Aa/switch2x2.opt.aa, line 389
          $T[call_stmt_1416_sample_start_] 
          $T[call_stmt_1416_sample_completed_] 
          $T[call_stmt_1416_update_start_] 
          $T[call_stmt_1416_update_completed_] 
          // Call input argument 0
          // senderPort
          // Call input argument 1
          // Call input argument 2
          // start: Forward dependencies from senderPort to transition call_stmt_1416_sample_start_
          call_stmt_1416_sample_start_ <-& (phi_stmt_1353_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1357_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1362_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1367_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1372_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1377_update_completed_)
          call_stmt_1416_sample_start_ <-& (phi_stmt_1385_update_completed_)
          // done: Forward dependencies from senderPort to transition call_stmt_1416_sample_start_
          // RAW reenables for senderPort
          phi_stmt_1353_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1357_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1362_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1367_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1372_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1377_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          phi_stmt_1385_update_start_ o<-& (call_stmt_1416_sample_completed_ 0)
          ;;[call_stmt_1416_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1416_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1416_sample_start_ &-> (call_stmt_1416_Sample)
          call_stmt_1416_sample_completed_ <-& (call_stmt_1416_Sample)
          call_stmt_1416_sample_completed_ &-> ($null)
          call_stmt_1416_update_start_ &-> (call_stmt_1416_Update)
          call_stmt_1416_update_completed_ <-& (call_stmt_1416_Update)
          // Call output argument 0
          // (as target) continue
          // self-release: 
          call_stmt_1416_sample_start_ o<-& (call_stmt_1416_sample_completed_ 1)
          $null &-> (call_stmt_1416_update_start_)
          call_stmt_1416_update_start_ o<-& (call_stmt_1416_update_completed_ 0)
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end: 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 390
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 391
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 392
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 393
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 395
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // start:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  file .Aa/switch2x2.opt.aa, line 396
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // priority_index
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_priority_index
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // end:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 397
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // start:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 398
          // volatile! 
          // Source expression
          // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
          // started_new_packet
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 15 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 15 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 15 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 15 8 ) 
          // pkt_4_e_word
          // active_packet_length
          // Target expression
          // (as target) next_active_packet_length
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // end:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 399
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (next_active_packet_length - 1 )
          // next_active_packet_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 400
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 401
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 402
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 403
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 404
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 405
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 406
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_2
          $T[WPIPE_out_data_2_1641_sample_start_] 
          $T[WPIPE_out_data_2_1641_sample_completed_] 
          $T[WPIPE_out_data_2_1641_update_start_] 
          $T[WPIPE_out_data_2_1641_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_2_1641 with guard R_send_flag_1640
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1353_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1357_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1362_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1367_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1372_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1377_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1385_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1353_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1357_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1362_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1367_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1372_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1377_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1385_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          ;;[WPIPE_out_data_2_1641_Sample] 
          {
            // pipe write sample-start out_data_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_2_1641_Update] 
          {
            // pipe write update (complete) out_data_2
            $T [req] $T [ack] 
          }
          WPIPE_out_data_2_1641_sample_start_ &-> (WPIPE_out_data_2_1641_Sample)
          WPIPE_out_data_2_1641_sample_completed_ <-& (WPIPE_out_data_2_1641_Sample)
          WPIPE_out_data_2_1641_update_start_ <-& (WPIPE_out_data_2_1641_sample_completed_)
          WPIPE_out_data_2_1641_update_start_ &-> (WPIPE_out_data_2_1641_Update)
          WPIPE_out_data_2_1641_update_completed_ <-& (WPIPE_out_data_2_1641_Update)
          WPIPE_out_data_2_1641_sample_start_ o<-& (WPIPE_out_data_2_1641_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1641_sample_start_
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1353_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1357_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1362_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1367_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1372_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1377_update_completed_)
          WPIPE_out_data_2_1641_sample_start_ <-& (phi_stmt_1385_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1641_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1353_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1357_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1362_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1367_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1372_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1377_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          phi_stmt_1385_update_start_ o<-& (WPIPE_out_data_2_1641_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_stmt_1416 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe out_data_2
          // read-dependencies for pipe out_data_2
          // write-dependencies for pipe out_data_2
          // signal write dependencies for out_data_2
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1351__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1351_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1351__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1351_loop_body : condition_evaluated
        $bind do_while_stmt_1351__entry__  => do_while_stmt_1351_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1351_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1351__exit__)
      }
      do_while_stmt_1351__entry__ |-> (do_while_stmt_1351)
      do_while_stmt_1351__exit__ <-| (do_while_stmt_1351)
      do_while_stmt_1351__entry__ <-| (branch_block_stmt_1350__entry__)
      do_while_stmt_1351__exit__ |-> (branch_block_stmt_1350__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 370
    // constant-object-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 366
    // constant-object-declarations for block %outputPort_2_Daemon
    //  file .Aa/switch2x2.opt.aa, line 361
    // constant-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 366
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 368
    // 1 
    $constant $W[konst_1654_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 370
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 371
    // ZERO_8
    $constant $W[R_ZERO_8_1355_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 373
    // ZERO_33
    $constant $W[R_ZERO_33_1359_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 375
    // ZERO_33
    $constant $W[R_ZERO_33_1364_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 377
    // ZERO_33
    $constant $W[R_ZERO_33_1369_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 379
    // ZERO_33
    $constant $W[R_ZERO_33_1374_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 381
    // ZERO_3
    $constant $W[R_ZERO_3_1379_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 383
    // ZERO_8
    $constant $W[R_ZERO_8_1383_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 385
    // ZERO_2
    $constant $W[R_ZERO_2_1387_wire_constant] : $int<2> := _b00// 0
    // ( $mux read_from_1 0   _b0  ) 
    // 0 
    $constant $W[konst_1392_wire_constant] : $int<8> := _b00000000// 0
    // _b0 
    $constant $W[konst_1393_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_2 1   _b0  ) 
    // 1 
    $constant $W[konst_1396_wire_constant] : $int<8> := _b00000001// 1
    // _b0 
    $constant $W[konst_1397_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_3 2   _b0  ) 
    // 2 
    $constant $W[konst_1401_wire_constant] : $int<8> := _b00000010// 2
    // _b0 
    $constant $W[konst_1402_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_4 3   _b0  ) 
    // 3 
    $constant $W[konst_1405_wire_constant] : $int<8> := _b00000011// 3
    // _b0 
    $constant $W[konst_1406_wire_constant] : $int<8> := _b00000000// 0
    // 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 389
    // 1 
    $constant $W[konst_1412_wire_constant] : $int<8> := _b00000001// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1414_wire_constant] : $int<1> := _b0// 0
    // 32 
    $constant $W[konst_1419_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1424_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1429_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1434_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1451_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1454_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1457_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1460_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1464_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1467_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1470_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1473_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 396
    // 0 
    $constant $W[konst_1490_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1493_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1500_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1504_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1507_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1511_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1515_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1519_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1522_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1526_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1536_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1540_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1550_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1558_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1566_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1574_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1580_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1584_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1587_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1591_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1595_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1599_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1602_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1606_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1613_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1616_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1619_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1622_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1626_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1629_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1632_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1635_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 366
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 368
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 370
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 371
    $W[next_down_counter_1545_1356_buffered] : $int<8>
    // down_counter
    $W[down_counter_1353] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 373
    // noblock_obuf_1_2
    $W[RPIPE_noblock_obuf_1_2_1361_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1357] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 375
    // noblock_obuf_2_2
    $W[RPIPE_noblock_obuf_2_2_1366_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1362] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 377
    // noblock_obuf_3_2
    $W[RPIPE_noblock_obuf_3_2_1371_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1367] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 379
    // noblock_obuf_4_2
    $W[RPIPE_noblock_obuf_4_2_1376_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1372] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 381
    $W[next_active_packet_1487_1380_buffered] : $int<3>
    // active_packet
    $W[active_packet_1377] : $int<3>
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 383
    $W[next_active_packet_length_1532_1384_buffered] : $int<8>
    // active_packet_length
    $W[active_packet_length_1381] : $int<8>
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 385
    $W[next_priority_index_1487_1388_buffered] : $int<2>
    // priority_index
    $W[priority_index_1385] : $int<2>
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 388
    // ( $mux read_from_1 0   _b0  ) 
    $intermediate $W[MUX_1394_wire] : $int<8>
    // ( $mux read_from_2 1   _b0  ) 
    $intermediate $W[MUX_1398_wire] : $int<8>
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    $intermediate $W[OR_u8_u8_1399_wire] : $int<8>
    // ( $mux read_from_3 2   _b0  ) 
    $intermediate $W[MUX_1403_wire] : $int<8>
    // ( $mux read_from_4 3   _b0  ) 
    $intermediate $W[MUX_1407_wire] : $int<8>
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    $intermediate $W[OR_u8_u8_1408_wire] : $int<8>
    // senderPort
    $W[senderPort_1410] : $int<8>
    // 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 389
    // continue
    $W[continue_1416] : $int<1>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 390
    // p1_valid
    $W[p1_valid_1421] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 391
    // p2_valid
    $W[p2_valid_1426] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 392
    // p3_valid
    $W[p3_valid_1431] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 393
    // p4_valid
    $W[p4_valid_1436] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 395
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1452_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1455_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1458_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1461_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1462_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1465_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1468_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1471_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1474_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1475_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1477] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 396
    // next_active_packet
    $W[next_active_packet_1487] : $int<3>
    // next_priority_index
    $W[next_priority_index_1487] : $int<2>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 397
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1491_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1494_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1496] : $int<1>
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 398
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1501_wire] : $int<1>
    // ( $slice pkt_1_e_word 15 8 ) 
    $intermediate $W[slice_1503_wire] : $int<8>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1505_wire] : $int<8>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1508_wire] : $int<1>
    // ( $slice pkt_2_e_word 15 8 ) 
    $intermediate $W[slice_1510_wire] : $int<8>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1512_wire] : $int<8>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1513_wire] : $int<8>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1516_wire] : $int<1>
    // ( $slice pkt_3_e_word 15 8 ) 
    $intermediate $W[slice_1518_wire] : $int<8>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1520_wire] : $int<8>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1523_wire] : $int<1>
    // ( $slice pkt_4_e_word 15 8 ) 
    $intermediate $W[slice_1525_wire] : $int<8>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1527_wire] : $int<8>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1528_wire] : $int<8>
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    $intermediate $W[OR_u8_u8_1529_wire] : $int<8>
    // next_active_packet_length
    $W[next_active_packet_length_1532] : $int<8>
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 399
    // (next_active_packet_length - 1 )
    $intermediate $W[SUB_u8_u8_1537_wire] : $int<8>
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1541_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1543_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1545] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 400
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1548_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1551_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1553] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 401
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1556_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1559_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1561] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 402
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1564_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1567_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1569] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 403
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1572_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1575_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1577] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 404
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1581_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1583_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1585_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1588_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1590_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1592_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1593_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1596_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1598_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1600_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1603_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1605_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1607_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1608_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1610] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 405
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1614_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1617_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1620_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1623_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1624_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1627_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1630_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1633_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1636_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1637_wire] : $int<1>
    // send_flag
    $W[send_flag_1639] : $int<1>
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 406
    // out_data_2
    // datapath-instances for block %outputPort_2_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 366
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 368
    ==0? [do_while_stmt_1351_branch] (konst_1654_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 370
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 371
    # := [next_down_counter_1545_1356_buf] (next_down_counter_1545) (next_down_counter_1545_1356_buffered)   $in_phi    $fullrate
    $buffering $out next_down_counter_1545_1356_buf next_down_counter_1545_1356_buffered  1
    # $phi [phi_stmt_1353] (R_ZERO_8_1355_wire_constant next_down_counter_1545_1356_buffered) ( down_counter_1353 ) $fullrate
    // $buffering  $out phi_stmt_1353 down_counter_1353 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 373
    // noblock_obuf_1_2
    $ioport $in [RPIPE_noblock_obuf_1_2_1361_inst] (noblock_obuf_1_2) (RPIPE_noblock_obuf_1_2_1361_wire) $guard ( read_from_1_1553 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_2_1361_inst RPIPE_noblock_obuf_1_2_1361_wire 1
    # $phi [phi_stmt_1357] (R_ZERO_33_1359_wire_constant RPIPE_noblock_obuf_1_2_1361_wire) ( pkt_1_e_word_1357 ) $fullrate
    // $buffering  $out phi_stmt_1357 pkt_1_e_word_1357 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 375
    // noblock_obuf_2_2
    $ioport $in [RPIPE_noblock_obuf_2_2_1366_inst] (noblock_obuf_2_2) (RPIPE_noblock_obuf_2_2_1366_wire) $guard ( read_from_2_1561 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_2_1366_inst RPIPE_noblock_obuf_2_2_1366_wire 1
    # $phi [phi_stmt_1362] (R_ZERO_33_1364_wire_constant RPIPE_noblock_obuf_2_2_1366_wire) ( pkt_2_e_word_1362 ) $fullrate
    // $buffering  $out phi_stmt_1362 pkt_2_e_word_1362 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 377
    // noblock_obuf_3_2
    $ioport $in [RPIPE_noblock_obuf_3_2_1371_inst] (noblock_obuf_3_2) (RPIPE_noblock_obuf_3_2_1371_wire) $guard ( read_from_3_1569 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_2_1371_inst RPIPE_noblock_obuf_3_2_1371_wire 1
    # $phi [phi_stmt_1367] (R_ZERO_33_1369_wire_constant RPIPE_noblock_obuf_3_2_1371_wire) ( pkt_3_e_word_1367 ) $fullrate
    // $buffering  $out phi_stmt_1367 pkt_3_e_word_1367 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 379
    // noblock_obuf_4_2
    $ioport $in [RPIPE_noblock_obuf_4_2_1376_inst] (noblock_obuf_4_2) (RPIPE_noblock_obuf_4_2_1376_wire) $guard ( read_from_4_1577 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_2_1376_inst RPIPE_noblock_obuf_4_2_1376_wire 1
    # $phi [phi_stmt_1372] (R_ZERO_33_1374_wire_constant RPIPE_noblock_obuf_4_2_1376_wire) ( pkt_4_e_word_1372 ) $fullrate
    // $buffering  $out phi_stmt_1372 pkt_4_e_word_1372 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 381
    # := [next_active_packet_1487_1380_buf] (next_active_packet_1487) (next_active_packet_1487_1380_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_1487_1380_buf next_active_packet_1487_1380_buffered  1
    # $phi [phi_stmt_1377] (R_ZERO_3_1379_wire_constant next_active_packet_1487_1380_buffered) ( active_packet_1377 ) $fullrate
    // $buffering  $out phi_stmt_1377 active_packet_1377 2
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 383
    # := [next_active_packet_length_1532_1384_buf] (next_active_packet_length_1532) (next_active_packet_length_1532_1384_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_length_1532_1384_buf next_active_packet_length_1532_1384_buffered  1
    # $phi [phi_stmt_1381] (R_ZERO_8_1383_wire_constant next_active_packet_length_1532_1384_buffered) ( active_packet_length_1381 ) $fullrate
    // $buffering  $out phi_stmt_1381 active_packet_length_1381 2
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 385
    # := [next_priority_index_1487_1388_buf] (next_priority_index_1487) (next_priority_index_1487_1388_buffered)   $in_phi    $fullrate
    $buffering $out next_priority_index_1487_1388_buf next_priority_index_1487_1388_buffered  1
    # $phi [phi_stmt_1385] (R_ZERO_2_1387_wire_constant next_priority_index_1487_1388_buffered) ( priority_index_1385 ) $fullrate
    // $buffering  $out phi_stmt_1385 priority_index_1385 2
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 388
    // ( $mux read_from_1 0   _b0  ) 
    ? [MUX_1394_inst] (read_from_1_1553 konst_1392_wire_constant konst_1393_wire_constant) (MUX_1394_wire)  $flowthrough
    // ( $mux read_from_2 1   _b0  ) 
    ? [MUX_1398_inst] (read_from_2_1561 konst_1396_wire_constant konst_1397_wire_constant) (MUX_1398_wire)  $flowthrough
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    |[OR_u8_u8_1399_inst] (MUX_1394_wire MUX_1398_wire) (OR_u8_u8_1399_wire)   $flowthrough 
    $delay OR_u8_u8_1399_inst 0
    // ( $mux read_from_3 2   _b0  ) 
    ? [MUX_1403_inst] (read_from_3_1569 konst_1401_wire_constant konst_1402_wire_constant) (MUX_1403_wire)  $flowthrough
    // ( $mux read_from_4 3   _b0  ) 
    ? [MUX_1407_inst] (read_from_4_1577 konst_1405_wire_constant konst_1406_wire_constant) (MUX_1407_wire)  $flowthrough
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    |[OR_u8_u8_1408_inst] (MUX_1403_wire MUX_1407_wire) (OR_u8_u8_1408_wire)   $flowthrough 
    $delay OR_u8_u8_1408_inst 0
    // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
    |[OR_u8_u8_1409_inst] (OR_u8_u8_1399_wire OR_u8_u8_1408_wire) (senderPort_1410)   $flowthrough 
    $delay OR_u8_u8_1409_inst 0
    // 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 389
    $call [call_stmt_1416_call] $module updateCounter(senderPort_1410 konst_1412_wire_constant type_cast_1414_wire_constant) (continue_1416)   $fullrate
    $delay call_stmt_1416_call 4
    $buffering  $in call_stmt_1416_call senderPort_1410 1
    $buffering  $in call_stmt_1416_call konst_1412_wire_constant 1
    $buffering  $in call_stmt_1416_call type_cast_1414_wire_constant 1
    $buffering  $out call_stmt_1416_call continue_1416 1
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 390
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1420_inst] (pkt_1_e_word_1357 konst_1419_wire_constant) (p1_valid_1421)   $flowthrough 
    $delay BITSEL_u33_u1_1420_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 391
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1425_inst] (pkt_2_e_word_1362 konst_1424_wire_constant) (p2_valid_1426)   $flowthrough 
    $delay BITSEL_u33_u1_1425_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 392
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1430_inst] (pkt_3_e_word_1367 konst_1429_wire_constant) (p3_valid_1431)   $flowthrough 
    $delay BITSEL_u33_u1_1430_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 393
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1435_inst] (pkt_4_e_word_1372 konst_1434_wire_constant) (p4_valid_1436)   $flowthrough 
    $delay BITSEL_u33_u1_1435_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 395
    // (active_packet == 1 )
    ==[EQ_u3_u1_1452_inst] (active_packet_1377 konst_1451_wire_constant) (EQ_u3_u1_1452_wire)   $flowthrough 
    $delay EQ_u3_u1_1452_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1455_inst] (EQ_u3_u1_1452_wire p1_valid_1421 konst_1454_wire_constant) (MUX_1455_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1458_inst] (active_packet_1377 konst_1457_wire_constant) (EQ_u3_u1_1458_wire)   $flowthrough 
    $delay EQ_u3_u1_1458_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1461_inst] (EQ_u3_u1_1458_wire p2_valid_1426 konst_1460_wire_constant) (MUX_1461_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1462_inst] (MUX_1455_wire MUX_1461_wire) (OR_u1_u1_1462_wire)   $flowthrough 
    $delay OR_u1_u1_1462_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1465_inst] (active_packet_1377 konst_1464_wire_constant) (EQ_u3_u1_1465_wire)   $flowthrough 
    $delay EQ_u3_u1_1465_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1468_inst] (EQ_u3_u1_1465_wire p3_valid_1431 konst_1467_wire_constant) (MUX_1468_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1471_inst] (active_packet_1377 konst_1470_wire_constant) (EQ_u3_u1_1471_wire)   $flowthrough 
    $delay EQ_u3_u1_1471_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1474_inst] (EQ_u3_u1_1471_wire p4_valid_1436 konst_1473_wire_constant) (MUX_1474_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1475_inst] (MUX_1468_wire MUX_1474_wire) (OR_u1_u1_1475_wire)   $flowthrough 
    $delay OR_u1_u1_1475_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1476_inst] (OR_u1_u1_1462_wire OR_u1_u1_1475_wire) (valid_active_pkt_word_read_1477)   $flowthrough 
    $delay OR_u1_u1_1476_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 396
    $call [call_stmt_1487_call] $module prioritySelect(down_counter_1353 active_packet_1377 priority_index_1385 p1_valid_1421 p2_valid_1426 p3_valid_1431 p4_valid_1436) (next_active_packet_1487 next_priority_index_1487)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 397
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1491_inst] (next_active_packet_1487 konst_1490_wire_constant) (NEQ_u3_u1_1491_wire)   $flowthrough 
    $delay NEQ_u3_u1_1491_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1494_inst] (down_counter_1353 konst_1493_wire_constant) (EQ_u8_u1_1494_wire)   $flowthrough 
    $delay EQ_u8_u1_1494_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1495_inst] (NEQ_u3_u1_1491_wire EQ_u8_u1_1494_wire) (started_new_packet_1496)   $flowthrough 
    $delay AND_u1_u1_1495_inst 0
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 398
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1501_inst] (next_active_packet_1487 konst_1500_wire_constant) (EQ_u3_u1_1501_wire)   $flowthrough 
    $delay EQ_u3_u1_1501_inst 0
    // ( $slice pkt_1_e_word 15 8 ) 
    [:] [slice_1503_inst] (pkt_1_e_word_1357 15 8) (slice_1503_wire)  $flowthrough
    $delay slice_1503_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    ? [MUX_1505_inst] (EQ_u3_u1_1501_wire slice_1503_wire konst_1504_wire_constant) (MUX_1505_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1508_inst] (next_active_packet_1487 konst_1507_wire_constant) (EQ_u3_u1_1508_wire)   $flowthrough 
    $delay EQ_u3_u1_1508_inst 0
    // ( $slice pkt_2_e_word 15 8 ) 
    [:] [slice_1510_inst] (pkt_2_e_word_1362 15 8) (slice_1510_wire)  $flowthrough
    $delay slice_1510_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    ? [MUX_1512_inst] (EQ_u3_u1_1508_wire slice_1510_wire konst_1511_wire_constant) (MUX_1512_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1513_inst] (MUX_1505_wire MUX_1512_wire) (OR_u8_u8_1513_wire)   $flowthrough 
    $delay OR_u8_u8_1513_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1516_inst] (next_active_packet_1487 konst_1515_wire_constant) (EQ_u3_u1_1516_wire)   $flowthrough 
    $delay EQ_u3_u1_1516_inst 0
    // ( $slice pkt_3_e_word 15 8 ) 
    [:] [slice_1518_inst] (pkt_3_e_word_1367 15 8) (slice_1518_wire)  $flowthrough
    $delay slice_1518_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    ? [MUX_1520_inst] (EQ_u3_u1_1516_wire slice_1518_wire konst_1519_wire_constant) (MUX_1520_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1523_inst] (next_active_packet_1487 konst_1522_wire_constant) (EQ_u3_u1_1523_wire)   $flowthrough 
    $delay EQ_u3_u1_1523_inst 0
    // ( $slice pkt_4_e_word 15 8 ) 
    [:] [slice_1525_inst] (pkt_4_e_word_1372 15 8) (slice_1525_wire)  $flowthrough
    $delay slice_1525_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    ? [MUX_1527_inst] (EQ_u3_u1_1523_wire slice_1525_wire konst_1526_wire_constant) (MUX_1527_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1528_inst] (MUX_1520_wire MUX_1527_wire) (OR_u8_u8_1528_wire)   $flowthrough 
    $delay OR_u8_u8_1528_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    |[OR_u8_u8_1529_inst] (OR_u8_u8_1513_wire OR_u8_u8_1528_wire) (OR_u8_u8_1529_wire)   $flowthrough 
    $delay OR_u8_u8_1529_inst 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    ? [MUX_1531_inst] (started_new_packet_1496 OR_u8_u8_1529_wire active_packet_length_1381) (next_active_packet_length_1532)  $flowthrough
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 399
    // (next_active_packet_length - 1 )
    -[SUB_u8_u8_1537_inst] (next_active_packet_length_1532 konst_1536_wire_constant) (SUB_u8_u8_1537_wire)   $flowthrough 
    $delay SUB_u8_u8_1537_inst 0
    // (down_counter - 1 )
    -[SUB_u8_u8_1541_inst] (down_counter_1353 konst_1540_wire_constant) (SUB_u8_u8_1541_wire)   $flowthrough 
    $delay SUB_u8_u8_1541_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1543_inst] (valid_active_pkt_word_read_1477 SUB_u8_u8_1541_wire down_counter_1353) (MUX_1543_wire)  $flowthrough
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1544_inst] (started_new_packet_1496 SUB_u8_u8_1537_wire MUX_1543_wire) (next_down_counter_1545)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 400
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1548_inst] (p1_valid_1421) (NOT_u1_u1_1548_wire)   $flowthrough
    $delay NOT_u1_u1_1548_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1551_inst] (next_active_packet_1487 konst_1550_wire_constant) (EQ_u3_u1_1551_wire)   $flowthrough 
    $delay EQ_u3_u1_1551_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1552_inst] (NOT_u1_u1_1548_wire EQ_u3_u1_1551_wire) (read_from_1_1553)   $flowthrough 
    $delay OR_u1_u1_1552_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 401
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1556_inst] (p2_valid_1426) (NOT_u1_u1_1556_wire)   $flowthrough
    $delay NOT_u1_u1_1556_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1559_inst] (next_active_packet_1487 konst_1558_wire_constant) (EQ_u3_u1_1559_wire)   $flowthrough 
    $delay EQ_u3_u1_1559_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1560_inst] (NOT_u1_u1_1556_wire EQ_u3_u1_1559_wire) (read_from_2_1561)   $flowthrough 
    $delay OR_u1_u1_1560_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 402
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1564_inst] (p3_valid_1431) (NOT_u1_u1_1564_wire)   $flowthrough
    $delay NOT_u1_u1_1564_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1567_inst] (next_active_packet_1487 konst_1566_wire_constant) (EQ_u3_u1_1567_wire)   $flowthrough 
    $delay EQ_u3_u1_1567_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1568_inst] (NOT_u1_u1_1564_wire EQ_u3_u1_1567_wire) (read_from_3_1569)   $flowthrough 
    $delay OR_u1_u1_1568_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 403
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1572_inst] (p4_valid_1436) (NOT_u1_u1_1572_wire)   $flowthrough
    $delay NOT_u1_u1_1572_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1575_inst] (next_active_packet_1487 konst_1574_wire_constant) (EQ_u3_u1_1575_wire)   $flowthrough 
    $delay EQ_u3_u1_1575_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1576_inst] (NOT_u1_u1_1572_wire EQ_u3_u1_1575_wire) (read_from_4_1577)   $flowthrough 
    $delay OR_u1_u1_1576_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 404
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1581_inst] (next_active_packet_1487 konst_1580_wire_constant) (EQ_u3_u1_1581_wire)   $flowthrough 
    $delay EQ_u3_u1_1581_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1583_inst] (pkt_1_e_word_1357 31 0) (slice_1583_wire)  $flowthrough
    $delay slice_1583_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1585_inst] (EQ_u3_u1_1581_wire slice_1583_wire konst_1584_wire_constant) (MUX_1585_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1588_inst] (next_active_packet_1487 konst_1587_wire_constant) (EQ_u3_u1_1588_wire)   $flowthrough 
    $delay EQ_u3_u1_1588_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1590_inst] (pkt_2_e_word_1362 31 0) (slice_1590_wire)  $flowthrough
    $delay slice_1590_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1592_inst] (EQ_u3_u1_1588_wire slice_1590_wire konst_1591_wire_constant) (MUX_1592_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1593_inst] (MUX_1585_wire MUX_1592_wire) (OR_u32_u32_1593_wire)   $flowthrough 
    $delay OR_u32_u32_1593_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1596_inst] (next_active_packet_1487 konst_1595_wire_constant) (EQ_u3_u1_1596_wire)   $flowthrough 
    $delay EQ_u3_u1_1596_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1598_inst] (pkt_3_e_word_1367 31 0) (slice_1598_wire)  $flowthrough
    $delay slice_1598_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1600_inst] (EQ_u3_u1_1596_wire slice_1598_wire konst_1599_wire_constant) (MUX_1600_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1603_inst] (next_active_packet_1487 konst_1602_wire_constant) (EQ_u3_u1_1603_wire)   $flowthrough 
    $delay EQ_u3_u1_1603_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1605_inst] (pkt_4_e_word_1372 31 0) (slice_1605_wire)  $flowthrough
    $delay slice_1605_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1607_inst] (EQ_u3_u1_1603_wire slice_1605_wire konst_1606_wire_constant) (MUX_1607_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1608_inst] (MUX_1600_wire MUX_1607_wire) (OR_u32_u32_1608_wire)   $flowthrough 
    $delay OR_u32_u32_1608_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1609_inst] (OR_u32_u32_1593_wire OR_u32_u32_1608_wire) (data_to_out_1610)   $flowthrough 
    $delay OR_u32_u32_1609_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 405
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1614_inst] (next_active_packet_1487 konst_1613_wire_constant) (EQ_u3_u1_1614_wire)   $flowthrough 
    $delay EQ_u3_u1_1614_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1617_inst] (EQ_u3_u1_1614_wire p1_valid_1421 konst_1616_wire_constant) (MUX_1617_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1620_inst] (next_active_packet_1487 konst_1619_wire_constant) (EQ_u3_u1_1620_wire)   $flowthrough 
    $delay EQ_u3_u1_1620_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1623_inst] (EQ_u3_u1_1620_wire p2_valid_1426 konst_1622_wire_constant) (MUX_1623_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1624_inst] (MUX_1617_wire MUX_1623_wire) (OR_u1_u1_1624_wire)   $flowthrough 
    $delay OR_u1_u1_1624_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1627_inst] (next_active_packet_1487 konst_1626_wire_constant) (EQ_u3_u1_1627_wire)   $flowthrough 
    $delay EQ_u3_u1_1627_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1630_inst] (EQ_u3_u1_1627_wire p3_valid_1431 konst_1629_wire_constant) (MUX_1630_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1633_inst] (next_active_packet_1487 konst_1632_wire_constant) (EQ_u3_u1_1633_wire)   $flowthrough 
    $delay EQ_u3_u1_1633_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1636_inst] (EQ_u3_u1_1633_wire p4_valid_1436 konst_1635_wire_constant) (MUX_1636_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1637_inst] (MUX_1630_wire MUX_1636_wire) (OR_u1_u1_1637_wire)   $flowthrough 
    $delay OR_u1_u1_1637_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1638_inst] (OR_u1_u1_1624_wire OR_u1_u1_1637_wire) (send_flag_1639)   $flowthrough 
    $delay OR_u1_u1_1638_inst 0
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 406
    // out_data_2
    $ioport $out [WPIPE_out_data_2_1641_inst]  (data_to_out_1610) (out_data_2) $guard ( send_flag_1639 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1351
  //  file .Aa/switch2x2.opt.aa, line 368
  phi_stmt_1353 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1353_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1353_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1353_phi_mux_ack)
  next_down_counter_1545_1356_buf <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_down_counter_1356_Sample/req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_down_counter_1356_Update/req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_down_counter_1356_Sample/ack branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_down_counter_1356_Update/ack)
  phi_stmt_1357 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1357_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1357_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1357_phi_mux_ack)
  // noblock_obuf_1_2
  RPIPE_noblock_obuf_1_2_1361_inst <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_1_2_1361_Sample/rr branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_1_2_1361_Update/cr) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_1_2_1361_Sample/ra branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_1_2_1361_Update/ca)
  phi_stmt_1362 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1362_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1362_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1362_phi_mux_ack)
  // noblock_obuf_2_2
  RPIPE_noblock_obuf_2_2_1366_inst <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_2_2_1366_Sample/rr branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_2_2_1366_Update/cr) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_2_2_1366_Sample/ra branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_2_2_1366_Update/ca)
  phi_stmt_1367 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1367_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1367_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1367_phi_mux_ack)
  // noblock_obuf_3_2
  RPIPE_noblock_obuf_3_2_1371_inst <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_3_2_1371_Sample/rr branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_3_2_1371_Update/cr) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_3_2_1371_Sample/ra branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_3_2_1371_Update/ca)
  phi_stmt_1372 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1372_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1372_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1372_phi_mux_ack)
  // noblock_obuf_4_2
  RPIPE_noblock_obuf_4_2_1376_inst <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_4_2_1376_Sample/rr branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_4_2_1376_Update/cr) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_4_2_1376_Sample/ra branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/RPIPE_noblock_obuf_4_2_1376_Update/ca)
  phi_stmt_1377 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1377_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1377_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1377_phi_mux_ack)
  next_active_packet_1487_1380_buf <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_1380_Sample/req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_1380_Update/req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_1380_Sample/ack branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_1380_Update/ack)
  phi_stmt_1381 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1381_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1381_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1381_phi_mux_ack)
  next_active_packet_length_1532_1384_buf <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_length_1384_Sample/req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_length_1384_Update/req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_length_1384_Sample/ack branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_active_packet_length_1384_Update/ack)
  phi_stmt_1385 <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1385_entry_sample_req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1385_loopback_sample_req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/phi_stmt_1385_phi_mux_ack)
  next_priority_index_1487_1388_buf <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_priority_index_1388_Sample/req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_priority_index_1388_Update/req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_priority_index_1388_Sample/ack branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/R_next_priority_index_1388_Update/ack)
  // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 388
  // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
  // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
  // read_from_1
  // ( $mux read_from_1 0   _b0  ) 
  // read_from_2
  // ( $mux read_from_2 1   _b0  ) 
  // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
  // read_from_3
  // ( $mux read_from_3 2   _b0  ) 
  // read_from_4
  // ( $mux read_from_4 3   _b0  ) 
  // 			$call updateCounter (senderPort 1  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
  //  file .Aa/switch2x2.opt.aa, line 389
  // senderPort
  call_stmt_1416_call <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/call_stmt_1416_Sample/crr branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/call_stmt_1416_Update/ccr) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/call_stmt_1416_Sample/cra branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/call_stmt_1416_Update/cca)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 390
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 391
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 392
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 393
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 395
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
  //  file .Aa/switch2x2.opt.aa, line 396
  // down_counter
  // active_packet
  // priority_index
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 397
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 398
  // started_new_packet
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
  // active_packet_length
  // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
  // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 399
  // started_new_packet
  // (next_active_packet_length - 1 )
  // next_active_packet_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 400
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 401
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 402
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 403
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 404
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 405
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 406
  // data_to_out
  // out_data_2
  WPIPE_out_data_2_1641_inst <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/WPIPE_out_data_2_1641_Sample/req branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/WPIPE_out_data_2_1641_Update/req) (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/WPIPE_out_data_2_1641_Sample/ack branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/WPIPE_out_data_2_1641_Update/ack)
  do_while_stmt_1351_branch <=> (branch_block_stmt_1350/do_while_stmt_1351/do_while_stmt_1351_loop_body/condition_evaluated) (branch_block_stmt_1350/do_while_stmt_1351/loop_exit/ack branch_block_stmt_1350/do_while_stmt_1351/loop_taken/ack)
}
$module [outputPort_3_Daemon] 
{
  // pipe-declarations for block %outputPort_3_Daemon
  //  file .Aa/switch2x2.opt.aa, line 411
  // pipe-declarations for block %outputPort_3_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 416
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1658] // Branch Block  file .Aa/switch2x2.opt.aa, line 416
    {
      $P [branch_block_stmt_1658__entry__]
      branch_block_stmt_1658__entry__ <-| ($entry)
      $P [branch_block_stmt_1658__exit__]
      branch_block_stmt_1658__exit__ |-> ($exit)
      $P [do_while_stmt_1659__entry__] 
      $P [do_while_stmt_1659__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 418
      <o> [do_while_stmt_1659]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1659__entry__] 
        $P[do_while_stmt_1659__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1659_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_1661
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1661_sample_start_] 
          $T[phi_stmt_1661_sample_completed_] 
          $T[phi_stmt_1661_update_start_] 
          $T[phi_stmt_1661_update_completed_] 
          $T[phi_stmt_1661_sample_start__ps] 
          phi_stmt_1661_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1661_sample_completed__ps] 
          phi_stmt_1661_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1661_update_start__ps] 
          phi_stmt_1661_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1661_update_completed__ps] 
          phi_stmt_1661_update_completed_ <-& (phi_stmt_1661_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1661_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1661_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1661_update_start_)
          $T[phi_stmt_1661_loopback_trigger] 
          phi_stmt_1661_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1661_loopback_sample_req] 
          $T[phi_stmt_1661_loopback_sample_req_ps] 
          phi_stmt_1661_loopback_sample_req <-& (phi_stmt_1661_loopback_sample_req_ps)
          phi_stmt_1661_loopback_sample_req &-> ($null)
          $T[phi_stmt_1661_entry_trigger] 
          phi_stmt_1661_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1661_entry_sample_req] 
          $T[phi_stmt_1661_entry_sample_req_ps] 
          phi_stmt_1661_entry_sample_req <-& (phi_stmt_1661_entry_sample_req_ps)
          phi_stmt_1661_entry_sample_req &-> ($null)
          phi_stmt_1661_update_start_ o<-& (phi_stmt_1661_update_completed_ 0)
          phi_stmt_1661_sample_start_ o<-& (phi_stmt_1661_sample_completed_ 1)
          $T[phi_stmt_1661_merged_reqs] 
          $T[phi_stmt_1661_phi_mux_ack] 
          $T[phi_stmt_1661_phi_mux_ack_ps] 
          phi_stmt_1661_phi_mux_ack_ps <-& (phi_stmt_1661_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1661_update_completed_)
          $T[R_ZERO_8_1663_sample_start__ps] 
          $T[R_ZERO_8_1663_sample_completed__ps] 
          $T[R_ZERO_8_1663_update_start__ps] 
          $T[R_ZERO_8_1663_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1663_sample_start_] 
          $T[R_ZERO_8_1663_sample_completed_] 
          R_ZERO_8_1663_sample_completed_ <-& (R_ZERO_8_1663_sample_start_)
          $T[R_ZERO_8_1663_update_start_] 
          $T [R_ZERO_8_1663_update_completed_] $delay 
          R_ZERO_8_1663_update_completed_ <-& (R_ZERO_8_1663_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1663_sample_start_ <-& (R_ZERO_8_1663_sample_start__ps)
          R_ZERO_8_1663_update_start_ <-& (R_ZERO_8_1663_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1663_sample_completed__ps <-& (R_ZERO_8_1663_sample_completed_)
          R_ZERO_8_1663_update_completed__ps <-& (R_ZERO_8_1663_update_completed_)
          $T[R_next_down_counter_1664_sample_start__ps] 
          $T[R_next_down_counter_1664_sample_completed__ps] 
          $T[R_next_down_counter_1664_update_start__ps] 
          $T[R_next_down_counter_1664_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1664_sample_start_] 
          $T[R_next_down_counter_1664_sample_completed_] 
          $T[R_next_down_counter_1664_update_start_] 
          $T[R_next_down_counter_1664_update_completed_] 
          ;;[R_next_down_counter_1664_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1664_sample_start_ &-> (R_next_down_counter_1664_Sample)
          R_next_down_counter_1664_sample_completed_ <-& (R_next_down_counter_1664_Sample)
          ;;[R_next_down_counter_1664_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1664_update_start_ &-> (R_next_down_counter_1664_Update)
          R_next_down_counter_1664_update_completed_ <-& (R_next_down_counter_1664_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1664_sample_start_ <-& (R_next_down_counter_1664_sample_start__ps)
          R_next_down_counter_1664_update_start_ <-& (R_next_down_counter_1664_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1664_sample_completed__ps <-& (R_next_down_counter_1664_sample_completed_)
          R_next_down_counter_1664_update_completed__ps <-& (R_next_down_counter_1664_update_completed_)
          $phisequencer [ phi_stmt_1661_phi_seq] : 
          phi_stmt_1661_entry_trigger R_ZERO_8_1663_sample_start__ps R_ZERO_8_1663_sample_completed__ps R_ZERO_8_1663_update_start__ps R_ZERO_8_1663_update_completed__ps phi_stmt_1661_loopback_trigger R_next_down_counter_1664_sample_start__ps R_next_down_counter_1664_sample_completed__ps R_next_down_counter_1664_update_start__ps R_next_down_counter_1664_update_completed__ps :
          phi_stmt_1661_sample_start__ps phi_stmt_1661_sample_completed__ps phi_stmt_1661_update_start__ps phi_stmt_1661_update_completed__ps :
          phi_stmt_1661_entry_sample_req_ps phi_stmt_1661_loopback_sample_req_ps : 
          phi_stmt_1661_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1661
          // start:  multi-source PHI statement phi_stmt_1665
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1665_sample_start_] 
          $T[phi_stmt_1665_sample_completed_] 
          $T[phi_stmt_1665_update_start_] 
          $T[phi_stmt_1665_update_completed_] 
          $T[phi_stmt_1665_sample_start__ps] 
          phi_stmt_1665_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1665_sample_completed__ps] 
          phi_stmt_1665_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1665_update_start__ps] 
          phi_stmt_1665_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1665_update_completed__ps] 
          phi_stmt_1665_update_completed_ <-& (phi_stmt_1665_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1665_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1665_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1665_update_start_)
          $T[phi_stmt_1665_loopback_trigger] 
          phi_stmt_1665_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1665_loopback_sample_req] 
          $T[phi_stmt_1665_loopback_sample_req_ps] 
          phi_stmt_1665_loopback_sample_req <-& (phi_stmt_1665_loopback_sample_req_ps)
          phi_stmt_1665_loopback_sample_req &-> ($null)
          $T[phi_stmt_1665_entry_trigger] 
          phi_stmt_1665_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1665_entry_sample_req] 
          $T[phi_stmt_1665_entry_sample_req_ps] 
          phi_stmt_1665_entry_sample_req <-& (phi_stmt_1665_entry_sample_req_ps)
          phi_stmt_1665_entry_sample_req &-> ($null)
          phi_stmt_1665_update_start_ o<-& (phi_stmt_1665_update_completed_ 0)
          phi_stmt_1665_sample_start_ o<-& (phi_stmt_1665_sample_completed_ 1)
          $T[phi_stmt_1665_merged_reqs] 
          $T[phi_stmt_1665_phi_mux_ack] 
          $T[phi_stmt_1665_phi_mux_ack_ps] 
          phi_stmt_1665_phi_mux_ack_ps <-& (phi_stmt_1665_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1665_update_completed_)
          $T[R_ZERO_33_1667_sample_start__ps] 
          $T[R_ZERO_33_1667_sample_completed__ps] 
          $T[R_ZERO_33_1667_update_start__ps] 
          $T[R_ZERO_33_1667_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1667_sample_start_] 
          $T[R_ZERO_33_1667_sample_completed_] 
          R_ZERO_33_1667_sample_completed_ <-& (R_ZERO_33_1667_sample_start_)
          $T[R_ZERO_33_1667_update_start_] 
          $T [R_ZERO_33_1667_update_completed_] $delay 
          R_ZERO_33_1667_update_completed_ <-& (R_ZERO_33_1667_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1667_sample_start_ <-& (R_ZERO_33_1667_sample_start__ps)
          R_ZERO_33_1667_update_start_ <-& (R_ZERO_33_1667_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1667_sample_completed__ps <-& (R_ZERO_33_1667_sample_completed_)
          R_ZERO_33_1667_update_completed__ps <-& (R_ZERO_33_1667_update_completed_)
          $T[RPIPE_noblock_obuf_1_3_1669_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1669_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_3_1669_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1669_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_3
          $T[RPIPE_noblock_obuf_1_3_1669_sample_start_] 
          $T[RPIPE_noblock_obuf_1_3_1669_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_3_1669_update_start_] 
          $T[RPIPE_noblock_obuf_1_3_1669_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_3_1669 with guard R_read_from_1_1668
          // root phi_stmt_1665 not in visited_elements
          // root phi_stmt_1670 not in visited_elements
          // root phi_stmt_1675 not in visited_elements
          // root phi_stmt_1680 not in visited_elements
          // root phi_stmt_1685 not in visited_elements
          // root phi_stmt_1693 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_3_1669_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_3_1669_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_3_1669_sample_start_ &-> (RPIPE_noblock_obuf_1_3_1669_Sample)
          RPIPE_noblock_obuf_1_3_1669_sample_completed_ <-& (RPIPE_noblock_obuf_1_3_1669_Sample)
          RPIPE_noblock_obuf_1_3_1669_update_start_ <-& (RPIPE_noblock_obuf_1_3_1669_sample_completed_)
          RPIPE_noblock_obuf_1_3_1669_update_start_ &-> (RPIPE_noblock_obuf_1_3_1669_Update)
          RPIPE_noblock_obuf_1_3_1669_update_completed_ <-& (RPIPE_noblock_obuf_1_3_1669_Update)
          RPIPE_noblock_obuf_1_3_1669_sample_start_ o<-& (RPIPE_noblock_obuf_1_3_1669_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_3_1669_sample_start_ <-& (RPIPE_noblock_obuf_1_3_1669_sample_start__ps)
          RPIPE_noblock_obuf_1_3_1669_update_start_ <-& (RPIPE_noblock_obuf_1_3_1669_update_start__ps)
          // RAW reenables for noblock_obuf_1_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_3_1669_sample_completed__ps <-& (RPIPE_noblock_obuf_1_3_1669_sample_completed_)
          RPIPE_noblock_obuf_1_3_1669_update_completed__ps <-& (RPIPE_noblock_obuf_1_3_1669_update_completed_)
          $phisequencer [ phi_stmt_1665_phi_seq] : 
          phi_stmt_1665_entry_trigger R_ZERO_33_1667_sample_start__ps R_ZERO_33_1667_sample_completed__ps R_ZERO_33_1667_update_start__ps R_ZERO_33_1667_update_completed__ps phi_stmt_1665_loopback_trigger RPIPE_noblock_obuf_1_3_1669_sample_start__ps RPIPE_noblock_obuf_1_3_1669_sample_completed__ps RPIPE_noblock_obuf_1_3_1669_update_start__ps RPIPE_noblock_obuf_1_3_1669_update_completed__ps :
          phi_stmt_1665_sample_start__ps phi_stmt_1665_sample_completed__ps phi_stmt_1665_update_start__ps phi_stmt_1665_update_completed__ps :
          phi_stmt_1665_entry_sample_req_ps phi_stmt_1665_loopback_sample_req_ps : 
          phi_stmt_1665_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1665
          // start:  multi-source PHI statement phi_stmt_1670
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1670_sample_start_] 
          $T[phi_stmt_1670_sample_completed_] 
          $T[phi_stmt_1670_update_start_] 
          $T[phi_stmt_1670_update_completed_] 
          $T[phi_stmt_1670_sample_start__ps] 
          phi_stmt_1670_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1670_sample_completed__ps] 
          phi_stmt_1670_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1670_update_start__ps] 
          phi_stmt_1670_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1670_update_completed__ps] 
          phi_stmt_1670_update_completed_ <-& (phi_stmt_1670_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1670_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1670_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1670_update_start_)
          $T[phi_stmt_1670_loopback_trigger] 
          phi_stmt_1670_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1670_loopback_sample_req] 
          $T[phi_stmt_1670_loopback_sample_req_ps] 
          phi_stmt_1670_loopback_sample_req <-& (phi_stmt_1670_loopback_sample_req_ps)
          phi_stmt_1670_loopback_sample_req &-> ($null)
          $T[phi_stmt_1670_entry_trigger] 
          phi_stmt_1670_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1670_entry_sample_req] 
          $T[phi_stmt_1670_entry_sample_req_ps] 
          phi_stmt_1670_entry_sample_req <-& (phi_stmt_1670_entry_sample_req_ps)
          phi_stmt_1670_entry_sample_req &-> ($null)
          phi_stmt_1670_update_start_ o<-& (phi_stmt_1670_update_completed_ 0)
          phi_stmt_1670_sample_start_ o<-& (phi_stmt_1670_sample_completed_ 1)
          $T[phi_stmt_1670_merged_reqs] 
          $T[phi_stmt_1670_phi_mux_ack] 
          $T[phi_stmt_1670_phi_mux_ack_ps] 
          phi_stmt_1670_phi_mux_ack_ps <-& (phi_stmt_1670_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1670_update_completed_)
          $T[R_ZERO_33_1672_sample_start__ps] 
          $T[R_ZERO_33_1672_sample_completed__ps] 
          $T[R_ZERO_33_1672_update_start__ps] 
          $T[R_ZERO_33_1672_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1672_sample_start_] 
          $T[R_ZERO_33_1672_sample_completed_] 
          R_ZERO_33_1672_sample_completed_ <-& (R_ZERO_33_1672_sample_start_)
          $T[R_ZERO_33_1672_update_start_] 
          $T [R_ZERO_33_1672_update_completed_] $delay 
          R_ZERO_33_1672_update_completed_ <-& (R_ZERO_33_1672_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1672_sample_start_ <-& (R_ZERO_33_1672_sample_start__ps)
          R_ZERO_33_1672_update_start_ <-& (R_ZERO_33_1672_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1672_sample_completed__ps <-& (R_ZERO_33_1672_sample_completed_)
          R_ZERO_33_1672_update_completed__ps <-& (R_ZERO_33_1672_update_completed_)
          $T[RPIPE_noblock_obuf_2_3_1674_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1674_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_3_1674_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1674_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_3
          $T[RPIPE_noblock_obuf_2_3_1674_sample_start_] 
          $T[RPIPE_noblock_obuf_2_3_1674_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_3_1674_update_start_] 
          $T[RPIPE_noblock_obuf_2_3_1674_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_3_1674 with guard R_read_from_2_1673
          // root phi_stmt_1670 not in visited_elements
          // root phi_stmt_1675 not in visited_elements
          // root phi_stmt_1680 not in visited_elements
          // root phi_stmt_1685 not in visited_elements
          // root phi_stmt_1693 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_3_1674_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_3_1674_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_3_1674_sample_start_ &-> (RPIPE_noblock_obuf_2_3_1674_Sample)
          RPIPE_noblock_obuf_2_3_1674_sample_completed_ <-& (RPIPE_noblock_obuf_2_3_1674_Sample)
          RPIPE_noblock_obuf_2_3_1674_update_start_ <-& (RPIPE_noblock_obuf_2_3_1674_sample_completed_)
          RPIPE_noblock_obuf_2_3_1674_update_start_ &-> (RPIPE_noblock_obuf_2_3_1674_Update)
          RPIPE_noblock_obuf_2_3_1674_update_completed_ <-& (RPIPE_noblock_obuf_2_3_1674_Update)
          RPIPE_noblock_obuf_2_3_1674_sample_start_ o<-& (RPIPE_noblock_obuf_2_3_1674_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_3_1674_sample_start_ <-& (RPIPE_noblock_obuf_2_3_1674_sample_start__ps)
          RPIPE_noblock_obuf_2_3_1674_update_start_ <-& (RPIPE_noblock_obuf_2_3_1674_update_start__ps)
          // RAW reenables for noblock_obuf_2_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_3_1674_sample_completed__ps <-& (RPIPE_noblock_obuf_2_3_1674_sample_completed_)
          RPIPE_noblock_obuf_2_3_1674_update_completed__ps <-& (RPIPE_noblock_obuf_2_3_1674_update_completed_)
          $phisequencer [ phi_stmt_1670_phi_seq] : 
          phi_stmt_1670_entry_trigger R_ZERO_33_1672_sample_start__ps R_ZERO_33_1672_sample_completed__ps R_ZERO_33_1672_update_start__ps R_ZERO_33_1672_update_completed__ps phi_stmt_1670_loopback_trigger RPIPE_noblock_obuf_2_3_1674_sample_start__ps RPIPE_noblock_obuf_2_3_1674_sample_completed__ps RPIPE_noblock_obuf_2_3_1674_update_start__ps RPIPE_noblock_obuf_2_3_1674_update_completed__ps :
          phi_stmt_1670_sample_start__ps phi_stmt_1670_sample_completed__ps phi_stmt_1670_update_start__ps phi_stmt_1670_update_completed__ps :
          phi_stmt_1670_entry_sample_req_ps phi_stmt_1670_loopback_sample_req_ps : 
          phi_stmt_1670_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1670
          // start:  multi-source PHI statement phi_stmt_1675
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1675_sample_start_] 
          $T[phi_stmt_1675_sample_completed_] 
          $T[phi_stmt_1675_update_start_] 
          $T[phi_stmt_1675_update_completed_] 
          $T[phi_stmt_1675_sample_start__ps] 
          phi_stmt_1675_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1675_sample_completed__ps] 
          phi_stmt_1675_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1675_update_start__ps] 
          phi_stmt_1675_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1675_update_completed__ps] 
          phi_stmt_1675_update_completed_ <-& (phi_stmt_1675_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1675_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1675_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1675_update_start_)
          $T[phi_stmt_1675_loopback_trigger] 
          phi_stmt_1675_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1675_loopback_sample_req] 
          $T[phi_stmt_1675_loopback_sample_req_ps] 
          phi_stmt_1675_loopback_sample_req <-& (phi_stmt_1675_loopback_sample_req_ps)
          phi_stmt_1675_loopback_sample_req &-> ($null)
          $T[phi_stmt_1675_entry_trigger] 
          phi_stmt_1675_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1675_entry_sample_req] 
          $T[phi_stmt_1675_entry_sample_req_ps] 
          phi_stmt_1675_entry_sample_req <-& (phi_stmt_1675_entry_sample_req_ps)
          phi_stmt_1675_entry_sample_req &-> ($null)
          phi_stmt_1675_update_start_ o<-& (phi_stmt_1675_update_completed_ 0)
          phi_stmt_1675_sample_start_ o<-& (phi_stmt_1675_sample_completed_ 1)
          $T[phi_stmt_1675_merged_reqs] 
          $T[phi_stmt_1675_phi_mux_ack] 
          $T[phi_stmt_1675_phi_mux_ack_ps] 
          phi_stmt_1675_phi_mux_ack_ps <-& (phi_stmt_1675_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1675_update_completed_)
          $T[R_ZERO_33_1677_sample_start__ps] 
          $T[R_ZERO_33_1677_sample_completed__ps] 
          $T[R_ZERO_33_1677_update_start__ps] 
          $T[R_ZERO_33_1677_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1677_sample_start_] 
          $T[R_ZERO_33_1677_sample_completed_] 
          R_ZERO_33_1677_sample_completed_ <-& (R_ZERO_33_1677_sample_start_)
          $T[R_ZERO_33_1677_update_start_] 
          $T [R_ZERO_33_1677_update_completed_] $delay 
          R_ZERO_33_1677_update_completed_ <-& (R_ZERO_33_1677_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1677_sample_start_ <-& (R_ZERO_33_1677_sample_start__ps)
          R_ZERO_33_1677_update_start_ <-& (R_ZERO_33_1677_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1677_sample_completed__ps <-& (R_ZERO_33_1677_sample_completed_)
          R_ZERO_33_1677_update_completed__ps <-& (R_ZERO_33_1677_update_completed_)
          $T[RPIPE_noblock_obuf_3_3_1679_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1679_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_3_1679_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1679_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_3
          $T[RPIPE_noblock_obuf_3_3_1679_sample_start_] 
          $T[RPIPE_noblock_obuf_3_3_1679_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_3_1679_update_start_] 
          $T[RPIPE_noblock_obuf_3_3_1679_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_3_1679 with guard R_read_from_3_1678
          // root phi_stmt_1675 not in visited_elements
          // root phi_stmt_1680 not in visited_elements
          // root phi_stmt_1685 not in visited_elements
          // root phi_stmt_1693 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_3_1679_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_3_1679_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_3_1679_sample_start_ &-> (RPIPE_noblock_obuf_3_3_1679_Sample)
          RPIPE_noblock_obuf_3_3_1679_sample_completed_ <-& (RPIPE_noblock_obuf_3_3_1679_Sample)
          RPIPE_noblock_obuf_3_3_1679_update_start_ <-& (RPIPE_noblock_obuf_3_3_1679_sample_completed_)
          RPIPE_noblock_obuf_3_3_1679_update_start_ &-> (RPIPE_noblock_obuf_3_3_1679_Update)
          RPIPE_noblock_obuf_3_3_1679_update_completed_ <-& (RPIPE_noblock_obuf_3_3_1679_Update)
          RPIPE_noblock_obuf_3_3_1679_sample_start_ o<-& (RPIPE_noblock_obuf_3_3_1679_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_3_1679_sample_start_ <-& (RPIPE_noblock_obuf_3_3_1679_sample_start__ps)
          RPIPE_noblock_obuf_3_3_1679_update_start_ <-& (RPIPE_noblock_obuf_3_3_1679_update_start__ps)
          // RAW reenables for noblock_obuf_3_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_3_1679_sample_completed__ps <-& (RPIPE_noblock_obuf_3_3_1679_sample_completed_)
          RPIPE_noblock_obuf_3_3_1679_update_completed__ps <-& (RPIPE_noblock_obuf_3_3_1679_update_completed_)
          $phisequencer [ phi_stmt_1675_phi_seq] : 
          phi_stmt_1675_entry_trigger R_ZERO_33_1677_sample_start__ps R_ZERO_33_1677_sample_completed__ps R_ZERO_33_1677_update_start__ps R_ZERO_33_1677_update_completed__ps phi_stmt_1675_loopback_trigger RPIPE_noblock_obuf_3_3_1679_sample_start__ps RPIPE_noblock_obuf_3_3_1679_sample_completed__ps RPIPE_noblock_obuf_3_3_1679_update_start__ps RPIPE_noblock_obuf_3_3_1679_update_completed__ps :
          phi_stmt_1675_sample_start__ps phi_stmt_1675_sample_completed__ps phi_stmt_1675_update_start__ps phi_stmt_1675_update_completed__ps :
          phi_stmt_1675_entry_sample_req_ps phi_stmt_1675_loopback_sample_req_ps : 
          phi_stmt_1675_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1675
          // start:  multi-source PHI statement phi_stmt_1680
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1680_sample_start_] 
          $T[phi_stmt_1680_sample_completed_] 
          $T[phi_stmt_1680_update_start_] 
          $T[phi_stmt_1680_update_completed_] 
          $T[phi_stmt_1680_sample_start__ps] 
          phi_stmt_1680_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1680_sample_completed__ps] 
          phi_stmt_1680_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1680_update_start__ps] 
          phi_stmt_1680_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1680_update_completed__ps] 
          phi_stmt_1680_update_completed_ <-& (phi_stmt_1680_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1680_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1680_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1680_update_start_)
          $T[phi_stmt_1680_loopback_trigger] 
          phi_stmt_1680_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1680_loopback_sample_req] 
          $T[phi_stmt_1680_loopback_sample_req_ps] 
          phi_stmt_1680_loopback_sample_req <-& (phi_stmt_1680_loopback_sample_req_ps)
          phi_stmt_1680_loopback_sample_req &-> ($null)
          $T[phi_stmt_1680_entry_trigger] 
          phi_stmt_1680_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1680_entry_sample_req] 
          $T[phi_stmt_1680_entry_sample_req_ps] 
          phi_stmt_1680_entry_sample_req <-& (phi_stmt_1680_entry_sample_req_ps)
          phi_stmt_1680_entry_sample_req &-> ($null)
          phi_stmt_1680_update_start_ o<-& (phi_stmt_1680_update_completed_ 0)
          phi_stmt_1680_sample_start_ o<-& (phi_stmt_1680_sample_completed_ 1)
          $T[phi_stmt_1680_merged_reqs] 
          $T[phi_stmt_1680_phi_mux_ack] 
          $T[phi_stmt_1680_phi_mux_ack_ps] 
          phi_stmt_1680_phi_mux_ack_ps <-& (phi_stmt_1680_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1680_update_completed_)
          $T[R_ZERO_33_1682_sample_start__ps] 
          $T[R_ZERO_33_1682_sample_completed__ps] 
          $T[R_ZERO_33_1682_update_start__ps] 
          $T[R_ZERO_33_1682_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1682_sample_start_] 
          $T[R_ZERO_33_1682_sample_completed_] 
          R_ZERO_33_1682_sample_completed_ <-& (R_ZERO_33_1682_sample_start_)
          $T[R_ZERO_33_1682_update_start_] 
          $T [R_ZERO_33_1682_update_completed_] $delay 
          R_ZERO_33_1682_update_completed_ <-& (R_ZERO_33_1682_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1682_sample_start_ <-& (R_ZERO_33_1682_sample_start__ps)
          R_ZERO_33_1682_update_start_ <-& (R_ZERO_33_1682_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1682_sample_completed__ps <-& (R_ZERO_33_1682_sample_completed_)
          R_ZERO_33_1682_update_completed__ps <-& (R_ZERO_33_1682_update_completed_)
          $T[RPIPE_noblock_obuf_4_3_1684_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1684_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_3_1684_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1684_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_3
          $T[RPIPE_noblock_obuf_4_3_1684_sample_start_] 
          $T[RPIPE_noblock_obuf_4_3_1684_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_3_1684_update_start_] 
          $T[RPIPE_noblock_obuf_4_3_1684_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_3_1684 with guard R_read_from_4_1683
          // root phi_stmt_1680 not in visited_elements
          // root phi_stmt_1685 not in visited_elements
          // root phi_stmt_1693 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_3_1684_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_3_1684_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_3_1684_sample_start_ &-> (RPIPE_noblock_obuf_4_3_1684_Sample)
          RPIPE_noblock_obuf_4_3_1684_sample_completed_ <-& (RPIPE_noblock_obuf_4_3_1684_Sample)
          RPIPE_noblock_obuf_4_3_1684_update_start_ <-& (RPIPE_noblock_obuf_4_3_1684_sample_completed_)
          RPIPE_noblock_obuf_4_3_1684_update_start_ &-> (RPIPE_noblock_obuf_4_3_1684_Update)
          RPIPE_noblock_obuf_4_3_1684_update_completed_ <-& (RPIPE_noblock_obuf_4_3_1684_Update)
          RPIPE_noblock_obuf_4_3_1684_sample_start_ o<-& (RPIPE_noblock_obuf_4_3_1684_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_3_1684_sample_start_ <-& (RPIPE_noblock_obuf_4_3_1684_sample_start__ps)
          RPIPE_noblock_obuf_4_3_1684_update_start_ <-& (RPIPE_noblock_obuf_4_3_1684_update_start__ps)
          // RAW reenables for noblock_obuf_4_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_3_1684_sample_completed__ps <-& (RPIPE_noblock_obuf_4_3_1684_sample_completed_)
          RPIPE_noblock_obuf_4_3_1684_update_completed__ps <-& (RPIPE_noblock_obuf_4_3_1684_update_completed_)
          $phisequencer [ phi_stmt_1680_phi_seq] : 
          phi_stmt_1680_entry_trigger R_ZERO_33_1682_sample_start__ps R_ZERO_33_1682_sample_completed__ps R_ZERO_33_1682_update_start__ps R_ZERO_33_1682_update_completed__ps phi_stmt_1680_loopback_trigger RPIPE_noblock_obuf_4_3_1684_sample_start__ps RPIPE_noblock_obuf_4_3_1684_sample_completed__ps RPIPE_noblock_obuf_4_3_1684_update_start__ps RPIPE_noblock_obuf_4_3_1684_update_completed__ps :
          phi_stmt_1680_sample_start__ps phi_stmt_1680_sample_completed__ps phi_stmt_1680_update_start__ps phi_stmt_1680_update_completed__ps :
          phi_stmt_1680_entry_sample_req_ps phi_stmt_1680_loopback_sample_req_ps : 
          phi_stmt_1680_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1680
          // start:  multi-source PHI statement phi_stmt_1685
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1685_sample_start_] 
          $T[phi_stmt_1685_sample_completed_] 
          $T[phi_stmt_1685_update_start_] 
          $T[phi_stmt_1685_update_completed_] 
          $T[phi_stmt_1685_sample_start__ps] 
          phi_stmt_1685_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1685_sample_completed__ps] 
          phi_stmt_1685_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1685_update_start__ps] 
          phi_stmt_1685_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1685_update_completed__ps] 
          phi_stmt_1685_update_completed_ <-& (phi_stmt_1685_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1685_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1685_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1685_update_start_)
          $T[phi_stmt_1685_loopback_trigger] 
          phi_stmt_1685_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1685_loopback_sample_req] 
          $T[phi_stmt_1685_loopback_sample_req_ps] 
          phi_stmt_1685_loopback_sample_req <-& (phi_stmt_1685_loopback_sample_req_ps)
          phi_stmt_1685_loopback_sample_req &-> ($null)
          $T[phi_stmt_1685_entry_trigger] 
          phi_stmt_1685_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1685_entry_sample_req] 
          $T[phi_stmt_1685_entry_sample_req_ps] 
          phi_stmt_1685_entry_sample_req <-& (phi_stmt_1685_entry_sample_req_ps)
          phi_stmt_1685_entry_sample_req &-> ($null)
          phi_stmt_1685_update_start_ o<-& (phi_stmt_1685_update_completed_ 0)
          phi_stmt_1685_sample_start_ o<-& (phi_stmt_1685_sample_completed_ 1)
          $T[phi_stmt_1685_merged_reqs] 
          $T[phi_stmt_1685_phi_mux_ack] 
          $T[phi_stmt_1685_phi_mux_ack_ps] 
          phi_stmt_1685_phi_mux_ack_ps <-& (phi_stmt_1685_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1685_update_completed_)
          $T[R_ZERO_3_1687_sample_start__ps] 
          $T[R_ZERO_3_1687_sample_completed__ps] 
          $T[R_ZERO_3_1687_update_start__ps] 
          $T[R_ZERO_3_1687_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1687_sample_start_] 
          $T[R_ZERO_3_1687_sample_completed_] 
          R_ZERO_3_1687_sample_completed_ <-& (R_ZERO_3_1687_sample_start_)
          $T[R_ZERO_3_1687_update_start_] 
          $T [R_ZERO_3_1687_update_completed_] $delay 
          R_ZERO_3_1687_update_completed_ <-& (R_ZERO_3_1687_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1687_sample_start_ <-& (R_ZERO_3_1687_sample_start__ps)
          R_ZERO_3_1687_update_start_ <-& (R_ZERO_3_1687_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1687_sample_completed__ps <-& (R_ZERO_3_1687_sample_completed_)
          R_ZERO_3_1687_update_completed__ps <-& (R_ZERO_3_1687_update_completed_)
          $T[R_next_active_packet_1688_sample_start__ps] 
          $T[R_next_active_packet_1688_sample_completed__ps] 
          $T[R_next_active_packet_1688_update_start__ps] 
          $T[R_next_active_packet_1688_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1688_sample_start_] 
          $T[R_next_active_packet_1688_sample_completed_] 
          $T[R_next_active_packet_1688_update_start_] 
          $T[R_next_active_packet_1688_update_completed_] 
          ;;[R_next_active_packet_1688_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1688_sample_start_ &-> (R_next_active_packet_1688_Sample)
          R_next_active_packet_1688_sample_completed_ <-& (R_next_active_packet_1688_Sample)
          ;;[R_next_active_packet_1688_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1688_update_start_ &-> (R_next_active_packet_1688_Update)
          R_next_active_packet_1688_update_completed_ <-& (R_next_active_packet_1688_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1688_sample_start_ <-& (R_next_active_packet_1688_sample_start__ps)
          R_next_active_packet_1688_update_start_ <-& (R_next_active_packet_1688_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1688_sample_completed__ps <-& (R_next_active_packet_1688_sample_completed_)
          R_next_active_packet_1688_update_completed__ps <-& (R_next_active_packet_1688_update_completed_)
          $phisequencer [ phi_stmt_1685_phi_seq] : 
          phi_stmt_1685_entry_trigger R_ZERO_3_1687_sample_start__ps R_ZERO_3_1687_sample_completed__ps R_ZERO_3_1687_update_start__ps R_ZERO_3_1687_update_completed__ps phi_stmt_1685_loopback_trigger R_next_active_packet_1688_sample_start__ps R_next_active_packet_1688_sample_completed__ps R_next_active_packet_1688_update_start__ps R_next_active_packet_1688_update_completed__ps :
          phi_stmt_1685_sample_start__ps phi_stmt_1685_sample_completed__ps phi_stmt_1685_update_start__ps phi_stmt_1685_update_completed__ps :
          phi_stmt_1685_entry_sample_req_ps phi_stmt_1685_loopback_sample_req_ps : 
          phi_stmt_1685_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1685
          // start:  multi-source PHI statement phi_stmt_1689
          // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1689_sample_start_] 
          $T[phi_stmt_1689_sample_completed_] 
          $T[phi_stmt_1689_update_start_] 
          $T[phi_stmt_1689_update_completed_] 
          $T[phi_stmt_1689_sample_start__ps] 
          phi_stmt_1689_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1689_sample_completed__ps] 
          phi_stmt_1689_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1689_update_start__ps] 
          phi_stmt_1689_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1689_update_completed__ps] 
          phi_stmt_1689_update_completed_ <-& (phi_stmt_1689_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1689_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1689_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1689_update_start_)
          $T[phi_stmt_1689_loopback_trigger] 
          phi_stmt_1689_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1689_loopback_sample_req] 
          $T[phi_stmt_1689_loopback_sample_req_ps] 
          phi_stmt_1689_loopback_sample_req <-& (phi_stmt_1689_loopback_sample_req_ps)
          phi_stmt_1689_loopback_sample_req &-> ($null)
          $T[phi_stmt_1689_entry_trigger] 
          phi_stmt_1689_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1689_entry_sample_req] 
          $T[phi_stmt_1689_entry_sample_req_ps] 
          phi_stmt_1689_entry_sample_req <-& (phi_stmt_1689_entry_sample_req_ps)
          phi_stmt_1689_entry_sample_req &-> ($null)
          phi_stmt_1689_update_start_ o<-& (phi_stmt_1689_update_completed_ 0)
          phi_stmt_1689_sample_start_ o<-& (phi_stmt_1689_sample_completed_ 1)
          $T[phi_stmt_1689_merged_reqs] 
          $T[phi_stmt_1689_phi_mux_ack] 
          $T[phi_stmt_1689_phi_mux_ack_ps] 
          phi_stmt_1689_phi_mux_ack_ps <-& (phi_stmt_1689_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1689_update_completed_)
          $T[R_ZERO_8_1691_sample_start__ps] 
          $T[R_ZERO_8_1691_sample_completed__ps] 
          $T[R_ZERO_8_1691_update_start__ps] 
          $T[R_ZERO_8_1691_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1691_sample_start_] 
          $T[R_ZERO_8_1691_sample_completed_] 
          R_ZERO_8_1691_sample_completed_ <-& (R_ZERO_8_1691_sample_start_)
          $T[R_ZERO_8_1691_update_start_] 
          $T [R_ZERO_8_1691_update_completed_] $delay 
          R_ZERO_8_1691_update_completed_ <-& (R_ZERO_8_1691_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1691_sample_start_ <-& (R_ZERO_8_1691_sample_start__ps)
          R_ZERO_8_1691_update_start_ <-& (R_ZERO_8_1691_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1691_sample_completed__ps <-& (R_ZERO_8_1691_sample_completed_)
          R_ZERO_8_1691_update_completed__ps <-& (R_ZERO_8_1691_update_completed_)
          $T[R_next_active_packet_length_1692_sample_start__ps] 
          $T[R_next_active_packet_length_1692_sample_completed__ps] 
          $T[R_next_active_packet_length_1692_update_start__ps] 
          $T[R_next_active_packet_length_1692_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_length_1692_sample_start_] 
          $T[R_next_active_packet_length_1692_sample_completed_] 
          $T[R_next_active_packet_length_1692_update_start_] 
          $T[R_next_active_packet_length_1692_update_completed_] 
          ;;[R_next_active_packet_length_1692_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_length_1692_sample_start_ &-> (R_next_active_packet_length_1692_Sample)
          R_next_active_packet_length_1692_sample_completed_ <-& (R_next_active_packet_length_1692_Sample)
          ;;[R_next_active_packet_length_1692_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_length_1692_update_start_ &-> (R_next_active_packet_length_1692_Update)
          R_next_active_packet_length_1692_update_completed_ <-& (R_next_active_packet_length_1692_Update)
          // RAW reenables for next_active_packet_length
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_length_1692_sample_start_ <-& (R_next_active_packet_length_1692_sample_start__ps)
          R_next_active_packet_length_1692_update_start_ <-& (R_next_active_packet_length_1692_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_length_1692_sample_completed__ps <-& (R_next_active_packet_length_1692_sample_completed_)
          R_next_active_packet_length_1692_update_completed__ps <-& (R_next_active_packet_length_1692_update_completed_)
          $phisequencer [ phi_stmt_1689_phi_seq] : 
          phi_stmt_1689_entry_trigger R_ZERO_8_1691_sample_start__ps R_ZERO_8_1691_sample_completed__ps R_ZERO_8_1691_update_start__ps R_ZERO_8_1691_update_completed__ps phi_stmt_1689_loopback_trigger R_next_active_packet_length_1692_sample_start__ps R_next_active_packet_length_1692_sample_completed__ps R_next_active_packet_length_1692_update_start__ps R_next_active_packet_length_1692_update_completed__ps :
          phi_stmt_1689_sample_start__ps phi_stmt_1689_sample_completed__ps phi_stmt_1689_update_start__ps phi_stmt_1689_update_completed__ps :
          phi_stmt_1689_entry_sample_req_ps phi_stmt_1689_loopback_sample_req_ps : 
          phi_stmt_1689_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1689
          // start:  multi-source PHI statement phi_stmt_1693
          // 			$phi priority_index := 			  next_priority_index $on   $loopback 			  ZERO_2 $on   $entry 
          // type of target is $uint<2>
          $T[phi_stmt_1693_sample_start_] 
          $T[phi_stmt_1693_sample_completed_] 
          $T[phi_stmt_1693_update_start_] 
          $T[phi_stmt_1693_update_completed_] 
          $T[phi_stmt_1693_sample_start__ps] 
          phi_stmt_1693_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1693_sample_completed__ps] 
          phi_stmt_1693_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1693_update_start__ps] 
          phi_stmt_1693_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1693_update_completed__ps] 
          phi_stmt_1693_update_completed_ <-& (phi_stmt_1693_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1693_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1693_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1693_update_start_)
          $T[phi_stmt_1693_loopback_trigger] 
          phi_stmt_1693_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1693_loopback_sample_req] 
          $T[phi_stmt_1693_loopback_sample_req_ps] 
          phi_stmt_1693_loopback_sample_req <-& (phi_stmt_1693_loopback_sample_req_ps)
          phi_stmt_1693_loopback_sample_req &-> ($null)
          $T[phi_stmt_1693_entry_trigger] 
          phi_stmt_1693_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1693_entry_sample_req] 
          $T[phi_stmt_1693_entry_sample_req_ps] 
          phi_stmt_1693_entry_sample_req <-& (phi_stmt_1693_entry_sample_req_ps)
          phi_stmt_1693_entry_sample_req &-> ($null)
          phi_stmt_1693_update_start_ o<-& (phi_stmt_1693_update_completed_ 0)
          phi_stmt_1693_sample_start_ o<-& (phi_stmt_1693_sample_completed_ 1)
          $T[phi_stmt_1693_merged_reqs] 
          $T[phi_stmt_1693_phi_mux_ack] 
          $T[phi_stmt_1693_phi_mux_ack_ps] 
          phi_stmt_1693_phi_mux_ack_ps <-& (phi_stmt_1693_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1693_update_completed_)
          $T[R_next_priority_index_1695_sample_start__ps] 
          $T[R_next_priority_index_1695_sample_completed__ps] 
          $T[R_next_priority_index_1695_update_start__ps] 
          $T[R_next_priority_index_1695_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_priority_index_1695_sample_start_] 
          $T[R_next_priority_index_1695_sample_completed_] 
          $T[R_next_priority_index_1695_update_start_] 
          $T[R_next_priority_index_1695_update_completed_] 
          ;;[R_next_priority_index_1695_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_priority_index_1695_sample_start_ &-> (R_next_priority_index_1695_Sample)
          R_next_priority_index_1695_sample_completed_ <-& (R_next_priority_index_1695_Sample)
          ;;[R_next_priority_index_1695_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_priority_index_1695_update_start_ &-> (R_next_priority_index_1695_Update)
          R_next_priority_index_1695_update_completed_ <-& (R_next_priority_index_1695_Update)
          // RAW reenables for next_priority_index
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_priority_index_1695_sample_start_ <-& (R_next_priority_index_1695_sample_start__ps)
          R_next_priority_index_1695_update_start_ <-& (R_next_priority_index_1695_update_start__ps)
          // Phi complete dependency.
          R_next_priority_index_1695_sample_completed__ps <-& (R_next_priority_index_1695_sample_completed_)
          R_next_priority_index_1695_update_completed__ps <-& (R_next_priority_index_1695_update_completed_)
          $T[R_ZERO_2_1696_sample_start__ps] 
          $T[R_ZERO_2_1696_sample_completed__ps] 
          $T[R_ZERO_2_1696_update_start__ps] 
          $T[R_ZERO_2_1696_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_2_1696_sample_start_] 
          $T[R_ZERO_2_1696_sample_completed_] 
          R_ZERO_2_1696_sample_completed_ <-& (R_ZERO_2_1696_sample_start_)
          $T[R_ZERO_2_1696_update_start_] 
          $T [R_ZERO_2_1696_update_completed_] $delay 
          R_ZERO_2_1696_update_completed_ <-& (R_ZERO_2_1696_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_2_1696_sample_start_ <-& (R_ZERO_2_1696_sample_start__ps)
          R_ZERO_2_1696_update_start_ <-& (R_ZERO_2_1696_update_start__ps)
          // Phi complete dependency.
          R_ZERO_2_1696_sample_completed__ps <-& (R_ZERO_2_1696_sample_completed_)
          R_ZERO_2_1696_update_completed__ps <-& (R_ZERO_2_1696_update_completed_)
          $phisequencer [ phi_stmt_1693_phi_seq] : 
          phi_stmt_1693_loopback_trigger R_next_priority_index_1695_sample_start__ps R_next_priority_index_1695_sample_completed__ps R_next_priority_index_1695_update_start__ps R_next_priority_index_1695_update_completed__ps phi_stmt_1693_entry_trigger R_ZERO_2_1696_sample_start__ps R_ZERO_2_1696_sample_completed__ps R_ZERO_2_1696_update_start__ps R_ZERO_2_1696_update_completed__ps :
          phi_stmt_1693_sample_start__ps phi_stmt_1693_sample_completed__ps phi_stmt_1693_update_start__ps phi_stmt_1693_update_completed__ps :
          phi_stmt_1693_loopback_sample_req_ps phi_stmt_1693_entry_sample_req_ps : 
          phi_stmt_1693_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1693
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // start:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 438
          // volatile! 
          // Source expression
          // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
          // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
          // ( $mux read_from_1 0   _b0  ) 
          // read_from_1
          // ( $mux read_from_2 1   _b0  ) 
          // read_from_2
          // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
          // ( $mux read_from_3 2   _b0  ) 
          // read_from_3
          // ( $mux read_from_4 3   _b0  ) 
          // read_from_4
          // Target expression
          // (as target) senderPort
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // end:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          // start: 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          //  file .Aa/switch2x2.opt.aa, line 439
          $T[call_stmt_1724_sample_start_] 
          $T[call_stmt_1724_sample_completed_] 
          $T[call_stmt_1724_update_start_] 
          $T[call_stmt_1724_update_completed_] 
          // Call input argument 0
          // senderPort
          // Call input argument 1
          // Call input argument 2
          // start: Forward dependencies from senderPort to transition call_stmt_1724_sample_start_
          call_stmt_1724_sample_start_ <-& (phi_stmt_1661_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1665_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1670_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1675_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1680_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1685_update_completed_)
          call_stmt_1724_sample_start_ <-& (phi_stmt_1693_update_completed_)
          // done: Forward dependencies from senderPort to transition call_stmt_1724_sample_start_
          // RAW reenables for senderPort
          phi_stmt_1661_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1665_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1670_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1675_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1680_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1685_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          phi_stmt_1693_update_start_ o<-& (call_stmt_1724_sample_completed_ 0)
          ;;[call_stmt_1724_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1724_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1724_sample_start_ &-> (call_stmt_1724_Sample)
          call_stmt_1724_sample_completed_ <-& (call_stmt_1724_Sample)
          call_stmt_1724_sample_completed_ &-> ($null)
          call_stmt_1724_update_start_ &-> (call_stmt_1724_Update)
          call_stmt_1724_update_completed_ <-& (call_stmt_1724_Update)
          // Call output argument 0
          // (as target) continue
          // self-release: 
          call_stmt_1724_sample_start_ o<-& (call_stmt_1724_sample_completed_ 1)
          $null &-> (call_stmt_1724_update_start_)
          call_stmt_1724_update_start_ o<-& (call_stmt_1724_update_completed_ 0)
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end: 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 440
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 441
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 442
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 443
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 445
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // start:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  file .Aa/switch2x2.opt.aa, line 446
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // priority_index
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_priority_index
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // end:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 447
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // start:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 448
          // volatile! 
          // Source expression
          // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
          // started_new_packet
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 15 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 15 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 15 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 15 8 ) 
          // pkt_4_e_word
          // active_packet_length
          // Target expression
          // (as target) next_active_packet_length
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // end:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 449
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (next_active_packet_length - 1 )
          // next_active_packet_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 450
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 451
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 452
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 453
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 454
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 455
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 456
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_3
          $T[WPIPE_out_data_3_1949_sample_start_] 
          $T[WPIPE_out_data_3_1949_sample_completed_] 
          $T[WPIPE_out_data_3_1949_update_start_] 
          $T[WPIPE_out_data_3_1949_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_3_1949 with guard R_send_flag_1948
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1661_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1665_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1670_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1675_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1680_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1685_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1693_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1661_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1665_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1670_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1675_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1680_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1685_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1693_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          ;;[WPIPE_out_data_3_1949_Sample] 
          {
            // pipe write sample-start out_data_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_3_1949_Update] 
          {
            // pipe write update (complete) out_data_3
            $T [req] $T [ack] 
          }
          WPIPE_out_data_3_1949_sample_start_ &-> (WPIPE_out_data_3_1949_Sample)
          WPIPE_out_data_3_1949_sample_completed_ <-& (WPIPE_out_data_3_1949_Sample)
          WPIPE_out_data_3_1949_update_start_ <-& (WPIPE_out_data_3_1949_sample_completed_)
          WPIPE_out_data_3_1949_update_start_ &-> (WPIPE_out_data_3_1949_Update)
          WPIPE_out_data_3_1949_update_completed_ <-& (WPIPE_out_data_3_1949_Update)
          WPIPE_out_data_3_1949_sample_start_ o<-& (WPIPE_out_data_3_1949_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1949_sample_start_
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1661_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1665_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1670_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1675_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1680_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1685_update_completed_)
          WPIPE_out_data_3_1949_sample_start_ <-& (phi_stmt_1693_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1949_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1661_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1665_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1670_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1675_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1680_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1685_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          phi_stmt_1693_update_start_ o<-& (WPIPE_out_data_3_1949_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_stmt_1724 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe out_data_3
          // read-dependencies for pipe out_data_3
          // write-dependencies for pipe out_data_3
          // signal write dependencies for out_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1659__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1659_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1659__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1659_loop_body : condition_evaluated
        $bind do_while_stmt_1659__entry__  => do_while_stmt_1659_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1659_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1659__exit__)
      }
      do_while_stmt_1659__entry__ |-> (do_while_stmt_1659)
      do_while_stmt_1659__exit__ <-| (do_while_stmt_1659)
      do_while_stmt_1659__entry__ <-| (branch_block_stmt_1658__entry__)
      do_while_stmt_1659__exit__ |-> (branch_block_stmt_1658__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 420
    // constant-object-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 416
    // constant-object-declarations for block %outputPort_3_Daemon
    //  file .Aa/switch2x2.opt.aa, line 411
    // constant-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 416
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 418
    // 1 
    $constant $W[konst_1962_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 420
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 421
    // ZERO_8
    $constant $W[R_ZERO_8_1663_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 423
    // ZERO_33
    $constant $W[R_ZERO_33_1667_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 425
    // ZERO_33
    $constant $W[R_ZERO_33_1672_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 427
    // ZERO_33
    $constant $W[R_ZERO_33_1677_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 429
    // ZERO_33
    $constant $W[R_ZERO_33_1682_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 431
    // ZERO_3
    $constant $W[R_ZERO_3_1687_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 433
    // ZERO_8
    $constant $W[R_ZERO_8_1691_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi priority_index := 			  next_priority_index $on   $loopback 			  ZERO_2 $on   $entry 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 435
    // ZERO_2
    $constant $W[R_ZERO_2_1696_wire_constant] : $int<2> := _b00// 0
    // ( $mux read_from_1 0   _b0  ) 
    // 0 
    $constant $W[konst_1700_wire_constant] : $int<8> := _b00000000// 0
    // _b0 
    $constant $W[konst_1701_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_2 1   _b0  ) 
    // 1 
    $constant $W[konst_1704_wire_constant] : $int<8> := _b00000001// 1
    // _b0 
    $constant $W[konst_1705_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_3 2   _b0  ) 
    // 2 
    $constant $W[konst_1709_wire_constant] : $int<8> := _b00000010// 2
    // _b0 
    $constant $W[konst_1710_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_4 3   _b0  ) 
    // 3 
    $constant $W[konst_1713_wire_constant] : $int<8> := _b00000011// 3
    // _b0 
    $constant $W[konst_1714_wire_constant] : $int<8> := _b00000000// 0
    // 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 439
    // 2 
    $constant $W[konst_1720_wire_constant] : $int<8> := _b00000010// 2
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1722_wire_constant] : $int<1> := _b0// 0
    // 32 
    $constant $W[konst_1727_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1732_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1737_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1742_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1759_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1762_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1765_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1768_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1772_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1775_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1778_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1781_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 446
    // 0 
    $constant $W[konst_1798_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1801_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1808_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1812_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1815_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1819_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1823_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1827_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1830_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1834_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1844_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1848_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_1858_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1866_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1874_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1882_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_1888_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1892_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_1895_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1899_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_1903_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1907_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_1910_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1914_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1921_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1924_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1927_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1930_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1934_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1937_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1940_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1943_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 416
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 418
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 420
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 421
    $W[next_down_counter_1853_1664_buffered] : $int<8>
    // down_counter
    $W[down_counter_1661] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 423
    // noblock_obuf_1_3
    $W[RPIPE_noblock_obuf_1_3_1669_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1665] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 425
    // noblock_obuf_2_3
    $W[RPIPE_noblock_obuf_2_3_1674_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1670] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 427
    // noblock_obuf_3_3
    $W[RPIPE_noblock_obuf_3_3_1679_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1675] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 429
    // noblock_obuf_4_3
    $W[RPIPE_noblock_obuf_4_3_1684_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1680] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 431
    $W[next_active_packet_1795_1688_buffered] : $int<3>
    // active_packet
    $W[active_packet_1685] : $int<3>
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 433
    $W[next_active_packet_length_1840_1692_buffered] : $int<8>
    // active_packet_length
    $W[active_packet_length_1689] : $int<8>
    // 			$phi priority_index := 			  next_priority_index $on   $loopback 			  ZERO_2 $on   $entry 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 435
    $W[next_priority_index_1795_1695_buffered] : $int<2>
    // priority_index
    $W[priority_index_1693] : $int<2>
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 438
    // ( $mux read_from_1 0   _b0  ) 
    $intermediate $W[MUX_1702_wire] : $int<8>
    // ( $mux read_from_2 1   _b0  ) 
    $intermediate $W[MUX_1706_wire] : $int<8>
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    $intermediate $W[OR_u8_u8_1707_wire] : $int<8>
    // ( $mux read_from_3 2   _b0  ) 
    $intermediate $W[MUX_1711_wire] : $int<8>
    // ( $mux read_from_4 3   _b0  ) 
    $intermediate $W[MUX_1715_wire] : $int<8>
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    $intermediate $W[OR_u8_u8_1716_wire] : $int<8>
    // senderPort
    $W[senderPort_1718] : $int<8>
    // 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 439
    // continue
    $W[continue_1724] : $int<1>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 440
    // p1_valid
    $W[p1_valid_1729] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 441
    // p2_valid
    $W[p2_valid_1734] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 442
    // p3_valid
    $W[p3_valid_1739] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 443
    // p4_valid
    $W[p4_valid_1744] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 445
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1760_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1763_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1766_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1769_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1770_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1773_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1776_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1779_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1782_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1783_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1785] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 446
    // next_active_packet
    $W[next_active_packet_1795] : $int<3>
    // next_priority_index
    $W[next_priority_index_1795] : $int<2>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 447
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1799_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_1802_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1804] : $int<1>
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 448
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1809_wire] : $int<1>
    // ( $slice pkt_1_e_word 15 8 ) 
    $intermediate $W[slice_1811_wire] : $int<8>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1813_wire] : $int<8>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1816_wire] : $int<1>
    // ( $slice pkt_2_e_word 15 8 ) 
    $intermediate $W[slice_1818_wire] : $int<8>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1820_wire] : $int<8>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1821_wire] : $int<8>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1824_wire] : $int<1>
    // ( $slice pkt_3_e_word 15 8 ) 
    $intermediate $W[slice_1826_wire] : $int<8>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1828_wire] : $int<8>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1831_wire] : $int<1>
    // ( $slice pkt_4_e_word 15 8 ) 
    $intermediate $W[slice_1833_wire] : $int<8>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_1835_wire] : $int<8>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_1836_wire] : $int<8>
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    $intermediate $W[OR_u8_u8_1837_wire] : $int<8>
    // next_active_packet_length
    $W[next_active_packet_length_1840] : $int<8>
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 449
    // (next_active_packet_length - 1 )
    $intermediate $W[SUB_u8_u8_1845_wire] : $int<8>
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_1849_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1851_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_1853] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 450
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1856_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1859_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1861] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 451
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1864_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1867_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1869] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 452
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1872_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1875_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1877] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 453
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1880_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1883_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1885] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 454
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1889_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1891_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1893_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1896_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1898_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1900_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1901_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1904_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1906_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1908_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1911_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1913_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_1915_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_1916_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1918] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 455
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1922_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1925_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1928_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1931_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1932_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1935_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1938_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1941_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1944_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1945_wire] : $int<1>
    // send_flag
    $W[send_flag_1947] : $int<1>
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 456
    // out_data_3
    // datapath-instances for block %outputPort_3_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 416
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 418
    ==0? [do_while_stmt_1659_branch] (konst_1962_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 420
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 421
    # := [next_down_counter_1853_1664_buf] (next_down_counter_1853) (next_down_counter_1853_1664_buffered)   $in_phi    $fullrate
    $buffering $out next_down_counter_1853_1664_buf next_down_counter_1853_1664_buffered  1
    # $phi [phi_stmt_1661] (R_ZERO_8_1663_wire_constant next_down_counter_1853_1664_buffered) ( down_counter_1661 ) $fullrate
    // $buffering  $out phi_stmt_1661 down_counter_1661 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 423
    // noblock_obuf_1_3
    $ioport $in [RPIPE_noblock_obuf_1_3_1669_inst] (noblock_obuf_1_3) (RPIPE_noblock_obuf_1_3_1669_wire) $guard ( read_from_1_1861 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_3_1669_inst RPIPE_noblock_obuf_1_3_1669_wire 1
    # $phi [phi_stmt_1665] (R_ZERO_33_1667_wire_constant RPIPE_noblock_obuf_1_3_1669_wire) ( pkt_1_e_word_1665 ) $fullrate
    // $buffering  $out phi_stmt_1665 pkt_1_e_word_1665 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 425
    // noblock_obuf_2_3
    $ioport $in [RPIPE_noblock_obuf_2_3_1674_inst] (noblock_obuf_2_3) (RPIPE_noblock_obuf_2_3_1674_wire) $guard ( read_from_2_1869 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_3_1674_inst RPIPE_noblock_obuf_2_3_1674_wire 1
    # $phi [phi_stmt_1670] (R_ZERO_33_1672_wire_constant RPIPE_noblock_obuf_2_3_1674_wire) ( pkt_2_e_word_1670 ) $fullrate
    // $buffering  $out phi_stmt_1670 pkt_2_e_word_1670 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 427
    // noblock_obuf_3_3
    $ioport $in [RPIPE_noblock_obuf_3_3_1679_inst] (noblock_obuf_3_3) (RPIPE_noblock_obuf_3_3_1679_wire) $guard ( read_from_3_1877 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_3_1679_inst RPIPE_noblock_obuf_3_3_1679_wire 1
    # $phi [phi_stmt_1675] (R_ZERO_33_1677_wire_constant RPIPE_noblock_obuf_3_3_1679_wire) ( pkt_3_e_word_1675 ) $fullrate
    // $buffering  $out phi_stmt_1675 pkt_3_e_word_1675 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 429
    // noblock_obuf_4_3
    $ioport $in [RPIPE_noblock_obuf_4_3_1684_inst] (noblock_obuf_4_3) (RPIPE_noblock_obuf_4_3_1684_wire) $guard ( read_from_4_1885 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_3_1684_inst RPIPE_noblock_obuf_4_3_1684_wire 1
    # $phi [phi_stmt_1680] (R_ZERO_33_1682_wire_constant RPIPE_noblock_obuf_4_3_1684_wire) ( pkt_4_e_word_1680 ) $fullrate
    // $buffering  $out phi_stmt_1680 pkt_4_e_word_1680 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 431
    # := [next_active_packet_1795_1688_buf] (next_active_packet_1795) (next_active_packet_1795_1688_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_1795_1688_buf next_active_packet_1795_1688_buffered  1
    # $phi [phi_stmt_1685] (R_ZERO_3_1687_wire_constant next_active_packet_1795_1688_buffered) ( active_packet_1685 ) $fullrate
    // $buffering  $out phi_stmt_1685 active_packet_1685 2
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 433
    # := [next_active_packet_length_1840_1692_buf] (next_active_packet_length_1840) (next_active_packet_length_1840_1692_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_length_1840_1692_buf next_active_packet_length_1840_1692_buffered  1
    # $phi [phi_stmt_1689] (R_ZERO_8_1691_wire_constant next_active_packet_length_1840_1692_buffered) ( active_packet_length_1689 ) $fullrate
    // $buffering  $out phi_stmt_1689 active_packet_length_1689 2
    // 			$phi priority_index := 			  next_priority_index $on   $loopback 			  ZERO_2 $on   $entry 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 435
    # := [next_priority_index_1795_1695_buf] (next_priority_index_1795) (next_priority_index_1795_1695_buffered)   $in_phi    $fullrate
    $buffering $out next_priority_index_1795_1695_buf next_priority_index_1795_1695_buffered  1
    # $phi [phi_stmt_1693] (next_priority_index_1795_1695_buffered R_ZERO_2_1696_wire_constant) ( priority_index_1693 ) $fullrate
    // $buffering  $out phi_stmt_1693 priority_index_1693 2
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 438
    // ( $mux read_from_1 0   _b0  ) 
    ? [MUX_1702_inst] (read_from_1_1861 konst_1700_wire_constant konst_1701_wire_constant) (MUX_1702_wire)  $flowthrough
    // ( $mux read_from_2 1   _b0  ) 
    ? [MUX_1706_inst] (read_from_2_1869 konst_1704_wire_constant konst_1705_wire_constant) (MUX_1706_wire)  $flowthrough
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    |[OR_u8_u8_1707_inst] (MUX_1702_wire MUX_1706_wire) (OR_u8_u8_1707_wire)   $flowthrough 
    $delay OR_u8_u8_1707_inst 0
    // ( $mux read_from_3 2   _b0  ) 
    ? [MUX_1711_inst] (read_from_3_1877 konst_1709_wire_constant konst_1710_wire_constant) (MUX_1711_wire)  $flowthrough
    // ( $mux read_from_4 3   _b0  ) 
    ? [MUX_1715_inst] (read_from_4_1885 konst_1713_wire_constant konst_1714_wire_constant) (MUX_1715_wire)  $flowthrough
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    |[OR_u8_u8_1716_inst] (MUX_1711_wire MUX_1715_wire) (OR_u8_u8_1716_wire)   $flowthrough 
    $delay OR_u8_u8_1716_inst 0
    // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
    |[OR_u8_u8_1717_inst] (OR_u8_u8_1707_wire OR_u8_u8_1716_wire) (senderPort_1718)   $flowthrough 
    $delay OR_u8_u8_1717_inst 0
    // 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 439
    $call [call_stmt_1724_call] $module updateCounter(senderPort_1718 konst_1720_wire_constant type_cast_1722_wire_constant) (continue_1724)   $fullrate
    $delay call_stmt_1724_call 4
    $buffering  $in call_stmt_1724_call senderPort_1718 1
    $buffering  $in call_stmt_1724_call konst_1720_wire_constant 1
    $buffering  $in call_stmt_1724_call type_cast_1722_wire_constant 1
    $buffering  $out call_stmt_1724_call continue_1724 1
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 440
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1728_inst] (pkt_1_e_word_1665 konst_1727_wire_constant) (p1_valid_1729)   $flowthrough 
    $delay BITSEL_u33_u1_1728_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 441
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1733_inst] (pkt_2_e_word_1670 konst_1732_wire_constant) (p2_valid_1734)   $flowthrough 
    $delay BITSEL_u33_u1_1733_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 442
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1738_inst] (pkt_3_e_word_1675 konst_1737_wire_constant) (p3_valid_1739)   $flowthrough 
    $delay BITSEL_u33_u1_1738_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 443
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1743_inst] (pkt_4_e_word_1680 konst_1742_wire_constant) (p4_valid_1744)   $flowthrough 
    $delay BITSEL_u33_u1_1743_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 445
    // (active_packet == 1 )
    ==[EQ_u3_u1_1760_inst] (active_packet_1685 konst_1759_wire_constant) (EQ_u3_u1_1760_wire)   $flowthrough 
    $delay EQ_u3_u1_1760_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1763_inst] (EQ_u3_u1_1760_wire p1_valid_1729 konst_1762_wire_constant) (MUX_1763_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1766_inst] (active_packet_1685 konst_1765_wire_constant) (EQ_u3_u1_1766_wire)   $flowthrough 
    $delay EQ_u3_u1_1766_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1769_inst] (EQ_u3_u1_1766_wire p2_valid_1734 konst_1768_wire_constant) (MUX_1769_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1770_inst] (MUX_1763_wire MUX_1769_wire) (OR_u1_u1_1770_wire)   $flowthrough 
    $delay OR_u1_u1_1770_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1773_inst] (active_packet_1685 konst_1772_wire_constant) (EQ_u3_u1_1773_wire)   $flowthrough 
    $delay EQ_u3_u1_1773_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1776_inst] (EQ_u3_u1_1773_wire p3_valid_1739 konst_1775_wire_constant) (MUX_1776_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1779_inst] (active_packet_1685 konst_1778_wire_constant) (EQ_u3_u1_1779_wire)   $flowthrough 
    $delay EQ_u3_u1_1779_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1782_inst] (EQ_u3_u1_1779_wire p4_valid_1744 konst_1781_wire_constant) (MUX_1782_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1783_inst] (MUX_1776_wire MUX_1782_wire) (OR_u1_u1_1783_wire)   $flowthrough 
    $delay OR_u1_u1_1783_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1784_inst] (OR_u1_u1_1770_wire OR_u1_u1_1783_wire) (valid_active_pkt_word_read_1785)   $flowthrough 
    $delay OR_u1_u1_1784_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 446
    $call [call_stmt_1795_call] $module prioritySelect(down_counter_1661 active_packet_1685 priority_index_1693 p1_valid_1729 p2_valid_1734 p3_valid_1739 p4_valid_1744) (next_active_packet_1795 next_priority_index_1795)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 447
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1799_inst] (next_active_packet_1795 konst_1798_wire_constant) (NEQ_u3_u1_1799_wire)   $flowthrough 
    $delay NEQ_u3_u1_1799_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_1802_inst] (down_counter_1661 konst_1801_wire_constant) (EQ_u8_u1_1802_wire)   $flowthrough 
    $delay EQ_u8_u1_1802_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1803_inst] (NEQ_u3_u1_1799_wire EQ_u8_u1_1802_wire) (started_new_packet_1804)   $flowthrough 
    $delay AND_u1_u1_1803_inst 0
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 448
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1809_inst] (next_active_packet_1795 konst_1808_wire_constant) (EQ_u3_u1_1809_wire)   $flowthrough 
    $delay EQ_u3_u1_1809_inst 0
    // ( $slice pkt_1_e_word 15 8 ) 
    [:] [slice_1811_inst] (pkt_1_e_word_1665 15 8) (slice_1811_wire)  $flowthrough
    $delay slice_1811_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    ? [MUX_1813_inst] (EQ_u3_u1_1809_wire slice_1811_wire konst_1812_wire_constant) (MUX_1813_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1816_inst] (next_active_packet_1795 konst_1815_wire_constant) (EQ_u3_u1_1816_wire)   $flowthrough 
    $delay EQ_u3_u1_1816_inst 0
    // ( $slice pkt_2_e_word 15 8 ) 
    [:] [slice_1818_inst] (pkt_2_e_word_1670 15 8) (slice_1818_wire)  $flowthrough
    $delay slice_1818_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    ? [MUX_1820_inst] (EQ_u3_u1_1816_wire slice_1818_wire konst_1819_wire_constant) (MUX_1820_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1821_inst] (MUX_1813_wire MUX_1820_wire) (OR_u8_u8_1821_wire)   $flowthrough 
    $delay OR_u8_u8_1821_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1824_inst] (next_active_packet_1795 konst_1823_wire_constant) (EQ_u3_u1_1824_wire)   $flowthrough 
    $delay EQ_u3_u1_1824_inst 0
    // ( $slice pkt_3_e_word 15 8 ) 
    [:] [slice_1826_inst] (pkt_3_e_word_1675 15 8) (slice_1826_wire)  $flowthrough
    $delay slice_1826_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    ? [MUX_1828_inst] (EQ_u3_u1_1824_wire slice_1826_wire konst_1827_wire_constant) (MUX_1828_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1831_inst] (next_active_packet_1795 konst_1830_wire_constant) (EQ_u3_u1_1831_wire)   $flowthrough 
    $delay EQ_u3_u1_1831_inst 0
    // ( $slice pkt_4_e_word 15 8 ) 
    [:] [slice_1833_inst] (pkt_4_e_word_1680 15 8) (slice_1833_wire)  $flowthrough
    $delay slice_1833_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    ? [MUX_1835_inst] (EQ_u3_u1_1831_wire slice_1833_wire konst_1834_wire_constant) (MUX_1835_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_1836_inst] (MUX_1828_wire MUX_1835_wire) (OR_u8_u8_1836_wire)   $flowthrough 
    $delay OR_u8_u8_1836_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    |[OR_u8_u8_1837_inst] (OR_u8_u8_1821_wire OR_u8_u8_1836_wire) (OR_u8_u8_1837_wire)   $flowthrough 
    $delay OR_u8_u8_1837_inst 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    ? [MUX_1839_inst] (started_new_packet_1804 OR_u8_u8_1837_wire active_packet_length_1689) (next_active_packet_length_1840)  $flowthrough
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 449
    // (next_active_packet_length - 1 )
    -[SUB_u8_u8_1845_inst] (next_active_packet_length_1840 konst_1844_wire_constant) (SUB_u8_u8_1845_wire)   $flowthrough 
    $delay SUB_u8_u8_1845_inst 0
    // (down_counter - 1 )
    -[SUB_u8_u8_1849_inst] (down_counter_1661 konst_1848_wire_constant) (SUB_u8_u8_1849_wire)   $flowthrough 
    $delay SUB_u8_u8_1849_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1851_inst] (valid_active_pkt_word_read_1785 SUB_u8_u8_1849_wire down_counter_1661) (MUX_1851_wire)  $flowthrough
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1852_inst] (started_new_packet_1804 SUB_u8_u8_1845_wire MUX_1851_wire) (next_down_counter_1853)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 450
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1856_inst] (p1_valid_1729) (NOT_u1_u1_1856_wire)   $flowthrough
    $delay NOT_u1_u1_1856_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1859_inst] (next_active_packet_1795 konst_1858_wire_constant) (EQ_u3_u1_1859_wire)   $flowthrough 
    $delay EQ_u3_u1_1859_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1860_inst] (NOT_u1_u1_1856_wire EQ_u3_u1_1859_wire) (read_from_1_1861)   $flowthrough 
    $delay OR_u1_u1_1860_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 451
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1864_inst] (p2_valid_1734) (NOT_u1_u1_1864_wire)   $flowthrough
    $delay NOT_u1_u1_1864_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1867_inst] (next_active_packet_1795 konst_1866_wire_constant) (EQ_u3_u1_1867_wire)   $flowthrough 
    $delay EQ_u3_u1_1867_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1868_inst] (NOT_u1_u1_1864_wire EQ_u3_u1_1867_wire) (read_from_2_1869)   $flowthrough 
    $delay OR_u1_u1_1868_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 452
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1872_inst] (p3_valid_1739) (NOT_u1_u1_1872_wire)   $flowthrough
    $delay NOT_u1_u1_1872_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1875_inst] (next_active_packet_1795 konst_1874_wire_constant) (EQ_u3_u1_1875_wire)   $flowthrough 
    $delay EQ_u3_u1_1875_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1876_inst] (NOT_u1_u1_1872_wire EQ_u3_u1_1875_wire) (read_from_3_1877)   $flowthrough 
    $delay OR_u1_u1_1876_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 453
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1880_inst] (p4_valid_1744) (NOT_u1_u1_1880_wire)   $flowthrough
    $delay NOT_u1_u1_1880_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1883_inst] (next_active_packet_1795 konst_1882_wire_constant) (EQ_u3_u1_1883_wire)   $flowthrough 
    $delay EQ_u3_u1_1883_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1884_inst] (NOT_u1_u1_1880_wire EQ_u3_u1_1883_wire) (read_from_4_1885)   $flowthrough 
    $delay OR_u1_u1_1884_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 454
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1889_inst] (next_active_packet_1795 konst_1888_wire_constant) (EQ_u3_u1_1889_wire)   $flowthrough 
    $delay EQ_u3_u1_1889_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1891_inst] (pkt_1_e_word_1665 31 0) (slice_1891_wire)  $flowthrough
    $delay slice_1891_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_1893_inst] (EQ_u3_u1_1889_wire slice_1891_wire konst_1892_wire_constant) (MUX_1893_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1896_inst] (next_active_packet_1795 konst_1895_wire_constant) (EQ_u3_u1_1896_wire)   $flowthrough 
    $delay EQ_u3_u1_1896_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1898_inst] (pkt_2_e_word_1670 31 0) (slice_1898_wire)  $flowthrough
    $delay slice_1898_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_1900_inst] (EQ_u3_u1_1896_wire slice_1898_wire konst_1899_wire_constant) (MUX_1900_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1901_inst] (MUX_1893_wire MUX_1900_wire) (OR_u32_u32_1901_wire)   $flowthrough 
    $delay OR_u32_u32_1901_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1904_inst] (next_active_packet_1795 konst_1903_wire_constant) (EQ_u3_u1_1904_wire)   $flowthrough 
    $delay EQ_u3_u1_1904_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1906_inst] (pkt_3_e_word_1675 31 0) (slice_1906_wire)  $flowthrough
    $delay slice_1906_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_1908_inst] (EQ_u3_u1_1904_wire slice_1906_wire konst_1907_wire_constant) (MUX_1908_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1911_inst] (next_active_packet_1795 konst_1910_wire_constant) (EQ_u3_u1_1911_wire)   $flowthrough 
    $delay EQ_u3_u1_1911_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1913_inst] (pkt_4_e_word_1680 31 0) (slice_1913_wire)  $flowthrough
    $delay slice_1913_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_1915_inst] (EQ_u3_u1_1911_wire slice_1913_wire konst_1914_wire_constant) (MUX_1915_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_1916_inst] (MUX_1908_wire MUX_1915_wire) (OR_u32_u32_1916_wire)   $flowthrough 
    $delay OR_u32_u32_1916_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_1917_inst] (OR_u32_u32_1901_wire OR_u32_u32_1916_wire) (data_to_out_1918)   $flowthrough 
    $delay OR_u32_u32_1917_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 455
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1922_inst] (next_active_packet_1795 konst_1921_wire_constant) (EQ_u3_u1_1922_wire)   $flowthrough 
    $delay EQ_u3_u1_1922_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1925_inst] (EQ_u3_u1_1922_wire p1_valid_1729 konst_1924_wire_constant) (MUX_1925_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1928_inst] (next_active_packet_1795 konst_1927_wire_constant) (EQ_u3_u1_1928_wire)   $flowthrough 
    $delay EQ_u3_u1_1928_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1931_inst] (EQ_u3_u1_1928_wire p2_valid_1734 konst_1930_wire_constant) (MUX_1931_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1932_inst] (MUX_1925_wire MUX_1931_wire) (OR_u1_u1_1932_wire)   $flowthrough 
    $delay OR_u1_u1_1932_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1935_inst] (next_active_packet_1795 konst_1934_wire_constant) (EQ_u3_u1_1935_wire)   $flowthrough 
    $delay EQ_u3_u1_1935_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1938_inst] (EQ_u3_u1_1935_wire p3_valid_1739 konst_1937_wire_constant) (MUX_1938_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1941_inst] (next_active_packet_1795 konst_1940_wire_constant) (EQ_u3_u1_1941_wire)   $flowthrough 
    $delay EQ_u3_u1_1941_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1944_inst] (EQ_u3_u1_1941_wire p4_valid_1744 konst_1943_wire_constant) (MUX_1944_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1945_inst] (MUX_1938_wire MUX_1944_wire) (OR_u1_u1_1945_wire)   $flowthrough 
    $delay OR_u1_u1_1945_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1946_inst] (OR_u1_u1_1932_wire OR_u1_u1_1945_wire) (send_flag_1947)   $flowthrough 
    $delay OR_u1_u1_1946_inst 0
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 456
    // out_data_3
    $ioport $out [WPIPE_out_data_3_1949_inst]  (data_to_out_1918) (out_data_3) $guard ( send_flag_1947 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1659
  //  file .Aa/switch2x2.opt.aa, line 418
  phi_stmt_1661 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1661_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1661_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1661_phi_mux_ack)
  next_down_counter_1853_1664_buf <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_down_counter_1664_Sample/req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_down_counter_1664_Update/req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_down_counter_1664_Sample/ack branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_down_counter_1664_Update/ack)
  phi_stmt_1665 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1665_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1665_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1665_phi_mux_ack)
  // noblock_obuf_1_3
  RPIPE_noblock_obuf_1_3_1669_inst <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_1_3_1669_Sample/rr branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_1_3_1669_Update/cr) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_1_3_1669_Sample/ra branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_1_3_1669_Update/ca)
  phi_stmt_1670 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1670_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1670_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1670_phi_mux_ack)
  // noblock_obuf_2_3
  RPIPE_noblock_obuf_2_3_1674_inst <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_2_3_1674_Sample/rr branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_2_3_1674_Update/cr) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_2_3_1674_Sample/ra branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_2_3_1674_Update/ca)
  phi_stmt_1675 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1675_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1675_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1675_phi_mux_ack)
  // noblock_obuf_3_3
  RPIPE_noblock_obuf_3_3_1679_inst <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_3_3_1679_Sample/rr branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_3_3_1679_Update/cr) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_3_3_1679_Sample/ra branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_3_3_1679_Update/ca)
  phi_stmt_1680 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1680_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1680_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1680_phi_mux_ack)
  // noblock_obuf_4_3
  RPIPE_noblock_obuf_4_3_1684_inst <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_4_3_1684_Sample/rr branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_4_3_1684_Update/cr) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_4_3_1684_Sample/ra branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/RPIPE_noblock_obuf_4_3_1684_Update/ca)
  phi_stmt_1685 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1685_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1685_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1685_phi_mux_ack)
  next_active_packet_1795_1688_buf <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_1688_Sample/req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_1688_Update/req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_1688_Sample/ack branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_1688_Update/ack)
  phi_stmt_1689 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1689_entry_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1689_loopback_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1689_phi_mux_ack)
  next_active_packet_length_1840_1692_buf <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_length_1692_Sample/req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_length_1692_Update/req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_length_1692_Sample/ack branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_active_packet_length_1692_Update/ack)
  phi_stmt_1693 <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1693_loopback_sample_req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1693_entry_sample_req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/phi_stmt_1693_phi_mux_ack)
  next_priority_index_1795_1695_buf <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_priority_index_1695_Sample/req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_priority_index_1695_Update/req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_priority_index_1695_Sample/ack branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/R_next_priority_index_1695_Update/ack)
  // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 438
  // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
  // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
  // read_from_1
  // ( $mux read_from_1 0   _b0  ) 
  // read_from_2
  // ( $mux read_from_2 1   _b0  ) 
  // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
  // read_from_3
  // ( $mux read_from_3 2   _b0  ) 
  // read_from_4
  // ( $mux read_from_4 3   _b0  ) 
  // 			$call updateCounter (senderPort 2  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
  //  file .Aa/switch2x2.opt.aa, line 439
  // senderPort
  call_stmt_1724_call <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/call_stmt_1724_Sample/crr branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/call_stmt_1724_Update/ccr) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/call_stmt_1724_Sample/cra branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/call_stmt_1724_Update/cca)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 440
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 441
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 442
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 443
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 445
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
  //  file .Aa/switch2x2.opt.aa, line 446
  // down_counter
  // active_packet
  // priority_index
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 447
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 448
  // started_new_packet
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
  // active_packet_length
  // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
  // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 449
  // started_new_packet
  // (next_active_packet_length - 1 )
  // next_active_packet_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 450
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 451
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 452
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 453
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 454
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 455
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 456
  // data_to_out
  // out_data_3
  WPIPE_out_data_3_1949_inst <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/WPIPE_out_data_3_1949_Sample/req branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/WPIPE_out_data_3_1949_Update/req) (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/WPIPE_out_data_3_1949_Sample/ack branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/WPIPE_out_data_3_1949_Update/ack)
  do_while_stmt_1659_branch <=> (branch_block_stmt_1658/do_while_stmt_1659/do_while_stmt_1659_loop_body/condition_evaluated) (branch_block_stmt_1658/do_while_stmt_1659/loop_exit/ack branch_block_stmt_1658/do_while_stmt_1659/loop_taken/ack)
}
$module [outputPort_4_Daemon] 
{
  // pipe-declarations for block %outputPort_4_Daemon
  //  file .Aa/switch2x2.opt.aa, line 461
  // pipe-declarations for block %outputPort_4_Daemon%loop
  //  file .Aa/switch2x2.opt.aa, line 466
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1966] // Branch Block  file .Aa/switch2x2.opt.aa, line 466
    {
      $P [branch_block_stmt_1966__entry__]
      branch_block_stmt_1966__entry__ <-| ($entry)
      $P [branch_block_stmt_1966__exit__]
      branch_block_stmt_1966__exit__ |-> ($exit)
      $P [do_while_stmt_1967__entry__] 
      $P [do_while_stmt_1967__exit__] 
      // do-while-statement  
      //  file .Aa/switch2x2.opt.aa, line 468
      <o> [do_while_stmt_1967]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1967__entry__] 
        $P[do_while_stmt_1967__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1967_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_sample_ack_d] $delay
          aggregated_phi_sample_ack_d <-& (aggregated_phi_sample_ack)
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  multi-source PHI statement phi_stmt_1969
          // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1969_sample_start_] 
          $T[phi_stmt_1969_sample_completed_] 
          $T[phi_stmt_1969_update_start_] 
          $T[phi_stmt_1969_update_completed_] 
          $T[phi_stmt_1969_sample_start__ps] 
          phi_stmt_1969_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1969_sample_completed__ps] 
          phi_stmt_1969_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1969_update_start__ps] 
          phi_stmt_1969_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1969_update_completed__ps] 
          phi_stmt_1969_update_completed_ <-& (phi_stmt_1969_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1969_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1969_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1969_update_start_)
          $T[phi_stmt_1969_loopback_trigger] 
          phi_stmt_1969_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1969_loopback_sample_req] 
          $T[phi_stmt_1969_loopback_sample_req_ps] 
          phi_stmt_1969_loopback_sample_req <-& (phi_stmt_1969_loopback_sample_req_ps)
          phi_stmt_1969_loopback_sample_req &-> ($null)
          $T[phi_stmt_1969_entry_trigger] 
          phi_stmt_1969_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1969_entry_sample_req] 
          $T[phi_stmt_1969_entry_sample_req_ps] 
          phi_stmt_1969_entry_sample_req <-& (phi_stmt_1969_entry_sample_req_ps)
          phi_stmt_1969_entry_sample_req &-> ($null)
          phi_stmt_1969_update_start_ o<-& (phi_stmt_1969_update_completed_ 0)
          phi_stmt_1969_sample_start_ o<-& (phi_stmt_1969_sample_completed_ 1)
          $T[phi_stmt_1969_merged_reqs] 
          $T[phi_stmt_1969_phi_mux_ack] 
          $T[phi_stmt_1969_phi_mux_ack_ps] 
          phi_stmt_1969_phi_mux_ack_ps <-& (phi_stmt_1969_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1969_update_completed_)
          $T[R_ZERO_8_1971_sample_start__ps] 
          $T[R_ZERO_8_1971_sample_completed__ps] 
          $T[R_ZERO_8_1971_update_start__ps] 
          $T[R_ZERO_8_1971_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1971_sample_start_] 
          $T[R_ZERO_8_1971_sample_completed_] 
          R_ZERO_8_1971_sample_completed_ <-& (R_ZERO_8_1971_sample_start_)
          $T[R_ZERO_8_1971_update_start_] 
          $T [R_ZERO_8_1971_update_completed_] $delay 
          R_ZERO_8_1971_update_completed_ <-& (R_ZERO_8_1971_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1971_sample_start_ <-& (R_ZERO_8_1971_sample_start__ps)
          R_ZERO_8_1971_update_start_ <-& (R_ZERO_8_1971_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1971_sample_completed__ps <-& (R_ZERO_8_1971_sample_completed_)
          R_ZERO_8_1971_update_completed__ps <-& (R_ZERO_8_1971_update_completed_)
          $T[R_next_down_counter_1972_sample_start__ps] 
          $T[R_next_down_counter_1972_sample_completed__ps] 
          $T[R_next_down_counter_1972_update_start__ps] 
          $T[R_next_down_counter_1972_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1972_sample_start_] 
          $T[R_next_down_counter_1972_sample_completed_] 
          $T[R_next_down_counter_1972_update_start_] 
          $T[R_next_down_counter_1972_update_completed_] 
          ;;[R_next_down_counter_1972_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1972_sample_start_ &-> (R_next_down_counter_1972_Sample)
          R_next_down_counter_1972_sample_completed_ <-& (R_next_down_counter_1972_Sample)
          ;;[R_next_down_counter_1972_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1972_update_start_ &-> (R_next_down_counter_1972_Update)
          R_next_down_counter_1972_update_completed_ <-& (R_next_down_counter_1972_Update)
          // RAW reenables for next_down_counter
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1972_sample_start_ <-& (R_next_down_counter_1972_sample_start__ps)
          R_next_down_counter_1972_update_start_ <-& (R_next_down_counter_1972_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1972_sample_completed__ps <-& (R_next_down_counter_1972_sample_completed_)
          R_next_down_counter_1972_update_completed__ps <-& (R_next_down_counter_1972_update_completed_)
          $phisequencer [ phi_stmt_1969_phi_seq] : 
          phi_stmt_1969_entry_trigger R_ZERO_8_1971_sample_start__ps R_ZERO_8_1971_sample_completed__ps R_ZERO_8_1971_update_start__ps R_ZERO_8_1971_update_completed__ps phi_stmt_1969_loopback_trigger R_next_down_counter_1972_sample_start__ps R_next_down_counter_1972_sample_completed__ps R_next_down_counter_1972_update_start__ps R_next_down_counter_1972_update_completed__ps :
          phi_stmt_1969_sample_start__ps phi_stmt_1969_sample_completed__ps phi_stmt_1969_update_start__ps phi_stmt_1969_update_completed__ps :
          phi_stmt_1969_entry_sample_req_ps phi_stmt_1969_loopback_sample_req_ps : 
          phi_stmt_1969_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1969
          // start:  multi-source PHI statement phi_stmt_1973
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1973_sample_start_] 
          $T[phi_stmt_1973_sample_completed_] 
          $T[phi_stmt_1973_update_start_] 
          $T[phi_stmt_1973_update_completed_] 
          $T[phi_stmt_1973_sample_start__ps] 
          phi_stmt_1973_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1973_sample_completed__ps] 
          phi_stmt_1973_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1973_update_start__ps] 
          phi_stmt_1973_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1973_update_completed__ps] 
          phi_stmt_1973_update_completed_ <-& (phi_stmt_1973_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1973_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1973_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1973_update_start_)
          $T[phi_stmt_1973_loopback_trigger] 
          phi_stmt_1973_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1973_loopback_sample_req] 
          $T[phi_stmt_1973_loopback_sample_req_ps] 
          phi_stmt_1973_loopback_sample_req <-& (phi_stmt_1973_loopback_sample_req_ps)
          phi_stmt_1973_loopback_sample_req &-> ($null)
          $T[phi_stmt_1973_entry_trigger] 
          phi_stmt_1973_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1973_entry_sample_req] 
          $T[phi_stmt_1973_entry_sample_req_ps] 
          phi_stmt_1973_entry_sample_req <-& (phi_stmt_1973_entry_sample_req_ps)
          phi_stmt_1973_entry_sample_req &-> ($null)
          phi_stmt_1973_update_start_ o<-& (phi_stmt_1973_update_completed_ 0)
          phi_stmt_1973_sample_start_ o<-& (phi_stmt_1973_sample_completed_ 1)
          $T[phi_stmt_1973_merged_reqs] 
          $T[phi_stmt_1973_phi_mux_ack] 
          $T[phi_stmt_1973_phi_mux_ack_ps] 
          phi_stmt_1973_phi_mux_ack_ps <-& (phi_stmt_1973_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1973_update_completed_)
          $T[R_ZERO_33_1975_sample_start__ps] 
          $T[R_ZERO_33_1975_sample_completed__ps] 
          $T[R_ZERO_33_1975_update_start__ps] 
          $T[R_ZERO_33_1975_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1975_sample_start_] 
          $T[R_ZERO_33_1975_sample_completed_] 
          R_ZERO_33_1975_sample_completed_ <-& (R_ZERO_33_1975_sample_start_)
          $T[R_ZERO_33_1975_update_start_] 
          $T [R_ZERO_33_1975_update_completed_] $delay 
          R_ZERO_33_1975_update_completed_ <-& (R_ZERO_33_1975_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1975_sample_start_ <-& (R_ZERO_33_1975_sample_start__ps)
          R_ZERO_33_1975_update_start_ <-& (R_ZERO_33_1975_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1975_sample_completed__ps <-& (R_ZERO_33_1975_sample_completed_)
          R_ZERO_33_1975_update_completed__ps <-& (R_ZERO_33_1975_update_completed_)
          $T[RPIPE_noblock_obuf_1_4_1977_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1977_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_4_1977_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1977_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_4
          $T[RPIPE_noblock_obuf_1_4_1977_sample_start_] 
          $T[RPIPE_noblock_obuf_1_4_1977_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_4_1977_update_start_] 
          $T[RPIPE_noblock_obuf_1_4_1977_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_4_1977 with guard R_read_from_1_1976
          // root phi_stmt_1973 not in visited_elements
          // root phi_stmt_1978 not in visited_elements
          // root phi_stmt_1983 not in visited_elements
          // root phi_stmt_1988 not in visited_elements
          // root phi_stmt_1993 not in visited_elements
          // root phi_stmt_2001 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_1
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_1_4_1977_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_4_1977_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_4_1977_sample_start_ &-> (RPIPE_noblock_obuf_1_4_1977_Sample)
          RPIPE_noblock_obuf_1_4_1977_sample_completed_ <-& (RPIPE_noblock_obuf_1_4_1977_Sample)
          RPIPE_noblock_obuf_1_4_1977_update_start_ <-& (RPIPE_noblock_obuf_1_4_1977_sample_completed_)
          RPIPE_noblock_obuf_1_4_1977_update_start_ &-> (RPIPE_noblock_obuf_1_4_1977_Update)
          RPIPE_noblock_obuf_1_4_1977_update_completed_ <-& (RPIPE_noblock_obuf_1_4_1977_Update)
          RPIPE_noblock_obuf_1_4_1977_sample_start_ o<-& (RPIPE_noblock_obuf_1_4_1977_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_4_1977_sample_start_ <-& (RPIPE_noblock_obuf_1_4_1977_sample_start__ps)
          RPIPE_noblock_obuf_1_4_1977_update_start_ <-& (RPIPE_noblock_obuf_1_4_1977_update_start__ps)
          // RAW reenables for noblock_obuf_1_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_4_1977_sample_completed__ps <-& (RPIPE_noblock_obuf_1_4_1977_sample_completed_)
          RPIPE_noblock_obuf_1_4_1977_update_completed__ps <-& (RPIPE_noblock_obuf_1_4_1977_update_completed_)
          $phisequencer [ phi_stmt_1973_phi_seq] : 
          phi_stmt_1973_entry_trigger R_ZERO_33_1975_sample_start__ps R_ZERO_33_1975_sample_completed__ps R_ZERO_33_1975_update_start__ps R_ZERO_33_1975_update_completed__ps phi_stmt_1973_loopback_trigger RPIPE_noblock_obuf_1_4_1977_sample_start__ps RPIPE_noblock_obuf_1_4_1977_sample_completed__ps RPIPE_noblock_obuf_1_4_1977_update_start__ps RPIPE_noblock_obuf_1_4_1977_update_completed__ps :
          phi_stmt_1973_sample_start__ps phi_stmt_1973_sample_completed__ps phi_stmt_1973_update_start__ps phi_stmt_1973_update_completed__ps :
          phi_stmt_1973_entry_sample_req_ps phi_stmt_1973_loopback_sample_req_ps : 
          phi_stmt_1973_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1973
          // start:  multi-source PHI statement phi_stmt_1978
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1978_sample_start_] 
          $T[phi_stmt_1978_sample_completed_] 
          $T[phi_stmt_1978_update_start_] 
          $T[phi_stmt_1978_update_completed_] 
          $T[phi_stmt_1978_sample_start__ps] 
          phi_stmt_1978_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1978_sample_completed__ps] 
          phi_stmt_1978_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1978_update_start__ps] 
          phi_stmt_1978_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1978_update_completed__ps] 
          phi_stmt_1978_update_completed_ <-& (phi_stmt_1978_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1978_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1978_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1978_update_start_)
          $T[phi_stmt_1978_loopback_trigger] 
          phi_stmt_1978_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1978_loopback_sample_req] 
          $T[phi_stmt_1978_loopback_sample_req_ps] 
          phi_stmt_1978_loopback_sample_req <-& (phi_stmt_1978_loopback_sample_req_ps)
          phi_stmt_1978_loopback_sample_req &-> ($null)
          $T[phi_stmt_1978_entry_trigger] 
          phi_stmt_1978_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1978_entry_sample_req] 
          $T[phi_stmt_1978_entry_sample_req_ps] 
          phi_stmt_1978_entry_sample_req <-& (phi_stmt_1978_entry_sample_req_ps)
          phi_stmt_1978_entry_sample_req &-> ($null)
          phi_stmt_1978_update_start_ o<-& (phi_stmt_1978_update_completed_ 0)
          phi_stmt_1978_sample_start_ o<-& (phi_stmt_1978_sample_completed_ 1)
          $T[phi_stmt_1978_merged_reqs] 
          $T[phi_stmt_1978_phi_mux_ack] 
          $T[phi_stmt_1978_phi_mux_ack_ps] 
          phi_stmt_1978_phi_mux_ack_ps <-& (phi_stmt_1978_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1978_update_completed_)
          $T[R_ZERO_33_1980_sample_start__ps] 
          $T[R_ZERO_33_1980_sample_completed__ps] 
          $T[R_ZERO_33_1980_update_start__ps] 
          $T[R_ZERO_33_1980_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1980_sample_start_] 
          $T[R_ZERO_33_1980_sample_completed_] 
          R_ZERO_33_1980_sample_completed_ <-& (R_ZERO_33_1980_sample_start_)
          $T[R_ZERO_33_1980_update_start_] 
          $T [R_ZERO_33_1980_update_completed_] $delay 
          R_ZERO_33_1980_update_completed_ <-& (R_ZERO_33_1980_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1980_sample_start_ <-& (R_ZERO_33_1980_sample_start__ps)
          R_ZERO_33_1980_update_start_ <-& (R_ZERO_33_1980_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1980_sample_completed__ps <-& (R_ZERO_33_1980_sample_completed_)
          R_ZERO_33_1980_update_completed__ps <-& (R_ZERO_33_1980_update_completed_)
          $T[RPIPE_noblock_obuf_2_4_1982_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1982_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_4_1982_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1982_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_4
          $T[RPIPE_noblock_obuf_2_4_1982_sample_start_] 
          $T[RPIPE_noblock_obuf_2_4_1982_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_4_1982_update_start_] 
          $T[RPIPE_noblock_obuf_2_4_1982_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_4_1982 with guard R_read_from_2_1981
          // root phi_stmt_1978 not in visited_elements
          // root phi_stmt_1983 not in visited_elements
          // root phi_stmt_1988 not in visited_elements
          // root phi_stmt_1993 not in visited_elements
          // root phi_stmt_2001 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_4_1982_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_4_1982_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_4_1982_sample_start_ &-> (RPIPE_noblock_obuf_2_4_1982_Sample)
          RPIPE_noblock_obuf_2_4_1982_sample_completed_ <-& (RPIPE_noblock_obuf_2_4_1982_Sample)
          RPIPE_noblock_obuf_2_4_1982_update_start_ <-& (RPIPE_noblock_obuf_2_4_1982_sample_completed_)
          RPIPE_noblock_obuf_2_4_1982_update_start_ &-> (RPIPE_noblock_obuf_2_4_1982_Update)
          RPIPE_noblock_obuf_2_4_1982_update_completed_ <-& (RPIPE_noblock_obuf_2_4_1982_Update)
          RPIPE_noblock_obuf_2_4_1982_sample_start_ o<-& (RPIPE_noblock_obuf_2_4_1982_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_4_1982_sample_start_ <-& (RPIPE_noblock_obuf_2_4_1982_sample_start__ps)
          RPIPE_noblock_obuf_2_4_1982_update_start_ <-& (RPIPE_noblock_obuf_2_4_1982_update_start__ps)
          // RAW reenables for noblock_obuf_2_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_4_1982_sample_completed__ps <-& (RPIPE_noblock_obuf_2_4_1982_sample_completed_)
          RPIPE_noblock_obuf_2_4_1982_update_completed__ps <-& (RPIPE_noblock_obuf_2_4_1982_update_completed_)
          $phisequencer [ phi_stmt_1978_phi_seq] : 
          phi_stmt_1978_entry_trigger R_ZERO_33_1980_sample_start__ps R_ZERO_33_1980_sample_completed__ps R_ZERO_33_1980_update_start__ps R_ZERO_33_1980_update_completed__ps phi_stmt_1978_loopback_trigger RPIPE_noblock_obuf_2_4_1982_sample_start__ps RPIPE_noblock_obuf_2_4_1982_sample_completed__ps RPIPE_noblock_obuf_2_4_1982_update_start__ps RPIPE_noblock_obuf_2_4_1982_update_completed__ps :
          phi_stmt_1978_sample_start__ps phi_stmt_1978_sample_completed__ps phi_stmt_1978_update_start__ps phi_stmt_1978_update_completed__ps :
          phi_stmt_1978_entry_sample_req_ps phi_stmt_1978_loopback_sample_req_ps : 
          phi_stmt_1978_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1978
          // start:  multi-source PHI statement phi_stmt_1983
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1983_sample_start_] 
          $T[phi_stmt_1983_sample_completed_] 
          $T[phi_stmt_1983_update_start_] 
          $T[phi_stmt_1983_update_completed_] 
          $T[phi_stmt_1983_sample_start__ps] 
          phi_stmt_1983_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1983_sample_completed__ps] 
          phi_stmt_1983_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1983_update_start__ps] 
          phi_stmt_1983_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1983_update_completed__ps] 
          phi_stmt_1983_update_completed_ <-& (phi_stmt_1983_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1983_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1983_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1983_update_start_)
          $T[phi_stmt_1983_loopback_trigger] 
          phi_stmt_1983_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1983_loopback_sample_req] 
          $T[phi_stmt_1983_loopback_sample_req_ps] 
          phi_stmt_1983_loopback_sample_req <-& (phi_stmt_1983_loopback_sample_req_ps)
          phi_stmt_1983_loopback_sample_req &-> ($null)
          $T[phi_stmt_1983_entry_trigger] 
          phi_stmt_1983_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1983_entry_sample_req] 
          $T[phi_stmt_1983_entry_sample_req_ps] 
          phi_stmt_1983_entry_sample_req <-& (phi_stmt_1983_entry_sample_req_ps)
          phi_stmt_1983_entry_sample_req &-> ($null)
          phi_stmt_1983_update_start_ o<-& (phi_stmt_1983_update_completed_ 0)
          phi_stmt_1983_sample_start_ o<-& (phi_stmt_1983_sample_completed_ 1)
          $T[phi_stmt_1983_merged_reqs] 
          $T[phi_stmt_1983_phi_mux_ack] 
          $T[phi_stmt_1983_phi_mux_ack_ps] 
          phi_stmt_1983_phi_mux_ack_ps <-& (phi_stmt_1983_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1983_update_completed_)
          $T[R_ZERO_33_1985_sample_start__ps] 
          $T[R_ZERO_33_1985_sample_completed__ps] 
          $T[R_ZERO_33_1985_update_start__ps] 
          $T[R_ZERO_33_1985_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1985_sample_start_] 
          $T[R_ZERO_33_1985_sample_completed_] 
          R_ZERO_33_1985_sample_completed_ <-& (R_ZERO_33_1985_sample_start_)
          $T[R_ZERO_33_1985_update_start_] 
          $T [R_ZERO_33_1985_update_completed_] $delay 
          R_ZERO_33_1985_update_completed_ <-& (R_ZERO_33_1985_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1985_sample_start_ <-& (R_ZERO_33_1985_sample_start__ps)
          R_ZERO_33_1985_update_start_ <-& (R_ZERO_33_1985_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1985_sample_completed__ps <-& (R_ZERO_33_1985_sample_completed_)
          R_ZERO_33_1985_update_completed__ps <-& (R_ZERO_33_1985_update_completed_)
          $T[RPIPE_noblock_obuf_3_4_1987_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1987_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_4_1987_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1987_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_4
          $T[RPIPE_noblock_obuf_3_4_1987_sample_start_] 
          $T[RPIPE_noblock_obuf_3_4_1987_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_4_1987_update_start_] 
          $T[RPIPE_noblock_obuf_3_4_1987_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_4_1987 with guard R_read_from_3_1986
          // root phi_stmt_1983 not in visited_elements
          // root phi_stmt_1988 not in visited_elements
          // root phi_stmt_1993 not in visited_elements
          // root phi_stmt_2001 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_4_1987_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_4_1987_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_4_1987_sample_start_ &-> (RPIPE_noblock_obuf_3_4_1987_Sample)
          RPIPE_noblock_obuf_3_4_1987_sample_completed_ <-& (RPIPE_noblock_obuf_3_4_1987_Sample)
          RPIPE_noblock_obuf_3_4_1987_update_start_ <-& (RPIPE_noblock_obuf_3_4_1987_sample_completed_)
          RPIPE_noblock_obuf_3_4_1987_update_start_ &-> (RPIPE_noblock_obuf_3_4_1987_Update)
          RPIPE_noblock_obuf_3_4_1987_update_completed_ <-& (RPIPE_noblock_obuf_3_4_1987_Update)
          RPIPE_noblock_obuf_3_4_1987_sample_start_ o<-& (RPIPE_noblock_obuf_3_4_1987_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_4_1987_sample_start_ <-& (RPIPE_noblock_obuf_3_4_1987_sample_start__ps)
          RPIPE_noblock_obuf_3_4_1987_update_start_ <-& (RPIPE_noblock_obuf_3_4_1987_update_start__ps)
          // RAW reenables for noblock_obuf_3_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_4_1987_sample_completed__ps <-& (RPIPE_noblock_obuf_3_4_1987_sample_completed_)
          RPIPE_noblock_obuf_3_4_1987_update_completed__ps <-& (RPIPE_noblock_obuf_3_4_1987_update_completed_)
          $phisequencer [ phi_stmt_1983_phi_seq] : 
          phi_stmt_1983_entry_trigger R_ZERO_33_1985_sample_start__ps R_ZERO_33_1985_sample_completed__ps R_ZERO_33_1985_update_start__ps R_ZERO_33_1985_update_completed__ps phi_stmt_1983_loopback_trigger RPIPE_noblock_obuf_3_4_1987_sample_start__ps RPIPE_noblock_obuf_3_4_1987_sample_completed__ps RPIPE_noblock_obuf_3_4_1987_update_start__ps RPIPE_noblock_obuf_3_4_1987_update_completed__ps :
          phi_stmt_1983_sample_start__ps phi_stmt_1983_sample_completed__ps phi_stmt_1983_update_start__ps phi_stmt_1983_update_completed__ps :
          phi_stmt_1983_entry_sample_req_ps phi_stmt_1983_loopback_sample_req_ps : 
          phi_stmt_1983_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1983
          // start:  multi-source PHI statement phi_stmt_1988
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1988_sample_start_] 
          $T[phi_stmt_1988_sample_completed_] 
          $T[phi_stmt_1988_update_start_] 
          $T[phi_stmt_1988_update_completed_] 
          $T[phi_stmt_1988_sample_start__ps] 
          phi_stmt_1988_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1988_sample_completed__ps] 
          phi_stmt_1988_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1988_update_start__ps] 
          phi_stmt_1988_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1988_update_completed__ps] 
          phi_stmt_1988_update_completed_ <-& (phi_stmt_1988_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1988_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1988_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1988_update_start_)
          $T[phi_stmt_1988_loopback_trigger] 
          phi_stmt_1988_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1988_loopback_sample_req] 
          $T[phi_stmt_1988_loopback_sample_req_ps] 
          phi_stmt_1988_loopback_sample_req <-& (phi_stmt_1988_loopback_sample_req_ps)
          phi_stmt_1988_loopback_sample_req &-> ($null)
          $T[phi_stmt_1988_entry_trigger] 
          phi_stmt_1988_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1988_entry_sample_req] 
          $T[phi_stmt_1988_entry_sample_req_ps] 
          phi_stmt_1988_entry_sample_req <-& (phi_stmt_1988_entry_sample_req_ps)
          phi_stmt_1988_entry_sample_req &-> ($null)
          phi_stmt_1988_update_start_ o<-& (phi_stmt_1988_update_completed_ 0)
          phi_stmt_1988_sample_start_ o<-& (phi_stmt_1988_sample_completed_ 1)
          $T[phi_stmt_1988_merged_reqs] 
          $T[phi_stmt_1988_phi_mux_ack] 
          $T[phi_stmt_1988_phi_mux_ack_ps] 
          phi_stmt_1988_phi_mux_ack_ps <-& (phi_stmt_1988_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1988_update_completed_)
          $T[R_ZERO_33_1990_sample_start__ps] 
          $T[R_ZERO_33_1990_sample_completed__ps] 
          $T[R_ZERO_33_1990_update_start__ps] 
          $T[R_ZERO_33_1990_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1990_sample_start_] 
          $T[R_ZERO_33_1990_sample_completed_] 
          R_ZERO_33_1990_sample_completed_ <-& (R_ZERO_33_1990_sample_start_)
          $T[R_ZERO_33_1990_update_start_] 
          $T [R_ZERO_33_1990_update_completed_] $delay 
          R_ZERO_33_1990_update_completed_ <-& (R_ZERO_33_1990_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1990_sample_start_ <-& (R_ZERO_33_1990_sample_start__ps)
          R_ZERO_33_1990_update_start_ <-& (R_ZERO_33_1990_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1990_sample_completed__ps <-& (R_ZERO_33_1990_sample_completed_)
          R_ZERO_33_1990_update_completed__ps <-& (R_ZERO_33_1990_update_completed_)
          $T[RPIPE_noblock_obuf_4_4_1992_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1992_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_4_1992_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1992_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_4
          $T[RPIPE_noblock_obuf_4_4_1992_sample_start_] 
          $T[RPIPE_noblock_obuf_4_4_1992_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_4_1992_update_start_] 
          $T[RPIPE_noblock_obuf_4_4_1992_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_4_1992 with guard R_read_from_4_1991
          // root phi_stmt_1988 not in visited_elements
          // root phi_stmt_1993 not in visited_elements
          // root phi_stmt_2001 not in visited_elements
          // Guard backward dependency for pipe read 
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_4_1992_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_4_1992_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_4_1992_sample_start_ &-> (RPIPE_noblock_obuf_4_4_1992_Sample)
          RPIPE_noblock_obuf_4_4_1992_sample_completed_ <-& (RPIPE_noblock_obuf_4_4_1992_Sample)
          RPIPE_noblock_obuf_4_4_1992_update_start_ <-& (RPIPE_noblock_obuf_4_4_1992_sample_completed_)
          RPIPE_noblock_obuf_4_4_1992_update_start_ &-> (RPIPE_noblock_obuf_4_4_1992_Update)
          RPIPE_noblock_obuf_4_4_1992_update_completed_ <-& (RPIPE_noblock_obuf_4_4_1992_Update)
          RPIPE_noblock_obuf_4_4_1992_sample_start_ o<-& (RPIPE_noblock_obuf_4_4_1992_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_4_1992_sample_start_ <-& (RPIPE_noblock_obuf_4_4_1992_sample_start__ps)
          RPIPE_noblock_obuf_4_4_1992_update_start_ <-& (RPIPE_noblock_obuf_4_4_1992_update_start__ps)
          // RAW reenables for noblock_obuf_4_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_4_1992_sample_completed__ps <-& (RPIPE_noblock_obuf_4_4_1992_sample_completed_)
          RPIPE_noblock_obuf_4_4_1992_update_completed__ps <-& (RPIPE_noblock_obuf_4_4_1992_update_completed_)
          $phisequencer [ phi_stmt_1988_phi_seq] : 
          phi_stmt_1988_entry_trigger R_ZERO_33_1990_sample_start__ps R_ZERO_33_1990_sample_completed__ps R_ZERO_33_1990_update_start__ps R_ZERO_33_1990_update_completed__ps phi_stmt_1988_loopback_trigger RPIPE_noblock_obuf_4_4_1992_sample_start__ps RPIPE_noblock_obuf_4_4_1992_sample_completed__ps RPIPE_noblock_obuf_4_4_1992_update_start__ps RPIPE_noblock_obuf_4_4_1992_update_completed__ps :
          phi_stmt_1988_sample_start__ps phi_stmt_1988_sample_completed__ps phi_stmt_1988_update_start__ps phi_stmt_1988_update_completed__ps :
          phi_stmt_1988_entry_sample_req_ps phi_stmt_1988_loopback_sample_req_ps : 
          phi_stmt_1988_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1988
          // start:  multi-source PHI statement phi_stmt_1993
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1993_sample_start_] 
          $T[phi_stmt_1993_sample_completed_] 
          $T[phi_stmt_1993_update_start_] 
          $T[phi_stmt_1993_update_completed_] 
          $T[phi_stmt_1993_sample_start__ps] 
          phi_stmt_1993_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1993_sample_completed__ps] 
          phi_stmt_1993_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1993_update_start__ps] 
          phi_stmt_1993_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1993_update_completed__ps] 
          phi_stmt_1993_update_completed_ <-& (phi_stmt_1993_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1993_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1993_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1993_update_start_)
          $T[phi_stmt_1993_loopback_trigger] 
          phi_stmt_1993_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1993_loopback_sample_req] 
          $T[phi_stmt_1993_loopback_sample_req_ps] 
          phi_stmt_1993_loopback_sample_req <-& (phi_stmt_1993_loopback_sample_req_ps)
          phi_stmt_1993_loopback_sample_req &-> ($null)
          $T[phi_stmt_1993_entry_trigger] 
          phi_stmt_1993_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1993_entry_sample_req] 
          $T[phi_stmt_1993_entry_sample_req_ps] 
          phi_stmt_1993_entry_sample_req <-& (phi_stmt_1993_entry_sample_req_ps)
          phi_stmt_1993_entry_sample_req &-> ($null)
          phi_stmt_1993_update_start_ o<-& (phi_stmt_1993_update_completed_ 0)
          phi_stmt_1993_sample_start_ o<-& (phi_stmt_1993_sample_completed_ 1)
          $T[phi_stmt_1993_merged_reqs] 
          $T[phi_stmt_1993_phi_mux_ack] 
          $T[phi_stmt_1993_phi_mux_ack_ps] 
          phi_stmt_1993_phi_mux_ack_ps <-& (phi_stmt_1993_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1993_update_completed_)
          $T[R_ZERO_3_1995_sample_start__ps] 
          $T[R_ZERO_3_1995_sample_completed__ps] 
          $T[R_ZERO_3_1995_update_start__ps] 
          $T[R_ZERO_3_1995_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1995_sample_start_] 
          $T[R_ZERO_3_1995_sample_completed_] 
          R_ZERO_3_1995_sample_completed_ <-& (R_ZERO_3_1995_sample_start_)
          $T[R_ZERO_3_1995_update_start_] 
          $T [R_ZERO_3_1995_update_completed_] $delay 
          R_ZERO_3_1995_update_completed_ <-& (R_ZERO_3_1995_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1995_sample_start_ <-& (R_ZERO_3_1995_sample_start__ps)
          R_ZERO_3_1995_update_start_ <-& (R_ZERO_3_1995_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1995_sample_completed__ps <-& (R_ZERO_3_1995_sample_completed_)
          R_ZERO_3_1995_update_completed__ps <-& (R_ZERO_3_1995_update_completed_)
          $T[R_next_active_packet_1996_sample_start__ps] 
          $T[R_next_active_packet_1996_sample_completed__ps] 
          $T[R_next_active_packet_1996_update_start__ps] 
          $T[R_next_active_packet_1996_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1996_sample_start_] 
          $T[R_next_active_packet_1996_sample_completed_] 
          $T[R_next_active_packet_1996_update_start_] 
          $T[R_next_active_packet_1996_update_completed_] 
          ;;[R_next_active_packet_1996_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1996_sample_start_ &-> (R_next_active_packet_1996_Sample)
          R_next_active_packet_1996_sample_completed_ <-& (R_next_active_packet_1996_Sample)
          ;;[R_next_active_packet_1996_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1996_update_start_ &-> (R_next_active_packet_1996_Update)
          R_next_active_packet_1996_update_completed_ <-& (R_next_active_packet_1996_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1996_sample_start_ <-& (R_next_active_packet_1996_sample_start__ps)
          R_next_active_packet_1996_update_start_ <-& (R_next_active_packet_1996_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1996_sample_completed__ps <-& (R_next_active_packet_1996_sample_completed_)
          R_next_active_packet_1996_update_completed__ps <-& (R_next_active_packet_1996_update_completed_)
          $phisequencer [ phi_stmt_1993_phi_seq] : 
          phi_stmt_1993_entry_trigger R_ZERO_3_1995_sample_start__ps R_ZERO_3_1995_sample_completed__ps R_ZERO_3_1995_update_start__ps R_ZERO_3_1995_update_completed__ps phi_stmt_1993_loopback_trigger R_next_active_packet_1996_sample_start__ps R_next_active_packet_1996_sample_completed__ps R_next_active_packet_1996_update_start__ps R_next_active_packet_1996_update_completed__ps :
          phi_stmt_1993_sample_start__ps phi_stmt_1993_sample_completed__ps phi_stmt_1993_update_start__ps phi_stmt_1993_update_completed__ps :
          phi_stmt_1993_entry_sample_req_ps phi_stmt_1993_loopback_sample_req_ps : 
          phi_stmt_1993_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1993
          // start:  multi-source PHI statement phi_stmt_1997
          // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1997_sample_start_] 
          $T[phi_stmt_1997_sample_completed_] 
          $T[phi_stmt_1997_update_start_] 
          $T[phi_stmt_1997_update_completed_] 
          $T[phi_stmt_1997_sample_start__ps] 
          phi_stmt_1997_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1997_sample_completed__ps] 
          phi_stmt_1997_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1997_update_start__ps] 
          phi_stmt_1997_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1997_update_completed__ps] 
          phi_stmt_1997_update_completed_ <-& (phi_stmt_1997_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1997_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1997_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1997_update_start_)
          $T[phi_stmt_1997_loopback_trigger] 
          phi_stmt_1997_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1997_loopback_sample_req] 
          $T[phi_stmt_1997_loopback_sample_req_ps] 
          phi_stmt_1997_loopback_sample_req <-& (phi_stmt_1997_loopback_sample_req_ps)
          phi_stmt_1997_loopback_sample_req &-> ($null)
          $T[phi_stmt_1997_entry_trigger] 
          phi_stmt_1997_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1997_entry_sample_req] 
          $T[phi_stmt_1997_entry_sample_req_ps] 
          phi_stmt_1997_entry_sample_req <-& (phi_stmt_1997_entry_sample_req_ps)
          phi_stmt_1997_entry_sample_req &-> ($null)
          phi_stmt_1997_update_start_ o<-& (phi_stmt_1997_update_completed_ 0)
          phi_stmt_1997_sample_start_ o<-& (phi_stmt_1997_sample_completed_ 1)
          $T[phi_stmt_1997_merged_reqs] 
          $T[phi_stmt_1997_phi_mux_ack] 
          $T[phi_stmt_1997_phi_mux_ack_ps] 
          phi_stmt_1997_phi_mux_ack_ps <-& (phi_stmt_1997_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1997_update_completed_)
          $T[R_ZERO_8_1999_sample_start__ps] 
          $T[R_ZERO_8_1999_sample_completed__ps] 
          $T[R_ZERO_8_1999_update_start__ps] 
          $T[R_ZERO_8_1999_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_8_1999_sample_start_] 
          $T[R_ZERO_8_1999_sample_completed_] 
          R_ZERO_8_1999_sample_completed_ <-& (R_ZERO_8_1999_sample_start_)
          $T[R_ZERO_8_1999_update_start_] 
          $T [R_ZERO_8_1999_update_completed_] $delay 
          R_ZERO_8_1999_update_completed_ <-& (R_ZERO_8_1999_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_8_1999_sample_start_ <-& (R_ZERO_8_1999_sample_start__ps)
          R_ZERO_8_1999_update_start_ <-& (R_ZERO_8_1999_update_start__ps)
          // Phi complete dependency.
          R_ZERO_8_1999_sample_completed__ps <-& (R_ZERO_8_1999_sample_completed_)
          R_ZERO_8_1999_update_completed__ps <-& (R_ZERO_8_1999_update_completed_)
          $T[R_next_active_packet_length_2000_sample_start__ps] 
          $T[R_next_active_packet_length_2000_sample_completed__ps] 
          $T[R_next_active_packet_length_2000_update_start__ps] 
          $T[R_next_active_packet_length_2000_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_length_2000_sample_start_] 
          $T[R_next_active_packet_length_2000_sample_completed_] 
          $T[R_next_active_packet_length_2000_update_start_] 
          $T[R_next_active_packet_length_2000_update_completed_] 
          ;;[R_next_active_packet_length_2000_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_length_2000_sample_start_ &-> (R_next_active_packet_length_2000_Sample)
          R_next_active_packet_length_2000_sample_completed_ <-& (R_next_active_packet_length_2000_Sample)
          ;;[R_next_active_packet_length_2000_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_length_2000_update_start_ &-> (R_next_active_packet_length_2000_Update)
          R_next_active_packet_length_2000_update_completed_ <-& (R_next_active_packet_length_2000_Update)
          // RAW reenables for next_active_packet_length
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_length_2000_sample_start_ <-& (R_next_active_packet_length_2000_sample_start__ps)
          R_next_active_packet_length_2000_update_start_ <-& (R_next_active_packet_length_2000_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_length_2000_sample_completed__ps <-& (R_next_active_packet_length_2000_sample_completed_)
          R_next_active_packet_length_2000_update_completed__ps <-& (R_next_active_packet_length_2000_update_completed_)
          $phisequencer [ phi_stmt_1997_phi_seq] : 
          phi_stmt_1997_entry_trigger R_ZERO_8_1999_sample_start__ps R_ZERO_8_1999_sample_completed__ps R_ZERO_8_1999_update_start__ps R_ZERO_8_1999_update_completed__ps phi_stmt_1997_loopback_trigger R_next_active_packet_length_2000_sample_start__ps R_next_active_packet_length_2000_sample_completed__ps R_next_active_packet_length_2000_update_start__ps R_next_active_packet_length_2000_update_completed__ps :
          phi_stmt_1997_sample_start__ps phi_stmt_1997_sample_completed__ps phi_stmt_1997_update_start__ps phi_stmt_1997_update_completed__ps :
          phi_stmt_1997_entry_sample_req_ps phi_stmt_1997_loopback_sample_req_ps : 
          phi_stmt_1997_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1997
          // start:  multi-source PHI statement phi_stmt_2001
          // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
          // type of target is $uint<2>
          $T[phi_stmt_2001_sample_start_] 
          $T[phi_stmt_2001_sample_completed_] 
          $T[phi_stmt_2001_update_start_] 
          $T[phi_stmt_2001_update_completed_] 
          $T[phi_stmt_2001_sample_start__ps] 
          phi_stmt_2001_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2001_sample_completed__ps] 
          phi_stmt_2001_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2001_update_start__ps] 
          phi_stmt_2001_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2001_update_completed__ps] 
          phi_stmt_2001_update_completed_ <-& (phi_stmt_2001_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2001_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2001_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2001_update_start_)
          $T[phi_stmt_2001_loopback_trigger] 
          phi_stmt_2001_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2001_loopback_sample_req] 
          $T[phi_stmt_2001_loopback_sample_req_ps] 
          phi_stmt_2001_loopback_sample_req <-& (phi_stmt_2001_loopback_sample_req_ps)
          phi_stmt_2001_loopback_sample_req &-> ($null)
          $T[phi_stmt_2001_entry_trigger] 
          phi_stmt_2001_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2001_entry_sample_req] 
          $T[phi_stmt_2001_entry_sample_req_ps] 
          phi_stmt_2001_entry_sample_req <-& (phi_stmt_2001_entry_sample_req_ps)
          phi_stmt_2001_entry_sample_req &-> ($null)
          phi_stmt_2001_update_start_ o<-& (phi_stmt_2001_update_completed_ 0)
          phi_stmt_2001_sample_start_ o<-& (phi_stmt_2001_sample_completed_ 1)
          $T[phi_stmt_2001_merged_reqs] 
          $T[phi_stmt_2001_phi_mux_ack] 
          $T[phi_stmt_2001_phi_mux_ack_ps] 
          phi_stmt_2001_phi_mux_ack_ps <-& (phi_stmt_2001_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2001_update_completed_)
          $T[R_ZERO_2_2003_sample_start__ps] 
          $T[R_ZERO_2_2003_sample_completed__ps] 
          $T[R_ZERO_2_2003_update_start__ps] 
          $T[R_ZERO_2_2003_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_2_2003_sample_start_] 
          $T[R_ZERO_2_2003_sample_completed_] 
          R_ZERO_2_2003_sample_completed_ <-& (R_ZERO_2_2003_sample_start_)
          $T[R_ZERO_2_2003_update_start_] 
          $T [R_ZERO_2_2003_update_completed_] $delay 
          R_ZERO_2_2003_update_completed_ <-& (R_ZERO_2_2003_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_2_2003_sample_start_ <-& (R_ZERO_2_2003_sample_start__ps)
          R_ZERO_2_2003_update_start_ <-& (R_ZERO_2_2003_update_start__ps)
          // Phi complete dependency.
          R_ZERO_2_2003_sample_completed__ps <-& (R_ZERO_2_2003_sample_completed_)
          R_ZERO_2_2003_update_completed__ps <-& (R_ZERO_2_2003_update_completed_)
          $T[R_next_priority_index_2004_sample_start__ps] 
          $T[R_next_priority_index_2004_sample_completed__ps] 
          $T[R_next_priority_index_2004_update_start__ps] 
          $T[R_next_priority_index_2004_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_priority_index_2004_sample_start_] 
          $T[R_next_priority_index_2004_sample_completed_] 
          $T[R_next_priority_index_2004_update_start_] 
          $T[R_next_priority_index_2004_update_completed_] 
          ;;[R_next_priority_index_2004_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_priority_index_2004_sample_start_ &-> (R_next_priority_index_2004_Sample)
          R_next_priority_index_2004_sample_completed_ <-& (R_next_priority_index_2004_Sample)
          ;;[R_next_priority_index_2004_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_priority_index_2004_update_start_ &-> (R_next_priority_index_2004_Update)
          R_next_priority_index_2004_update_completed_ <-& (R_next_priority_index_2004_Update)
          // RAW reenables for next_priority_index
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_priority_index_2004_sample_start_ <-& (R_next_priority_index_2004_sample_start__ps)
          R_next_priority_index_2004_update_start_ <-& (R_next_priority_index_2004_update_start__ps)
          // Phi complete dependency.
          R_next_priority_index_2004_sample_completed__ps <-& (R_next_priority_index_2004_sample_completed_)
          R_next_priority_index_2004_update_completed__ps <-& (R_next_priority_index_2004_update_completed_)
          $phisequencer [ phi_stmt_2001_phi_seq] : 
          phi_stmt_2001_entry_trigger R_ZERO_2_2003_sample_start__ps R_ZERO_2_2003_sample_completed__ps R_ZERO_2_2003_update_start__ps R_ZERO_2_2003_update_completed__ps phi_stmt_2001_loopback_trigger R_next_priority_index_2004_sample_start__ps R_next_priority_index_2004_sample_completed__ps R_next_priority_index_2004_update_start__ps R_next_priority_index_2004_update_completed__ps :
          phi_stmt_2001_sample_start__ps phi_stmt_2001_sample_completed__ps phi_stmt_2001_update_start__ps phi_stmt_2001_update_completed__ps :
          phi_stmt_2001_entry_sample_req_ps phi_stmt_2001_loopback_sample_req_ps : 
          phi_stmt_2001_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2001
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // start:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 488
          // volatile! 
          // Source expression
          // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
          // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
          // ( $mux read_from_1 0   _b0  ) 
          // read_from_1
          // ( $mux read_from_2 1   _b0  ) 
          // read_from_2
          // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
          // ( $mux read_from_3 2   _b0  ) 
          // read_from_3
          // ( $mux read_from_4 3   _b0  ) 
          // read_from_4
          // Target expression
          // (as target) senderPort
          // start: WAR dependencies for senderPort
          // done: WAR dependencies for senderPort
          // end:  			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
          // start: 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          //  file .Aa/switch2x2.opt.aa, line 489
          $T[call_stmt_2032_sample_start_] 
          $T[call_stmt_2032_sample_completed_] 
          $T[call_stmt_2032_update_start_] 
          $T[call_stmt_2032_update_completed_] 
          // Call input argument 0
          // senderPort
          // Call input argument 1
          // Call input argument 2
          // start: Forward dependencies from senderPort to transition call_stmt_2032_sample_start_
          call_stmt_2032_sample_start_ <-& (phi_stmt_1969_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_1973_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_1978_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_1983_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_1988_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_1993_update_completed_)
          call_stmt_2032_sample_start_ <-& (phi_stmt_2001_update_completed_)
          // done: Forward dependencies from senderPort to transition call_stmt_2032_sample_start_
          // RAW reenables for senderPort
          phi_stmt_1969_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_1973_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_1978_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_1983_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_1988_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_1993_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          phi_stmt_2001_update_start_ o<-& (call_stmt_2032_sample_completed_ 0)
          ;;[call_stmt_2032_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2032_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2032_sample_start_ &-> (call_stmt_2032_Sample)
          call_stmt_2032_sample_completed_ <-& (call_stmt_2032_Sample)
          call_stmt_2032_sample_completed_ &-> ($null)
          call_stmt_2032_update_start_ &-> (call_stmt_2032_Update)
          call_stmt_2032_update_completed_ <-& (call_stmt_2032_Update)
          // Call output argument 0
          // (as target) continue
          // self-release: 
          call_stmt_2032_sample_start_ o<-& (call_stmt_2032_sample_completed_ 1)
          $null &-> (call_stmt_2032_update_start_)
          call_stmt_2032_update_start_ o<-& (call_stmt_2032_update_completed_ 0)
          // start: WAR dependencies for continue
          // done: WAR dependencies for continue
          // end: 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 490
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 491
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 492
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 493
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 495
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // start:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  file .Aa/switch2x2.opt.aa, line 496
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // priority_index
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_priority_index
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_priority_index
          // WAR dependency: Read: next_priority_index before Write:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_priority_index
          // end:  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 497
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // start:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 498
          // volatile! 
          // Source expression
          // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
          // started_new_packet
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 15 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 15 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 15 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 15 8 ) 
          // pkt_4_e_word
          // active_packet_length
          // Target expression
          // (as target) next_active_packet_length
          // start: WAR dependencies for next_active_packet_length
          // WAR dependency: Read: next_active_packet_length before Write: 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet_length
          // end:  			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 499
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (next_active_packet_length - 1 )
          // next_active_packet_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 500
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 501
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 502
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 503
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 504
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch2x2.opt.aa, line 505
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch2x2.opt.aa, line 506
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_4
          $T[WPIPE_out_data_4_2257_sample_start_] 
          $T[WPIPE_out_data_4_2257_sample_completed_] 
          $T[WPIPE_out_data_4_2257_update_start_] 
          $T[WPIPE_out_data_4_2257_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_4_2257 with guard R_send_flag_2256
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1969_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1973_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1978_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1983_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1988_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1993_update_completed_)
          // Guard forward dependency 
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_2001_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1969_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1973_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1978_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1983_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1988_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1993_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_2001_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          ;;[WPIPE_out_data_4_2257_Sample] 
          {
            // pipe write sample-start out_data_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_4_2257_Update] 
          {
            // pipe write update (complete) out_data_4
            $T [req] $T [ack] 
          }
          WPIPE_out_data_4_2257_sample_start_ &-> (WPIPE_out_data_4_2257_Sample)
          WPIPE_out_data_4_2257_sample_completed_ <-& (WPIPE_out_data_4_2257_Sample)
          WPIPE_out_data_4_2257_update_start_ <-& (WPIPE_out_data_4_2257_sample_completed_)
          WPIPE_out_data_4_2257_update_start_ &-> (WPIPE_out_data_4_2257_Update)
          WPIPE_out_data_4_2257_update_completed_ <-& (WPIPE_out_data_4_2257_Update)
          WPIPE_out_data_4_2257_sample_start_ o<-& (WPIPE_out_data_4_2257_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_4_2257_sample_start_
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1969_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1973_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1978_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1983_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1988_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_1993_update_completed_)
          WPIPE_out_data_4_2257_sample_start_ <-& (phi_stmt_2001_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_4_2257_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1969_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1973_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1978_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1983_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1988_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_1993_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          phi_stmt_2001_update_start_ o<-& (WPIPE_out_data_4_2257_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  call_stmt_2032 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
          // pipe read/write dependencies for pipe out_data_4
          // read-dependencies for pipe out_data_4
          // write-dependencies for pipe out_data_4
          // signal write dependencies for out_data_4
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1967__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1967_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1967__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1967_loop_body : condition_evaluated
        $bind do_while_stmt_1967__entry__  => do_while_stmt_1967_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1967_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1967__exit__)
      }
      do_while_stmt_1967__entry__ |-> (do_while_stmt_1967)
      do_while_stmt_1967__exit__ <-| (do_while_stmt_1967)
      do_while_stmt_1967__entry__ <-| (branch_block_stmt_1966__entry__)
      do_while_stmt_1967__exit__ |-> (branch_block_stmt_1966__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 470
    // constant-object-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 466
    // constant-object-declarations for block %outputPort_4_Daemon
    //  file .Aa/switch2x2.opt.aa, line 461
    // constant-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 466
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 468
    // 1 
    $constant $W[konst_2270_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch2x2.opt.aa, line 470
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 471
    // ZERO_8
    $constant $W[R_ZERO_8_1971_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 473
    // ZERO_33
    $constant $W[R_ZERO_33_1975_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 475
    // ZERO_33
    $constant $W[R_ZERO_33_1980_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 477
    // ZERO_33
    $constant $W[R_ZERO_33_1985_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 479
    // ZERO_33
    $constant $W[R_ZERO_33_1990_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 481
    // ZERO_3
    $constant $W[R_ZERO_3_1995_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 483
    // ZERO_8
    $constant $W[R_ZERO_8_1999_wire_constant] : $int<8> := _b00000000// 0
    // constant-declarations for phi:  			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 485
    // ZERO_2
    $constant $W[R_ZERO_2_2003_wire_constant] : $int<2> := _b00// 0
    // ( $mux read_from_1 0   _b0  ) 
    // 0 
    $constant $W[konst_2008_wire_constant] : $int<8> := _b00000000// 0
    // _b0 
    $constant $W[konst_2009_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_2 1   _b0  ) 
    // 1 
    $constant $W[konst_2012_wire_constant] : $int<8> := _b00000001// 1
    // _b0 
    $constant $W[konst_2013_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_3 2   _b0  ) 
    // 2 
    $constant $W[konst_2017_wire_constant] : $int<8> := _b00000010// 2
    // _b0 
    $constant $W[konst_2018_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux read_from_4 3   _b0  ) 
    // 3 
    $constant $W[konst_2021_wire_constant] : $int<8> := _b00000011// 3
    // _b0 
    $constant $W[konst_2022_wire_constant] : $int<8> := _b00000000// 0
    // 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 489
    // 3 
    $constant $W[konst_2028_wire_constant] : $int<8> := _b00000011// 3
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_2030_wire_constant] : $int<1> := _b0// 0
    // 32 
    $constant $W[konst_2035_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_2040_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_2045_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_2050_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_2067_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_2070_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_2073_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_2076_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_2080_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_2083_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_2086_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_2089_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 496
    // 0 
    $constant $W[konst_2106_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_2109_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    // 1 
    $constant $W[konst_2116_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_2120_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    // 2 
    $constant $W[konst_2123_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_2127_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    // 3 
    $constant $W[konst_2131_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_2135_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    // 4 
    $constant $W[konst_2138_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_2142_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_2152_wire_constant] : $int<8> := _b00000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_2156_wire_constant] : $int<8> := _b00000001// 1
    // 1 
    $constant $W[konst_2166_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_2174_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_2182_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_2190_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    // 1 
    $constant $W[konst_2196_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_2200_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    // 2 
    $constant $W[konst_2203_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_2207_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    // 3 
    $constant $W[konst_2211_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_2215_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    // 4 
    $constant $W[konst_2218_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_2222_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_2229_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_2232_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_2235_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_2238_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_2242_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_2245_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_2248_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_2251_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 466
    // do-while statement  
    //  file .Aa/switch2x2.opt.aa, line 468
    // merge-statement  
    //  file .Aa/switch2x2.opt.aa, line 470
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 471
    $W[next_down_counter_2161_1972_buffered] : $int<8>
    // down_counter
    $W[down_counter_1969] : $int<8>
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 473
    // noblock_obuf_1_4
    $W[RPIPE_noblock_obuf_1_4_1977_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1973] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 475
    // noblock_obuf_2_4
    $W[RPIPE_noblock_obuf_2_4_1982_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1978] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 477
    // noblock_obuf_3_4
    $W[RPIPE_noblock_obuf_3_4_1987_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1983] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 479
    // noblock_obuf_4_4
    $W[RPIPE_noblock_obuf_4_4_1992_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1988] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 481
    $W[next_active_packet_2103_1996_buffered] : $int<3>
    // active_packet
    $W[active_packet_1993] : $int<3>
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 483
    $W[next_active_packet_length_2148_2000_buffered] : $int<8>
    // active_packet_length
    $W[active_packet_length_1997] : $int<8>
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 485
    $W[next_priority_index_2103_2004_buffered] : $int<2>
    // priority_index
    $W[priority_index_2001] : $int<2>
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 488
    // ( $mux read_from_1 0   _b0  ) 
    $intermediate $W[MUX_2010_wire] : $int<8>
    // ( $mux read_from_2 1   _b0  ) 
    $intermediate $W[MUX_2014_wire] : $int<8>
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    $intermediate $W[OR_u8_u8_2015_wire] : $int<8>
    // ( $mux read_from_3 2   _b0  ) 
    $intermediate $W[MUX_2019_wire] : $int<8>
    // ( $mux read_from_4 3   _b0  ) 
    $intermediate $W[MUX_2023_wire] : $int<8>
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    $intermediate $W[OR_u8_u8_2024_wire] : $int<8>
    // senderPort
    $W[senderPort_2026] : $int<8>
    // 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 489
    // continue
    $W[continue_2032] : $int<1>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 490
    // p1_valid
    $W[p1_valid_2037] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 491
    // p2_valid
    $W[p2_valid_2042] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 492
    // p3_valid
    $W[p3_valid_2047] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 493
    // p4_valid
    $W[p4_valid_2052] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 495
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_2068_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_2071_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_2074_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_2077_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_2078_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_2081_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_2084_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_2087_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_2090_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_2091_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_2093] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 496
    // next_active_packet
    $W[next_active_packet_2103] : $int<3>
    // next_priority_index
    $W[next_priority_index_2103] : $int<2>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 497
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_2107_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u8_u1_2110_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_2112] : $int<1>
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 498
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_2117_wire] : $int<1>
    // ( $slice pkt_1_e_word 15 8 ) 
    $intermediate $W[slice_2119_wire] : $int<8>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_2121_wire] : $int<8>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_2124_wire] : $int<1>
    // ( $slice pkt_2_e_word 15 8 ) 
    $intermediate $W[slice_2126_wire] : $int<8>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_2128_wire] : $int<8>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_2129_wire] : $int<8>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_2132_wire] : $int<1>
    // ( $slice pkt_3_e_word 15 8 ) 
    $intermediate $W[slice_2134_wire] : $int<8>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_2136_wire] : $int<8>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_2139_wire] : $int<1>
    // ( $slice pkt_4_e_word 15 8 ) 
    $intermediate $W[slice_2141_wire] : $int<8>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    $intermediate $W[MUX_2143_wire] : $int<8>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    $intermediate $W[OR_u8_u8_2144_wire] : $int<8>
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    $intermediate $W[OR_u8_u8_2145_wire] : $int<8>
    // next_active_packet_length
    $W[next_active_packet_length_2148] : $int<8>
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 499
    // (next_active_packet_length - 1 )
    $intermediate $W[SUB_u8_u8_2153_wire] : $int<8>
    // (down_counter - 1 )
    $intermediate $W[SUB_u8_u8_2157_wire] : $int<8>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_2159_wire] : $int<8>
    // next_down_counter
    $W[next_down_counter_2161] : $int<8>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 500
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_2164_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_2167_wire] : $int<1>
    // read_from_1
    $W[read_from_1_2169] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 501
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_2172_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_2175_wire] : $int<1>
    // read_from_2
    $W[read_from_2_2177] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 502
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_2180_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_2183_wire] : $int<1>
    // read_from_3
    $W[read_from_3_2185] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 503
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_2188_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_2191_wire] : $int<1>
    // read_from_4
    $W[read_from_4_2193] : $int<1>
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 504
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_2197_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_2199_wire] : $int<32>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_2201_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_2204_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_2206_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_2208_wire] : $int<32>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_2209_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_2212_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_2214_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_2216_wire] : $int<32>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_2219_wire] : $int<1>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_2221_wire] : $int<32>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    $intermediate $W[MUX_2223_wire] : $int<32>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    $intermediate $W[OR_u32_u32_2224_wire] : $int<32>
    // data_to_out
    $W[data_to_out_2226] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 505
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_2230_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_2233_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_2236_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_2239_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_2240_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_2243_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_2246_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_2249_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_2252_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_2253_wire] : $int<1>
    // send_flag
    $W[send_flag_2255] : $int<1>
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 506
    // out_data_4
    // datapath-instances for block %outputPort_4_Daemon%loop
    //  file .Aa/switch2x2.opt.aa, line 466
    // datapath-instances for do-while  
    //  file .Aa/switch2x2.opt.aa, line 468
    ==0? [do_while_stmt_1967_branch] (konst_2270_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch2x2.opt.aa, line 470
    // 			$phi down_counter := 			  ZERO_8 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 471
    # := [next_down_counter_2161_1972_buf] (next_down_counter_2161) (next_down_counter_2161_1972_buffered)   $in_phi    $fullrate
    $buffering $out next_down_counter_2161_1972_buf next_down_counter_2161_1972_buffered  1
    # $phi [phi_stmt_1969] (R_ZERO_8_1971_wire_constant next_down_counter_2161_1972_buffered) ( down_counter_1969 ) $fullrate
    // $buffering  $out phi_stmt_1969 down_counter_1969 2
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 473
    // noblock_obuf_1_4
    $ioport $in [RPIPE_noblock_obuf_1_4_1977_inst] (noblock_obuf_1_4) (RPIPE_noblock_obuf_1_4_1977_wire) $guard ( read_from_1_2169 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_4_1977_inst RPIPE_noblock_obuf_1_4_1977_wire 1
    # $phi [phi_stmt_1973] (R_ZERO_33_1975_wire_constant RPIPE_noblock_obuf_1_4_1977_wire) ( pkt_1_e_word_1973 ) $fullrate
    // $buffering  $out phi_stmt_1973 pkt_1_e_word_1973 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 475
    // noblock_obuf_2_4
    $ioport $in [RPIPE_noblock_obuf_2_4_1982_inst] (noblock_obuf_2_4) (RPIPE_noblock_obuf_2_4_1982_wire) $guard ( read_from_2_2177 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_4_1982_inst RPIPE_noblock_obuf_2_4_1982_wire 1
    # $phi [phi_stmt_1978] (R_ZERO_33_1980_wire_constant RPIPE_noblock_obuf_2_4_1982_wire) ( pkt_2_e_word_1978 ) $fullrate
    // $buffering  $out phi_stmt_1978 pkt_2_e_word_1978 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 477
    // noblock_obuf_3_4
    $ioport $in [RPIPE_noblock_obuf_3_4_1987_inst] (noblock_obuf_3_4) (RPIPE_noblock_obuf_3_4_1987_wire) $guard ( read_from_3_2185 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_4_1987_inst RPIPE_noblock_obuf_3_4_1987_wire 1
    # $phi [phi_stmt_1983] (R_ZERO_33_1985_wire_constant RPIPE_noblock_obuf_3_4_1987_wire) ( pkt_3_e_word_1983 ) $fullrate
    // $buffering  $out phi_stmt_1983 pkt_3_e_word_1983 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch2x2.opt.aa, line 479
    // noblock_obuf_4_4
    $ioport $in [RPIPE_noblock_obuf_4_4_1992_inst] (noblock_obuf_4_4) (RPIPE_noblock_obuf_4_4_1992_wire) $guard ( read_from_4_2193 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_4_1992_inst RPIPE_noblock_obuf_4_4_1992_wire 1
    # $phi [phi_stmt_1988] (R_ZERO_33_1990_wire_constant RPIPE_noblock_obuf_4_4_1992_wire) ( pkt_4_e_word_1988 ) $fullrate
    // $buffering  $out phi_stmt_1988 pkt_4_e_word_1988 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch2x2.opt.aa, line 481
    # := [next_active_packet_2103_1996_buf] (next_active_packet_2103) (next_active_packet_2103_1996_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_2103_1996_buf next_active_packet_2103_1996_buffered  1
    # $phi [phi_stmt_1993] (R_ZERO_3_1995_wire_constant next_active_packet_2103_1996_buffered) ( active_packet_1993 ) $fullrate
    // $buffering  $out phi_stmt_1993 active_packet_1993 2
    // 			$phi active_packet_length := 			  ZERO_8 $on   $entry 			  next_active_packet_length $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch2x2.opt.aa, line 483
    # := [next_active_packet_length_2148_2000_buf] (next_active_packet_length_2148) (next_active_packet_length_2148_2000_buffered)   $in_phi    $fullrate
    $buffering $out next_active_packet_length_2148_2000_buf next_active_packet_length_2148_2000_buffered  1
    # $phi [phi_stmt_1997] (R_ZERO_8_1999_wire_constant next_active_packet_length_2148_2000_buffered) ( active_packet_length_1997 ) $fullrate
    // $buffering  $out phi_stmt_1997 active_packet_length_1997 2
    // 			$phi priority_index := 			  ZERO_2 $on   $entry 			  next_priority_index $on   $loopback 
    // type of target is $uint<2>
    //  file .Aa/switch2x2.opt.aa, line 485
    # := [next_priority_index_2103_2004_buf] (next_priority_index_2103) (next_priority_index_2103_2004_buffered)   $in_phi    $fullrate
    $buffering $out next_priority_index_2103_2004_buf next_priority_index_2103_2004_buffered  1
    # $phi [phi_stmt_2001] (R_ZERO_2_2003_wire_constant next_priority_index_2103_2004_buffered) ( priority_index_2001 ) $fullrate
    // $buffering  $out phi_stmt_2001 priority_index_2001 2
    // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 488
    // ( $mux read_from_1 0   _b0  ) 
    ? [MUX_2010_inst] (read_from_1_2169 konst_2008_wire_constant konst_2009_wire_constant) (MUX_2010_wire)  $flowthrough
    // ( $mux read_from_2 1   _b0  ) 
    ? [MUX_2014_inst] (read_from_2_2177 konst_2012_wire_constant konst_2013_wire_constant) (MUX_2014_wire)  $flowthrough
    // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
    |[OR_u8_u8_2015_inst] (MUX_2010_wire MUX_2014_wire) (OR_u8_u8_2015_wire)   $flowthrough 
    $delay OR_u8_u8_2015_inst 0
    // ( $mux read_from_3 2   _b0  ) 
    ? [MUX_2019_inst] (read_from_3_2185 konst_2017_wire_constant konst_2018_wire_constant) (MUX_2019_wire)  $flowthrough
    // ( $mux read_from_4 3   _b0  ) 
    ? [MUX_2023_inst] (read_from_4_2193 konst_2021_wire_constant konst_2022_wire_constant) (MUX_2023_wire)  $flowthrough
    // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
    |[OR_u8_u8_2024_inst] (MUX_2019_wire MUX_2023_wire) (OR_u8_u8_2024_wire)   $flowthrough 
    $delay OR_u8_u8_2024_inst 0
    // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
    |[OR_u8_u8_2025_inst] (OR_u8_u8_2015_wire OR_u8_u8_2024_wire) (senderPort_2026)   $flowthrough 
    $delay OR_u8_u8_2025_inst 0
    // 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
    //  file .Aa/switch2x2.opt.aa, line 489
    $call [call_stmt_2032_call] $module updateCounter(senderPort_2026 konst_2028_wire_constant type_cast_2030_wire_constant) (continue_2032)   $fullrate
    $delay call_stmt_2032_call 4
    $buffering  $in call_stmt_2032_call senderPort_2026 1
    $buffering  $in call_stmt_2032_call konst_2028_wire_constant 1
    $buffering  $in call_stmt_2032_call type_cast_2030_wire_constant 1
    $buffering  $out call_stmt_2032_call continue_2032 1
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 490
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_2036_inst] (pkt_1_e_word_1973 konst_2035_wire_constant) (p1_valid_2037)   $flowthrough 
    $delay BITSEL_u33_u1_2036_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 491
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_2041_inst] (pkt_2_e_word_1978 konst_2040_wire_constant) (p2_valid_2042)   $flowthrough 
    $delay BITSEL_u33_u1_2041_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 492
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_2046_inst] (pkt_3_e_word_1983 konst_2045_wire_constant) (p3_valid_2047)   $flowthrough 
    $delay BITSEL_u33_u1_2046_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 493
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_2051_inst] (pkt_4_e_word_1988 konst_2050_wire_constant) (p4_valid_2052)   $flowthrough 
    $delay BITSEL_u33_u1_2051_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 495
    // (active_packet == 1 )
    ==[EQ_u3_u1_2068_inst] (active_packet_1993 konst_2067_wire_constant) (EQ_u3_u1_2068_wire)   $flowthrough 
    $delay EQ_u3_u1_2068_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_2071_inst] (EQ_u3_u1_2068_wire p1_valid_2037 konst_2070_wire_constant) (MUX_2071_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_2074_inst] (active_packet_1993 konst_2073_wire_constant) (EQ_u3_u1_2074_wire)   $flowthrough 
    $delay EQ_u3_u1_2074_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_2077_inst] (EQ_u3_u1_2074_wire p2_valid_2042 konst_2076_wire_constant) (MUX_2077_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_2078_inst] (MUX_2071_wire MUX_2077_wire) (OR_u1_u1_2078_wire)   $flowthrough 
    $delay OR_u1_u1_2078_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_2081_inst] (active_packet_1993 konst_2080_wire_constant) (EQ_u3_u1_2081_wire)   $flowthrough 
    $delay EQ_u3_u1_2081_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_2084_inst] (EQ_u3_u1_2081_wire p3_valid_2047 konst_2083_wire_constant) (MUX_2084_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_2087_inst] (active_packet_1993 konst_2086_wire_constant) (EQ_u3_u1_2087_wire)   $flowthrough 
    $delay EQ_u3_u1_2087_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_2090_inst] (EQ_u3_u1_2087_wire p4_valid_2052 konst_2089_wire_constant) (MUX_2090_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_2091_inst] (MUX_2084_wire MUX_2090_wire) (OR_u1_u1_2091_wire)   $flowthrough 
    $delay OR_u1_u1_2091_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_2092_inst] (OR_u1_u1_2078_wire OR_u1_u1_2091_wire) (valid_active_pkt_word_read_2093)   $flowthrough 
    $delay OR_u1_u1_2092_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
    //  file .Aa/switch2x2.opt.aa, line 496
    $call [call_stmt_2103_call] $module prioritySelect(down_counter_1969 active_packet_1993 priority_index_2001 p1_valid_2037 p2_valid_2042 p3_valid_2047 p4_valid_2052) (next_active_packet_2103 next_priority_index_2103)   $flowthrough $fullrate
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 497
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_2107_inst] (next_active_packet_2103 konst_2106_wire_constant) (NEQ_u3_u1_2107_wire)   $flowthrough 
    $delay NEQ_u3_u1_2107_inst 0
    // (down_counter == 0 )
    ==[EQ_u8_u1_2110_inst] (down_counter_1969 konst_2109_wire_constant) (EQ_u8_u1_2110_wire)   $flowthrough 
    $delay EQ_u8_u1_2110_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_2111_inst] (NEQ_u3_u1_2107_wire EQ_u8_u1_2110_wire) (started_new_packet_2112)   $flowthrough 
    $delay AND_u1_u1_2111_inst 0
    // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 498
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_2117_inst] (next_active_packet_2103 konst_2116_wire_constant) (EQ_u3_u1_2117_wire)   $flowthrough 
    $delay EQ_u3_u1_2117_inst 0
    // ( $slice pkt_1_e_word 15 8 ) 
    [:] [slice_2119_inst] (pkt_1_e_word_1973 15 8) (slice_2119_wire)  $flowthrough
    $delay slice_2119_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
    ? [MUX_2121_inst] (EQ_u3_u1_2117_wire slice_2119_wire konst_2120_wire_constant) (MUX_2121_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_2124_inst] (next_active_packet_2103 konst_2123_wire_constant) (EQ_u3_u1_2124_wire)   $flowthrough 
    $delay EQ_u3_u1_2124_inst 0
    // ( $slice pkt_2_e_word 15 8 ) 
    [:] [slice_2126_inst] (pkt_2_e_word_1978 15 8) (slice_2126_wire)  $flowthrough
    $delay slice_2126_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
    ? [MUX_2128_inst] (EQ_u3_u1_2124_wire slice_2126_wire konst_2127_wire_constant) (MUX_2128_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_2129_inst] (MUX_2121_wire MUX_2128_wire) (OR_u8_u8_2129_wire)   $flowthrough 
    $delay OR_u8_u8_2129_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_2132_inst] (next_active_packet_2103 konst_2131_wire_constant) (EQ_u3_u1_2132_wire)   $flowthrough 
    $delay EQ_u3_u1_2132_inst 0
    // ( $slice pkt_3_e_word 15 8 ) 
    [:] [slice_2134_inst] (pkt_3_e_word_1983 15 8) (slice_2134_wire)  $flowthrough
    $delay slice_2134_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
    ? [MUX_2136_inst] (EQ_u3_u1_2132_wire slice_2134_wire konst_2135_wire_constant) (MUX_2136_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_2139_inst] (next_active_packet_2103 konst_2138_wire_constant) (EQ_u3_u1_2139_wire)   $flowthrough 
    $delay EQ_u3_u1_2139_inst 0
    // ( $slice pkt_4_e_word 15 8 ) 
    [:] [slice_2141_inst] (pkt_4_e_word_1988 15 8) (slice_2141_wire)  $flowthrough
    $delay slice_2141_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
    ? [MUX_2143_inst] (EQ_u3_u1_2139_wire slice_2141_wire konst_2142_wire_constant) (MUX_2143_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
    |[OR_u8_u8_2144_inst] (MUX_2136_wire MUX_2143_wire) (OR_u8_u8_2144_wire)   $flowthrough 
    $delay OR_u8_u8_2144_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
    |[OR_u8_u8_2145_inst] (OR_u8_u8_2129_wire OR_u8_u8_2144_wire) (OR_u8_u8_2145_wire)   $flowthrough 
    $delay OR_u8_u8_2145_inst 0
    // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
    ? [MUX_2147_inst] (started_new_packet_2112 OR_u8_u8_2145_wire active_packet_length_1997) (next_active_packet_length_2148)  $flowthrough
    // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 499
    // (next_active_packet_length - 1 )
    -[SUB_u8_u8_2153_inst] (next_active_packet_length_2148 konst_2152_wire_constant) (SUB_u8_u8_2153_wire)   $flowthrough 
    $delay SUB_u8_u8_2153_inst 0
    // (down_counter - 1 )
    -[SUB_u8_u8_2157_inst] (down_counter_1969 konst_2156_wire_constant) (SUB_u8_u8_2157_wire)   $flowthrough 
    $delay SUB_u8_u8_2157_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_2159_inst] (valid_active_pkt_word_read_2093 SUB_u8_u8_2157_wire down_counter_1969) (MUX_2159_wire)  $flowthrough
    // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_2160_inst] (started_new_packet_2112 SUB_u8_u8_2153_wire MUX_2159_wire) (next_down_counter_2161)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 500
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_2164_inst] (p1_valid_2037) (NOT_u1_u1_2164_wire)   $flowthrough
    $delay NOT_u1_u1_2164_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_2167_inst] (next_active_packet_2103 konst_2166_wire_constant) (EQ_u3_u1_2167_wire)   $flowthrough 
    $delay EQ_u3_u1_2167_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_2168_inst] (NOT_u1_u1_2164_wire EQ_u3_u1_2167_wire) (read_from_1_2169)   $flowthrough 
    $delay OR_u1_u1_2168_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 501
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_2172_inst] (p2_valid_2042) (NOT_u1_u1_2172_wire)   $flowthrough
    $delay NOT_u1_u1_2172_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_2175_inst] (next_active_packet_2103 konst_2174_wire_constant) (EQ_u3_u1_2175_wire)   $flowthrough 
    $delay EQ_u3_u1_2175_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_2176_inst] (NOT_u1_u1_2172_wire EQ_u3_u1_2175_wire) (read_from_2_2177)   $flowthrough 
    $delay OR_u1_u1_2176_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 502
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_2180_inst] (p3_valid_2047) (NOT_u1_u1_2180_wire)   $flowthrough
    $delay NOT_u1_u1_2180_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_2183_inst] (next_active_packet_2103 konst_2182_wire_constant) (EQ_u3_u1_2183_wire)   $flowthrough 
    $delay EQ_u3_u1_2183_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_2184_inst] (NOT_u1_u1_2180_wire EQ_u3_u1_2183_wire) (read_from_3_2185)   $flowthrough 
    $delay OR_u1_u1_2184_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 503
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_2188_inst] (p4_valid_2052) (NOT_u1_u1_2188_wire)   $flowthrough
    $delay NOT_u1_u1_2188_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_2191_inst] (next_active_packet_2103 konst_2190_wire_constant) (EQ_u3_u1_2191_wire)   $flowthrough 
    $delay EQ_u3_u1_2191_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_2192_inst] (NOT_u1_u1_2188_wire EQ_u3_u1_2191_wire) (read_from_4_2193)   $flowthrough 
    $delay OR_u1_u1_2192_inst 0
    // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 504
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_2197_inst] (next_active_packet_2103 konst_2196_wire_constant) (EQ_u3_u1_2197_wire)   $flowthrough 
    $delay EQ_u3_u1_2197_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_2199_inst] (pkt_1_e_word_1973 31 0) (slice_2199_wire)  $flowthrough
    $delay slice_2199_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
    ? [MUX_2201_inst] (EQ_u3_u1_2197_wire slice_2199_wire konst_2200_wire_constant) (MUX_2201_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_2204_inst] (next_active_packet_2103 konst_2203_wire_constant) (EQ_u3_u1_2204_wire)   $flowthrough 
    $delay EQ_u3_u1_2204_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_2206_inst] (pkt_2_e_word_1978 31 0) (slice_2206_wire)  $flowthrough
    $delay slice_2206_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
    ? [MUX_2208_inst] (EQ_u3_u1_2204_wire slice_2206_wire konst_2207_wire_constant) (MUX_2208_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_2209_inst] (MUX_2201_wire MUX_2208_wire) (OR_u32_u32_2209_wire)   $flowthrough 
    $delay OR_u32_u32_2209_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_2212_inst] (next_active_packet_2103 konst_2211_wire_constant) (EQ_u3_u1_2212_wire)   $flowthrough 
    $delay EQ_u3_u1_2212_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_2214_inst] (pkt_3_e_word_1983 31 0) (slice_2214_wire)  $flowthrough
    $delay slice_2214_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
    ? [MUX_2216_inst] (EQ_u3_u1_2212_wire slice_2214_wire konst_2215_wire_constant) (MUX_2216_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_2219_inst] (next_active_packet_2103 konst_2218_wire_constant) (EQ_u3_u1_2219_wire)   $flowthrough 
    $delay EQ_u3_u1_2219_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_2221_inst] (pkt_4_e_word_1988 31 0) (slice_2221_wire)  $flowthrough
    $delay slice_2221_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
    ? [MUX_2223_inst] (EQ_u3_u1_2219_wire slice_2221_wire konst_2222_wire_constant) (MUX_2223_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
    |[OR_u32_u32_2224_inst] (MUX_2216_wire MUX_2223_wire) (OR_u32_u32_2224_wire)   $flowthrough 
    $delay OR_u32_u32_2224_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
    |[OR_u32_u32_2225_inst] (OR_u32_u32_2209_wire OR_u32_u32_2224_wire) (data_to_out_2226)   $flowthrough 
    $delay OR_u32_u32_2225_inst 0
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch2x2.opt.aa, line 505
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_2230_inst] (next_active_packet_2103 konst_2229_wire_constant) (EQ_u3_u1_2230_wire)   $flowthrough 
    $delay EQ_u3_u1_2230_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_2233_inst] (EQ_u3_u1_2230_wire p1_valid_2037 konst_2232_wire_constant) (MUX_2233_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_2236_inst] (next_active_packet_2103 konst_2235_wire_constant) (EQ_u3_u1_2236_wire)   $flowthrough 
    $delay EQ_u3_u1_2236_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_2239_inst] (EQ_u3_u1_2236_wire p2_valid_2042 konst_2238_wire_constant) (MUX_2239_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_2240_inst] (MUX_2233_wire MUX_2239_wire) (OR_u1_u1_2240_wire)   $flowthrough 
    $delay OR_u1_u1_2240_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_2243_inst] (next_active_packet_2103 konst_2242_wire_constant) (EQ_u3_u1_2243_wire)   $flowthrough 
    $delay EQ_u3_u1_2243_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_2246_inst] (EQ_u3_u1_2243_wire p3_valid_2047 konst_2245_wire_constant) (MUX_2246_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_2249_inst] (next_active_packet_2103 konst_2248_wire_constant) (EQ_u3_u1_2249_wire)   $flowthrough 
    $delay EQ_u3_u1_2249_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_2252_inst] (EQ_u3_u1_2249_wire p4_valid_2052 konst_2251_wire_constant) (MUX_2252_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_2253_inst] (MUX_2246_wire MUX_2252_wire) (OR_u1_u1_2253_wire)   $flowthrough 
    $delay OR_u1_u1_2253_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_2254_inst] (OR_u1_u1_2240_wire OR_u1_u1_2253_wire) (send_flag_2255)   $flowthrough 
    $delay OR_u1_u1_2254_inst 0
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch2x2.opt.aa, line 506
    // out_data_4
    $ioport $out [WPIPE_out_data_4_2257_inst]  (data_to_out_2226) (out_data_4) $guard ( send_flag_2255 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1967
  //  file .Aa/switch2x2.opt.aa, line 468
  phi_stmt_1969 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1969_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1969_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1969_phi_mux_ack)
  next_down_counter_2161_1972_buf <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_down_counter_1972_Sample/req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_down_counter_1972_Update/req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_down_counter_1972_Sample/ack branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_down_counter_1972_Update/ack)
  phi_stmt_1973 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1973_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1973_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1973_phi_mux_ack)
  // noblock_obuf_1_4
  RPIPE_noblock_obuf_1_4_1977_inst <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_1_4_1977_Sample/rr branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_1_4_1977_Update/cr) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_1_4_1977_Sample/ra branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_1_4_1977_Update/ca)
  phi_stmt_1978 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1978_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1978_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1978_phi_mux_ack)
  // noblock_obuf_2_4
  RPIPE_noblock_obuf_2_4_1982_inst <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_2_4_1982_Sample/rr branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_2_4_1982_Update/cr) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_2_4_1982_Sample/ra branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_2_4_1982_Update/ca)
  phi_stmt_1983 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1983_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1983_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1983_phi_mux_ack)
  // noblock_obuf_3_4
  RPIPE_noblock_obuf_3_4_1987_inst <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_3_4_1987_Sample/rr branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_3_4_1987_Update/cr) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_3_4_1987_Sample/ra branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_3_4_1987_Update/ca)
  phi_stmt_1988 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1988_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1988_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1988_phi_mux_ack)
  // noblock_obuf_4_4
  RPIPE_noblock_obuf_4_4_1992_inst <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_4_4_1992_Sample/rr branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_4_4_1992_Update/cr) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_4_4_1992_Sample/ra branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/RPIPE_noblock_obuf_4_4_1992_Update/ca)
  phi_stmt_1993 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1993_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1993_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1993_phi_mux_ack)
  next_active_packet_2103_1996_buf <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_1996_Sample/req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_1996_Update/req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_1996_Sample/ack branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_1996_Update/ack)
  phi_stmt_1997 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1997_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1997_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_1997_phi_mux_ack)
  next_active_packet_length_2148_2000_buf <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_length_2000_Sample/req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_length_2000_Update/req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_length_2000_Sample/ack branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_active_packet_length_2000_Update/ack)
  phi_stmt_2001 <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_2001_entry_sample_req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_2001_loopback_sample_req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/phi_stmt_2001_phi_mux_ack)
  next_priority_index_2103_2004_buf <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_priority_index_2004_Sample/req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_priority_index_2004_Update/req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_priority_index_2004_Sample/ack branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/R_next_priority_index_2004_Update/ack)
  // 			$volatile senderPort := ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 488
  // ((( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) ) | (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) ))
  // (( $mux read_from_1 0   _b0  )  | ( $mux read_from_2 1   _b0  ) )
  // read_from_1
  // ( $mux read_from_1 0   _b0  ) 
  // read_from_2
  // ( $mux read_from_2 1   _b0  ) 
  // (( $mux read_from_3 2   _b0  )  | ( $mux read_from_4 3   _b0  ) )
  // read_from_3
  // ( $mux read_from_3 2   _b0  ) 
  // read_from_4
  // ( $mux read_from_4 3   _b0  ) 
  // 			$call updateCounter (senderPort 3  ($bitcast ($uint<1>) _b0  ) ) (continue ) 
  //  file .Aa/switch2x2.opt.aa, line 489
  // senderPort
  call_stmt_2032_call <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/call_stmt_2032_Sample/crr branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/call_stmt_2032_Update/ccr) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/call_stmt_2032_Sample/cra branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/call_stmt_2032_Update/cca)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 490
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 491
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 492
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 493
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 495
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet priority_index p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_priority_index ) 
  //  file .Aa/switch2x2.opt.aa, line 496
  // down_counter
  // active_packet
  // priority_index
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 497
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_active_packet_length := ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 498
  // started_new_packet
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) 
  // active_packet_length
  // ( $mux started_new_packet ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 15 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 15 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 15 8 )   _b0  ) ))  active_packet_length ) 
  // 			$volatile next_down_counter := ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 499
  // started_new_packet
  // (next_active_packet_length - 1 )
  // next_active_packet_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (next_active_packet_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 500
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 501
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 502
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 503
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 504
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 31 0 )   _b0  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch2x2.opt.aa, line 505
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch2x2.opt.aa, line 506
  // data_to_out
  // out_data_4
  WPIPE_out_data_4_2257_inst <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/WPIPE_out_data_4_2257_Sample/req branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/WPIPE_out_data_4_2257_Update/req) (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/WPIPE_out_data_4_2257_Sample/ack branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/WPIPE_out_data_4_2257_Update/ack)
  do_while_stmt_1967_branch <=> (branch_block_stmt_1966/do_while_stmt_1967/do_while_stmt_1967_loop_body/condition_evaluated) (branch_block_stmt_1966/do_while_stmt_1967/loop_exit/ack branch_block_stmt_1966/do_while_stmt_1967/loop_taken/ack)
}
